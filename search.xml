<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>杭州义益计组软件仿真 - 指令设计综合实验</title>
      <link href="/2023/06/18/0001-10/"/>
      <url>/2023/06/18/0001-10/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理实验8"><a href="#计算机组成原理实验8" class="headerlink" title="计算机组成原理实验8"></a>计算机组成原理实验8</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 掌握指令设计方法，自主设计指令</span><br><span class="line">2) 掌握使用自己设计的指令编写程序的方法</span><br></pre></td></tr></table></figure><br><h2 id="实验内容及原理"><a href="#实验内容及原理" class="headerlink" title="实验内容及原理"></a>实验内容及原理</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">实验内容</button></li><li class="tab"><button type="button" data-href="#-2">实验原理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;实验内容：</span><br><span class="line">•定义指令SUB ADDR，指令码为D4，实现功能：[addr]-drdr；</span><br><span class="line">•改写简单模型机中的ADD ADDR指令，使之能判别进位标志；</span><br><span class="line">•定义指令JMPC ADDR，指令码为DC，实现功能：若cy=1，addr pc；</span><br><span class="line">•运用上述指令，结合简单模型机五条指令，编写程序实现：将地址为20H的内存单元中的数据（初始值为0），加上一个输入数据</span><br><span class="line">（50H）,存放到20H内存单元，并输出到OUT单元显示，并循环累加，当数据即将溢出时，转做减法操作，当减到即将溢出时，又做</span><br><span class="line">加法操作，如此循环。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><img src="https://s2.loli.net/2023/06/18/waQxY4TKmEqhvNo.png" alt="0ac91d1bfb79e1261306556ee9a6a5f.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><br><h2 id="实验主要仪器设备"><a href="#实验主要仪器设备" class="headerlink" title="实验主要仪器设备"></a>实验主要仪器设备</h2><blockquote><p><strong>略</strong></p></blockquote><br><h2 id="实验步骤、数据记录及总结分析"><a href="#实验步骤、数据记录及总结分析" class="headerlink" title="实验步骤、数据记录及总结分析"></a>实验步骤、数据记录及总结分析</h2><h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">存储器</button></li><li class="tab"><button type="button" data-href="#-2">微存储器</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><img src="https://s2.loli.net/2023/06/18/O6CWsmIGKfJt91r.png" alt="453c9a1f2ced83421d729905fea23d3.png"><br><img src="https://s2.loli.net/2023/06/18/1ry6tBLUHOvgfIw.png" alt="dcfae6aa873c31a20badcf9f851b6c0.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><img src="https://s2.loli.net/2023/06/18/Ahz1wyYgBDOZlbG.png" alt="8de2c21627fbcc3566722e5257305f2.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="实验结果与结论"><a href="#实验结果与结论" class="headerlink" title="实验结果与结论"></a>实验结果与结论</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个周期输出结果：</span><br><span class="line">00H -&gt; 50H -&gt; A0H -&gt;F0H -&gt; A0H -&gt; 50H -&gt; 00H</span><br><span class="line"></span><br><span class="line">J(4)散转入口地址=微代码下址（OR）0,0,0,0,0,FC,FZ</span><br><span class="line">因为是或的逻辑关系，如果我们想用FZ，而与FC无关，来控制分支的话，</span><br><span class="line">只需要设置微代码下址为xxxxx10即可。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="存在疑问"><a href="#存在疑问" class="headerlink" title="存在疑问"></a>存在疑问</h3><blockquote><p><strong>略</strong></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理实验课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭州义益计组软件仿真 - 带移位模型机实验</title>
      <link href="/2023/06/18/0001-09/"/>
      <url>/2023/06/18/0001-09/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理实验9"><a href="#计算机组成原理实验9" class="headerlink" title="计算机组成原理实验9"></a>计算机组成原理实验9</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 掌握指令设计方法，自主设计指令</span><br><span class="line">2) 掌握使用自己设计的指令编写程序的方法</span><br></pre></td></tr></table></figure><br><h2 id="实验内容及原理"><a href="#实验内容及原理" class="headerlink" title="实验内容及原理"></a>实验内容及原理</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">实验内容</button></li><li class="tab"><button type="button" data-href="#-2">实验原理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;实验内容一：</span><br><span class="line">•利用定义的RR指令编程序实现输出指示灯”10000000”(来源于input单元)从左往右循环移动。</span><br><span class="line">•利用定义的RR ADDR编程序实现输出指示灯”10000000”(来源于input单元)从左往右循环移动。</span><br><span class="line"></span><br><span class="line">&gt;实验内容二：</span><br><span class="line">•利用定义的FIVE指令编程序实现输出指示灯”00000001”(来源于input单元)循环乘5输出。</span><br><span class="line">•定义指令FIVE ADDR实现功能[addr]*5DR，并用该指令来实现上述程序。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><img src="https://s2.loli.net/2023/06/18/QS276JzyZjXvbte.png" alt="b0500cb6a2c237dfa50bf8cf741657d.png"><br><img src="https://s2.loli.net/2023/06/18/vM2Tyqu4iPs6VW1.png" alt="189b823e4f5aaeabc9fc1158a7792a8.png"><br><img src="https://s2.loli.net/2023/06/18/odADt8COPcJWuMx.png" alt="d63295fc436955f2b755eb7120e2dd6.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><br><h2 id="实验主要仪器设备"><a href="#实验主要仪器设备" class="headerlink" title="实验主要仪器设备"></a>实验主要仪器设备</h2><blockquote><p><strong>略</strong></p></blockquote><br><h2 id="实验步骤、数据记录及总结分析"><a href="#实验步骤、数据记录及总结分析" class="headerlink" title="实验步骤、数据记录及总结分析"></a>实验步骤、数据记录及总结分析</h2><h3 id="实验一-RR实现循环右移-初始值10H"><a href="#实验一-RR实现循环右移-初始值10H" class="headerlink" title="实验一 RR实现循环右移(初始值10H)"></a>实验一 RR实现循环右移(初始值10H)</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">存储器1</button></li><li class="tab"><button type="button" data-href="#-2">微存储器1</button></li><li class="tab"><button type="button" data-href="#-3">实验结果1</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><img src="https://s2.loli.net/2023/06/18/4JDUdYnhZraFjP6.png" alt="88085a8e96c8a20324ce114442c5033.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><img src="https://s2.loli.net/2023/06/18/S3wrkLRcIKXyTaG.png" alt="a729d5b72073d1e8a62b8db69895a91.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><p>前三轮输出：08H，04H，02H</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="实验二-RR-ADDR实现循环右移-初始值10H"><a href="#实验二-RR-ADDR实现循环右移-初始值10H" class="headerlink" title="实验二 RR ADDR实现循环右移(初始值10H)"></a>实验二 RR ADDR实现循环右移(初始值10H)</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">存储器2</button></li><li class="tab"><button type="button" data-href="#-2">微存储器2</button></li><li class="tab"><button type="button" data-href="#-3">实验结果2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><img src="https://s2.loli.net/2023/06/18/cfoU8dNHSk752ua.png" alt="7dd58b7b1e4b92c6f80ed7cce04b3b8.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><img src="https://s2.loli.net/2023/06/18/qyb1ZNocQ4rlEtJ.png" alt="009f1b374ba0d53a41bf44b4d2659e5.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><p>前三轮输出：10H，08H，04H</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="实验三-FIVE实现循环乘5-初始值01H"><a href="#实验三-FIVE实现循环乘5-初始值01H" class="headerlink" title="实验三 FIVE实现循环乘5(初始值01H)"></a>实验三 FIVE实现循环乘5(初始值01H)</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">存储器3</button></li><li class="tab"><button type="button" data-href="#-2">微存储器3</button></li><li class="tab"><button type="button" data-href="#-3">实验结果3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><img src="https://s2.loli.net/2023/06/18/P19xDuHgCkFGh6A.png" alt="87ad0383d160d8569c1cf6fa59617af.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><img src="https://s2.loli.net/2023/06/18/eTU3h7mLg4t6FVq.png" alt="963c7ff09d02632edccadb451e3ce1a.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><p>前三轮输出：05H，19H，7DH</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">定义指令FIVE ADDR1 ADDR2实现功能[addr1]*5[addr2]，思考要实现实验二的程序，还需要定义什么指令？如何实现？</span><br><span class="line"></span><br><span class="line">解答：</span><br><span class="line"></span><br><span class="line">指令: FIVE ADDR1 ADDR2</span><br><span class="line">指令格式: D4 addr1 addr2</span><br><span class="line">功能: [addr1] * 5 -&gt; [addr2]</span><br><span class="line"></span><br><span class="line">PC-&gt;AR PC+1PC-B, B-AR, PC+1</span><br><span class="line">RAM-&gt;AR/M-R, B-AR</span><br><span class="line">RAM-&gt;DA1/M-R, B-DA1</span><br><span class="line">RAM-&gt;299/M-R, S1S0=11</span><br><span class="line">PC-&gt;AR PC+1PC-B, B-AR, PC+1</span><br><span class="line">RAM-&gt;DR/M-R, B-DR</span><br><span class="line">299-&gt;DA1/299-B, B-DA1</span><br><span class="line">299-&gt;循环左移/299-B, S1S0M=010</span><br><span class="line">299-&gt;循环左移/299-B, S1S0M=010</span><br><span class="line">299-&gt;DA2/299-B, B-DA2</span><br><span class="line">DR-&gt;ARDR-B,B-AR</span><br><span class="line">DA1+DA2-&gt; [AR]/299-B, /M-W</span><br></pre></td></tr></table></figure><h3 id="存在疑问"><a href="#存在疑问" class="headerlink" title="存在疑问"></a>存在疑问</h3><blockquote><p><strong>略</strong></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理实验课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt实验 - 二维绘图</title>
      <link href="/2023/06/18/0002-09/"/>
      <url>/2023/06/18/0002-09/</url>
      
        <content type="html"><![CDATA[<h1 id="C-桌面应用程序实验9"><a href="#C-桌面应用程序实验9" class="headerlink" title="C++桌面应用程序实验9"></a>C++桌面应用程序实验9</h1><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 创建一个简单窗口， 按下鼠标左键，拖动鼠标，在用户区上画出一个矩形，矩形左上角以初始按下鼠标的点，右下角为鼠标当前</span><br><span class="line">位置，放开鼠标，窗口用户区显示一个最后的矩形。按下键盘的‘l’(英文字母L的小写)，矩形放大，按下‘s’键，矩形缩小，并能用</span><br><span class="line">方向键实现所画矩形按相应方向移动。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">mainwindow.h</button></li><li class="tab"><button type="button" data-href="#-2">mainwindow.cpp</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MainWindow</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">keyPressEvent</span><span class="params">(QKeyEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QPoint st = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    QPoint ed = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainWindow</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPen&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;st = <span class="keyword">this</span>-&gt;ed = event-&gt;<span class="built_in">pos</span>();</span><br><span class="line"><span class="comment">//        qDebug() &lt;&lt; st.x() &lt;&lt; &quot; &quot; &lt;&lt; st.y() &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">        QCursor cursor;</span><br><span class="line">        cursor.<span class="built_in">setShape</span>(Qt::CrossCursor);</span><br><span class="line">        QApplication::<span class="built_in">setOverrideCursor</span>(cursor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    qDebug() &lt;&lt; st.x() &lt;&lt; &quot; &quot; &lt;&lt; st.y() &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//    qDebug() &lt;&lt; ed.x() &lt;&lt; &quot; &quot; &lt;&lt; ed.y() &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">    <span class="built_in">Q_UNUSED</span>(event);</span><br><span class="line">    QApplication::<span class="built_in">restoreOverrideCursor</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event-&gt;<span class="built_in">buttons</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ed = event-&gt;<span class="built_in">pos</span>();</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; st.<span class="built_in">x</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; st.<span class="built_in">y</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; ed.<span class="built_in">x</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; ed.<span class="built_in">y</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        QMainWindow::<span class="built_in">update</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::keyPressEvent</span><span class="params">(QKeyEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QPoint e = (ed - st) / <span class="number">8</span>;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">if</span> (event-&gt;<span class="built_in">key</span>() == Qt::Key_L)</span><br><span class="line">    &#123;</span><br><span class="line">        ed += e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (event-&gt;<span class="built_in">key</span>() == Qt::Key_S)</span><br><span class="line">    &#123;</span><br><span class="line">        ed -= e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (event-&gt;<span class="built_in">key</span>() == Qt::Key_Up)</span><br><span class="line">    &#123;</span><br><span class="line">        st.<span class="built_in">setY</span>(st.<span class="built_in">y</span>() - p);</span><br><span class="line">        ed.<span class="built_in">setY</span>(ed.<span class="built_in">y</span>() - p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (event-&gt;<span class="built_in">key</span>() == Qt::Key_Down)</span><br><span class="line">    &#123;</span><br><span class="line">        st.<span class="built_in">setY</span>(st.<span class="built_in">y</span>() + p);</span><br><span class="line">        ed.<span class="built_in">setY</span>(ed.<span class="built_in">y</span>() + p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (event-&gt;<span class="built_in">key</span>() == Qt::Key_Left)</span><br><span class="line">    &#123;</span><br><span class="line">        st.<span class="built_in">setX</span>(st.<span class="built_in">x</span>() - p);</span><br><span class="line">        ed.<span class="built_in">setX</span>(ed.<span class="built_in">x</span>() - p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (event-&gt;<span class="built_in">key</span>() == Qt::Key_Right)</span><br><span class="line">    &#123;</span><br><span class="line">        st.<span class="built_in">setX</span>(st.<span class="built_in">x</span>() + p);</span><br><span class="line">        ed.<span class="built_in">setX</span>(ed.<span class="built_in">x</span>() + p);</span><br><span class="line">    &#125;</span><br><span class="line">    QMainWindow::<span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">(Qt::black, <span class="number">5</span>, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin)</span></span>;</span><br><span class="line">    painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line">    painter.<span class="built_in">drawRect</span>(st.<span class="built_in">x</span>(), st.<span class="built_in">y</span>(), ed.<span class="built_in">x</span>() - st.<span class="built_in">x</span>(), ed.<span class="built_in">y</span>() - st.<span class="built_in">y</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.  做一个简单的画图程序，基本功能：</span><br><span class="line"></span><br><span class="line">1） 按“L”后，用鼠标拖拽能在屏幕上画直线；</span><br><span class="line">2） 按“E”后,用鼠标托拽能在屏幕上画矩形</span><br><span class="line">3） 按“C”后，用鼠标拖拽能在屏幕上画圆</span><br><span class="line">4） 按“R”“G”“B”能够改变所画图形为红、绿、蓝色</span><br><span class="line">5） 对上述功能做菜单、工具栏和状态栏</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">mainwindow.h</button></li><li class="tab"><button type="button" data-href="#-2">mainwindow.cpp</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MainWindow</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QPoint st = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    QPoint ed = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">bool</span> Rect = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> Circle = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> Line = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> Red = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> Green = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> Blue = <span class="literal">false</span>;</span><br><span class="line">    QString shape, color, pos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainWindow</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_action_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_action_2_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_action_3_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_action_4_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_action_5_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_action_6_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPainter&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPen&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">statusBar</span>()-&gt;<span class="built_in">showMessage</span>(<span class="string">&quot;Status is here...&quot;</span>);</span><br><span class="line">    shape = <span class="string">&quot;无&quot;</span>; color = <span class="string">&quot;无&quot;</span>, pos = <span class="string">&quot;无&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        Red = Green = Blue = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;st = <span class="keyword">this</span>-&gt;ed = event-&gt;<span class="built_in">pos</span>();</span><br><span class="line"></span><br><span class="line">        QCursor cursor;</span><br><span class="line">        cursor.<span class="built_in">setShape</span>(Qt::CrossCursor);</span><br><span class="line">        QApplication::<span class="built_in">setOverrideCursor</span>(cursor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Q_UNUSED</span>(event);</span><br><span class="line">    QApplication::<span class="built_in">restoreOverrideCursor</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event-&gt;<span class="built_in">buttons</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;ed = event-&gt;<span class="built_in">pos</span>();</span><br><span class="line">        QMainWindow::<span class="built_in">update</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QPainter <span class="title">painter</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pos != <span class="string">&quot;无&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pos = <span class="string">&quot;(&quot;</span> + QString::<span class="built_in">number</span>(st.<span class="built_in">x</span>()) + <span class="string">&quot;,&quot;</span> + QString::<span class="built_in">number</span>(st.<span class="built_in">y</span>()) +</span><br><span class="line">              <span class="string">&quot;) -&gt; (&quot;</span> + QString::<span class="built_in">number</span>(ed.<span class="built_in">x</span>()) + <span class="string">&quot;,&quot;</span> + QString::<span class="built_in">number</span>(ed.<span class="built_in">y</span>()) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">statusBar</span>()-&gt;<span class="built_in">showMessage</span>(<span class="string">&quot;形状：&quot;</span> + shape + <span class="string">&quot;  /  颜色：&quot;</span> + color + <span class="string">&quot;  /  坐标：&quot;</span> + pos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画笔颜色</span></span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">(Qt::black, <span class="number">5</span>, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin)</span></span>;</span><br><span class="line">    <span class="function">QPen <span class="title">pen_r</span><span class="params">(Qt::red, <span class="number">5</span>, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin)</span></span>;</span><br><span class="line">    <span class="function">QPen <span class="title">pen_g</span><span class="params">(Qt::green, <span class="number">5</span>, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin)</span></span>;</span><br><span class="line">    <span class="function">QPen <span class="title">pen_b</span><span class="params">(Qt::blue, <span class="number">5</span>, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin)</span></span>;</span><br><span class="line">    <span class="keyword">if</span> (Red)</span><br><span class="line">    &#123;</span><br><span class="line">        painter.<span class="built_in">setPen</span>(pen_r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Green)</span><br><span class="line">    &#123;</span><br><span class="line">        painter.<span class="built_in">setPen</span>(pen_g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Blue)</span><br><span class="line">    &#123;</span><br><span class="line">        painter.<span class="built_in">setPen</span>(pen_b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        painter.<span class="built_in">setPen</span>(pen);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//形状</span></span><br><span class="line">    <span class="keyword">if</span> (Line)</span><br><span class="line">    &#123;</span><br><span class="line">        painter.<span class="built_in">drawLine</span>(st.<span class="built_in">x</span>(), st.<span class="built_in">y</span>(), ed.<span class="built_in">x</span>(), ed.<span class="built_in">y</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Rect)</span><br><span class="line">    &#123;</span><br><span class="line">        painter.<span class="built_in">drawRect</span>(st.<span class="built_in">x</span>(), st.<span class="built_in">y</span>(), ed.<span class="built_in">x</span>() - st.<span class="built_in">x</span>(), ed.<span class="built_in">y</span>() - st.<span class="built_in">y</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Circle)</span><br><span class="line">    &#123;</span><br><span class="line">        painter.<span class="built_in">drawEllipse</span>(st.<span class="built_in">x</span>(), st.<span class="built_in">y</span>(), ed.<span class="built_in">x</span>() - st.<span class="built_in">x</span>(), ed.<span class="built_in">y</span>() - st.<span class="built_in">y</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_action_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Line = <span class="literal">true</span>; Rect = Circle = <span class="literal">false</span>;</span><br><span class="line">    shape = <span class="string">&quot;直线&quot;</span>; color = <span class="string">&quot;黑色(默认)&quot;</span>; pos = <span class="string">&quot;(0,0) -&gt; (0,0)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_action_2_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Rect = <span class="literal">true</span>; Circle = Line = <span class="literal">false</span>;</span><br><span class="line">    shape = <span class="string">&quot;矩形&quot;</span>; color = <span class="string">&quot;黑色(默认)&quot;</span>; pos = <span class="string">&quot;(0,0) -&gt; (0,0)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_action_3_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Circle = <span class="literal">true</span>; Rect = Line = <span class="literal">false</span>;</span><br><span class="line">    shape = <span class="string">&quot;圆&quot;</span>; color = <span class="string">&quot;黑色(默认)&quot;</span>; pos = <span class="string">&quot;(0,0) -&gt; (0,0)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_action_4_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Red = <span class="literal">true</span>; Green = Blue = <span class="literal">false</span>; color = <span class="string">&quot;红色&quot;</span>;</span><br><span class="line">    QMainWindow::<span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_action_5_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Green = <span class="literal">true</span>; Red = Blue = <span class="literal">false</span>; color = <span class="string">&quot;绿色&quot;</span>;</span><br><span class="line">    QMainWindow::<span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_action_6_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Blue = <span class="literal">true</span>; Green = Red = <span class="literal">false</span>; color = <span class="string">&quot;蓝色&quot;</span>;</span><br><span class="line">    QMainWindow::<span class="built_in">update</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> C++桌面应用程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 桌面应用程序 </tag>
            
            <tag> QT creator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭州义益计组软件仿真 - 简单模型机循环加(减)法实验</title>
      <link href="/2023/05/14/0001-08/"/>
      <url>/2023/05/14/0001-08/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理实验8"><a href="#计算机组成原理实验8" class="headerlink" title="计算机组成原理实验8"></a>计算机组成原理实验8</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 了解存储器的工作原理</span><br><span class="line">2) 了解6116芯片结构与功能</span><br><span class="line">3) 掌握存储器读写方法</span><br><span class="line">4) 理解内存地址与内存内容</span><br></pre></td></tr></table></figure><br><h2 id="实验内容及原理"><a href="#实验内容及原理" class="headerlink" title="实验内容及原理"></a>实验内容及原理</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">实验内容</button></li><li class="tab"><button type="button" data-href="#-2">实验原理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;实验内容一：</span><br><span class="line">•根据简单模型机已经定义的5条指令，编程实现以下功能：</span><br><span class="line">•从输入单元输入数据20H；</span><br><span class="line">•将该输入数据与地址为20H的内存单元中存储的数据（[20H]）相加后，存放回地址为20H的内存单元中，并在输出单元显示。</span><br><span class="line">•一直重复该过程实现循环累加。</span><br><span class="line"></span><br><span class="line">&gt;实验内容二：</span><br><span class="line">•新定义一条减法指令SUB，实现功能 [ADDR]-R0R0。</span><br><span class="line">•编程实现以下功能：</span><br><span class="line">•从输入单元输入数据20H；</span><br><span class="line">•将地址为20H的内存单元中存储的数据（[20H]）减去该输入数据后，存放回地址为20H的内存单元中，并在输出单元显示。</span><br><span class="line">•一直重复该过程实现循环累减。</span><br><span class="line">注：[20H]中数据预置为80H。</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p><img src="https://s2.loli.net/2023/05/12/XGUQioLCahYfnmV.jpg" alt="图片4.jpg"><br><img src="https://s2.loli.net/2023/05/12/Atscx6qQZfwrDpX.jpg" alt="图片3.jpg"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">J(1)散转的方式：</span><br><span class="line"></span><br><span class="line">当指令码I7 I6=11时</span><br><span class="line">散转入口地址=微代码下址（OR）0，1，0，I5，I4，I3，I2</span><br><span class="line"></span><br><span class="line">当指令码I7 I6≠11时</span><br><span class="line">散转入口地址=微代码下址（OR）0，0，0，I7，I6，I5，I4</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><br><h2 id="实验主要仪器设备"><a href="#实验主要仪器设备" class="headerlink" title="实验主要仪器设备"></a>实验主要仪器设备</h2><blockquote><p><strong>略</strong></p></blockquote><br><h2 id="实验步骤、数据记录及总结分析"><a href="#实验步骤、数据记录及总结分析" class="headerlink" title="实验步骤、数据记录及总结分析"></a>实验步骤、数据记录及总结分析</h2><h3 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.打开软件</span><br><span class="line">2.打开简单模型机</span><br><span class="line">3.仿真</span><br><span class="line">4.下载</span><br><span class="line">5.关闭音响，</span><br><span class="line">6.在主存储器和微存储器里填入以下内容</span><br><span class="line">7.输入数据键入20H</span><br><span class="line">8.运行</span><br></pre></td></tr></table></figure><h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><p><img src="https://s2.loli.net/2023/05/12/rRUXJpw6qMunbdG.png" alt="a25eb21ac8ace119efafad5fb0b8163.png"><br><img src="https://s2.loli.net/2023/05/12/4J9Eksh2twMmRiT.png" alt="3c6ad4d3e7329141c6479395cd44b7b.png"></p><h3 id="实验结果与结论"><a href="#实验结果与结论" class="headerlink" title="实验结果与结论"></a>实验结果与结论</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">80 -&gt; 60 -&gt; 40 -&gt; 20 -&gt; 00 -&gt; E0 -&gt; C0 -&gt; A0 -&gt; 80 -&gt; 60 -&gt; …</span><br></pre></td></tr></table></figure><h3 id="存在疑问"><a href="#存在疑问" class="headerlink" title="存在疑问"></a>存在疑问</h3><blockquote><p><strong>略</strong></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理实验课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭州义益计组软件仿真 - 存储器读写实验</title>
      <link href="/2023/05/14/0001-07/"/>
      <url>/2023/05/14/0001-07/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理实验7"><a href="#计算机组成原理实验7" class="headerlink" title="计算机组成原理实验7"></a>计算机组成原理实验7</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1) 了解存储器的工作原理</span><br><span class="line">2) 了解6116芯片结构与功能</span><br><span class="line">3) 掌握存储器读写方法</span><br><span class="line">4) 理解内存地址与内存内容</span><br></pre></td></tr></table></figure><br><h2 id="实验内容及原理"><a href="#实验内容及原理" class="headerlink" title="实验内容及原理"></a>实验内容及原理</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">初始数据</button></li><li class="tab"><button type="button" data-href="#-2">实验内容</button></li><li class="tab"><button type="button" data-href="#-3">实验原理</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在内存中存入初始数据。</span><br><span class="line"></span><br><span class="line">地址    数据</span><br><span class="line">01H     80H</span><br><span class="line">02H     40H</span><br><span class="line">03H     </span><br><span class="line">40H     11H</span><br><span class="line">80H     22H</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;实验内容一：</span><br><span class="line"></span><br><span class="line">将地址分别为01、02的内存中的数据相加后，写入到地址为03的内存中。并在OUT单元读出。</span><br><span class="line"></span><br><span class="line">&gt;实验内容二：</span><br><span class="line"></span><br><span class="line">在实验一的基础上，将地址分别为01、02的内存中的数据为地址的内存中的数据相加后，写入到地址为03的内存中的数据</span><br><span class="line">为地址的内存单元中，并在OUT单元读出。这里地址01和02中存储的数据都是一个内存地址（假设分别为A和B），而真正</span><br><span class="line">要进行加法运算的操作数据存放在地址A和B中；类似的，内存地址03中存储的数据也是一个地址（假设为C），则最后加法</span><br><span class="line">运算的结果应该存放在地址C中。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6116芯片主要引脚功能（见下图1）：</span><br><span class="line">D7-D0：8位数据输入输出，芯片的数据输入/输出共用一个引脚。</span><br><span class="line">A10-A0：11位地址线，指示芯片内部的2048个存储单元编号。</span><br><span class="line">/CS：片选控制信号，低电平时，芯片可进行读写操作，高电平时，芯片保存信息不能进行读写操作。</span><br><span class="line">/WE：写控制信号，低电平时，把数据线上的数据写入到地址线A10-A0指示的存储器单元中。</span><br><span class="line">/OE：读控制信号，低电平时，把地址线A10-A0指示的存储器单元的数据读出到数据线上。</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/03/nF3oQpNECfrlHJt.jpg" alt="图片1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">计组实验箱中存储器工作模式（见下图2）：</span><br><span class="line"></span><br><span class="line">内存地址与内存内容：</span><br><span class="line">内存用于存放当前正在执行的数据和程序。</span><br><span class="line">内存地址就是对内存中每个存储单元的一个编号，方便对某个特定存储单元的访问。</span><br><span class="line">内存内容是存储单元中存储的数据，可以是指令、操作数、地址等。</span><br><span class="line">如果把内存看成一个酒店，那么存储单元就是客房，内存地址就是房号，内存内容就是客房里的房客。略有不同的是，内</span><br><span class="line">存这个酒店的客房里不一定是房客，也有可能放了一张字条，上面写着“给105的房客送果盘”（指令）；也有可能里面放了</span><br><span class="line">一张206的房卡（地址），你可以去206找那里的房客。</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/03/quHA8lERznS1jih.png" alt="图片2.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><br><h2 id="实验主要仪器设备"><a href="#实验主要仪器设备" class="headerlink" title="实验主要仪器设备"></a>实验主要仪器设备</h2><blockquote><p><strong>略</strong></p></blockquote><br><h2 id="实验步骤、数据记录及总结分析"><a href="#实验步骤、数据记录及总结分析" class="headerlink" title="实验步骤、数据记录及总结分析"></a>实验步骤、数据记录及总结分析</h2><h3 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h3><blockquote><mark class="hl-label orange">&nbsp;</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Input unit/#IO-R</td><td align="center">Manual unit/#IO-R</td></tr><tr><td align="center">2</td><td align="center">Output unit/#IO-W</td><td align="center">Manual unit/#IO-W</td></tr><tr><td align="center">3</td><td align="center">ALU unit/#/ALU-B</td><td align="center">Manual unit/#/ALU-B</td></tr><tr><td align="center">4</td><td align="center">ALU unit/#S3~S0MCI</td><td align="center">Manual unit/#S3~S0MCI</td></tr><tr><td align="center">5</td><td align="center">ALU unit/#B-DA1</td><td align="center">Manual unit/#B-DA1</td></tr><tr><td align="center">6</td><td align="center">ALU unit/#B-DA2</td><td align="center">Manual unit/#B-DA2</td></tr><tr><td align="center">7</td><td align="center">Manual unit/#/M-W</td><td align="center">MEM unit/#/M-W</td></tr><tr><td align="center">8</td><td align="center">Manual unit/#/M-R</td><td align="center">MEM unit/#/M-R</td></tr><tr><td align="center">9</td><td align="center">Address unit/#A7~A0</td><td align="center">MEM unit/#A7~A0</td></tr><tr><td align="center">10</td><td align="center">Manual unit/#KA</td><td align="center">REG unit/#B-R0</td></tr><tr><td align="center">11</td><td align="center">Manual unit/#KB</td><td align="center">REG unit/#/R0-B</td></tr></tbody></table></blockquote><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><blockquote><mark class="hl-label blue">实验一</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">IN(01)-&gt;AR</td><td align="center">/IO-R, B-AR</td></tr><tr><td align="center">2</td><td align="center">MEM-&gt;DA1</td><td align="center">/M-R, B-DA1</td></tr><tr><td align="center">3</td><td align="center">IN(02)-&gt;AR</td><td align="center">/IO-R, B-AR</td></tr><tr><td align="center">4</td><td align="center">MEM-&gt;DA2</td><td align="center">/M-R, B-DA2</td></tr><tr><td align="center">5</td><td align="center">IN(03)-&gt;AR</td><td align="center">/IO-R, B-AR</td></tr><tr><td align="center">6</td><td align="center">ALU(加法)-&gt;MEM</td><td align="center">/ALU-B, S3~S0MCI=100101, /M-W</td></tr><tr><td align="center">7</td><td align="center">MEM-&gt;OUT</td><td align="center">/M-R, IO-W</td></tr></tbody></table></blockquote><blockquote><mark class="hl-label blue">实验二</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">IN(01)-&gt;AR</td><td align="center">/IO-R, B-AR</td></tr><tr><td align="center">2</td><td align="center">MEM-&gt;R0</td><td align="center">/M-R, B-R0</td></tr><tr><td align="center">3</td><td align="center">R0-&gt;AR</td><td align="center">/R0-B, B-AR</td></tr><tr><td align="center">4</td><td align="center">*(01)-&gt;DA1</td><td align="center">/M-R, B-DA1</td></tr><tr><td align="center">5</td><td align="center">IN(02)-&gt;AR</td><td align="center">/IO-R, B-AR</td></tr><tr><td align="center">6</td><td align="center">MEM-&gt;R0</td><td align="center">/M-R, B-R0</td></tr><tr><td align="center">7</td><td align="center">R0-&gt;AR</td><td align="center">/R0-B, B-AR</td></tr><tr><td align="center">8</td><td align="center">*(02)-&gt;DA2</td><td align="center">/M-R, B-DA2</td></tr><tr><td align="center">9</td><td align="center">IN(03)-&gt;AR</td><td align="center">/IO-R, B-AR</td></tr><tr><td align="center">10</td><td align="center">MEM-&gt;R0</td><td align="center">/M-R, B-R0</td></tr><tr><td align="center">11</td><td align="center">R0-&gt;AR</td><td align="center">/R0-B, B-AR</td></tr><tr><td align="center">12</td><td align="center">LU(加法)-&gt;MEM</td><td align="center">/ALU-B, S3~S0MCI=100101, /M-W</td></tr><tr><td align="center">13</td><td align="center">MEM-&gt;OUT</td><td align="center">/M-R, IO-W</td></tr></tbody></table></blockquote><h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">地址    数据</span><br><span class="line">01H     80H</span><br><span class="line">02H     40H</span><br><span class="line">03H     C0H</span><br><span class="line">40H     11H</span><br><span class="line">80H     22H</span><br><span class="line">C0H     33H</span><br></pre></td></tr></table></figure><h3 id="实验结果与结论"><a href="#实验结果与结论" class="headerlink" title="实验结果与结论"></a>实验结果与结论</h3><blockquote><p><strong>略</strong></p></blockquote><h3 id="存在疑问"><a href="#存在疑问" class="headerlink" title="存在疑问"></a>存在疑问</h3><blockquote><p><strong>略</strong></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理实验课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logisim实验 - 4位快速加法器</title>
      <link href="/2023/05/14/0001-06/"/>
      <url>/2023/05/14/0001-06/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理实验6"><a href="#计算机组成原理实验6" class="headerlink" title="计算机组成原理实验6"></a>计算机组成原理实验6</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">•   掌握先行进位的原理</span><br><span class="line">•   能利用相关知识设计4位先行进位电路并利用设计的4位先行进位电路构造4位快速加法器</span><br><span class="line">•   理解串行加法器与先行快速加法器在时间延迟上的区别</span><br></pre></td></tr></table></figure><br><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果能打破进位链依赖，提前得到所有全加器所需的进位输入信号，则所有全加器都可以并行运算，从而提高</span><br><span class="line">运算性能。n位串行加法电路中和数与进位输出的逻辑表达式如下：</span><br><span class="line">Si = Xi ⊕ Yi ⊕ Ci          Ci+1 = Xi&amp;Yi + (Xi ⊕ Yi)&amp;Ci</span><br><span class="line">若设Gi = Xi&amp;Yi，Pi = Xi ⊕ Yi：</span><br><span class="line">当Gi=1时，Ci+1一定为1，所以将Gi称为进位生成函数；</span><br><span class="line">当Pi=1时，进位输入信号Ci才能传递到进位输出Ci+1处，所以将Pi称为进位传递函数。</span><br><span class="line"></span><br><span class="line">有了进位生成函数和进位传递函数，则Si和Ci+1可转换为：</span><br><span class="line">Si = Pi ⊕ Ci           Ci+1 = Gi + Pi&amp;Ci</span><br><span class="line">由递推关系推导可得到：</span><br><span class="line">Cn = Gn-1 + Pn-1&amp;Gn-2 + Pn-1&amp;Pn-2&amp;Gn-3 + … + Pn-1&amp;Pn-2…P1&amp;P0&amp;C0</span><br><span class="line">由此我们可以利用额外的组合逻辑电路提前产生各位加法运算需要的所有进位输入，再利用Si=Pi ⊕ Ci进行</span><br><span class="line">一级异或门运算即可得到最终的和数。</span><br><span class="line"></span><br><span class="line">G* = G3 + P3&amp;G2 + P3&amp;P2&amp;G1 + P3&amp;P2&amp;P1&amp;G0，称为成组进位生成函数；</span><br><span class="line">P* = P3&amp;P2&amp;P1&amp;P0 ，称为成组进位传递函数。</span><br><span class="line">则有C4 = G* + P&amp;C0</span><br><span class="line"></span><br><span class="line">(tips:  &#x27;+&#x27; 代表或 , &#x27;&amp;&#x27; 代表与 , &#x27;⊕&#x27; 代表异或)</span><br></pre></td></tr></table></figure><br><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用logisim打开“实验06 4位快速加法器（教学版）.circ”文件。</span><br><span class="line"></span><br><span class="line">1. 完成“4位先行进位74182”子电路（注意不要改变封装）。</span><br><span class="line">2. 完成“4位快速加法器”电路。</span><br><span class="line">3. 保存电路文件为“学号姓名实验06.circ”并上传到ftp相关目录（实验06）。</span><br></pre></td></tr></table></figure><br><h2 id="4位先行进位74182"><a href="#4位先行进位74182" class="headerlink" title="4位先行进位74182"></a>4位先行进位74182</h2><mark class="hl-label green">连线图</mark> <p><img src="https://s2.loli.net/2023/04/19/eGHMLBmQPkzbKNf.png" alt="4位先行进位74182-0.png"></p><mark class="hl-label green">封装电路图</mark> <p><img src="https://s2.loli.net/2023/04/19/TLvzSpOf6uN3snt.png" alt="4位先行进位74182-1.png"></p><h2 id="4位快速加法器"><a href="#4位快速加法器" class="headerlink" title="4位快速加法器"></a>4位快速加法器</h2><p>采用了 ‘4位先行进位74182’ 的封装电路</p><p><img src="https://s2.loli.net/2023/04/19/uXe4Lz8UGy5F2CN.png" alt="4位快速加法器.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理实验课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> Logisim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logisim实验 - 8位串行可控加减法</title>
      <link href="/2023/05/14/0001-05/"/>
      <url>/2023/05/14/0001-05/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理实验5"><a href="#计算机组成原理实验5" class="headerlink" title="计算机组成原理实验5"></a>计算机组成原理实验5</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">•   理解多位可控加减法电路的实现原理</span><br><span class="line">•   了解隧道标签和探针的作用</span><br><span class="line">•   掌握logisim子电路封装的方法</span><br><span class="line">•   掌握logisim子电路的使用方法</span><br></pre></td></tr></table></figure><br><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将n个全加器的进位链串联，即可得到n位串行加法器。</span><br><span class="line">两个操作数Xn-1Xn-2···X0与Yn-1Yn-2···Y0相加，和为Sn-1Sn-2···S0 。Xn-1与Yn-1为符号位，Cn为最</span><br><span class="line">高位进位，溢出检测信号overflow= CnꚚCn-1。</span><br><span class="line"></span><br><span class="line">由于补码运算的特殊性质，减法可以通过加法实现，只需将减数Y的补码进行适当变化后送入加法器中即可实</span><br><span class="line">现减法运算，具体公式如下：</span><br><span class="line">[X-Y]补 = [X]补 + [-Y]补 = [X]补 - [Y]补</span><br><span class="line">[-Y]补 = -[Y]补 ------- [-Y]补可以通过对[Y]补连同符号位一起逐位取反、末位加1来得到。</span><br><span class="line"></span><br><span class="line">在n位串行加法器的基础上，增加一个加减控制信号Sub。当Sub =0时，正常进行加法运算；当Sub=1时进行减</span><br><span class="line">法运算，实际就是利用Sub信号来实现减数的逐位取反、末位加1，然后进行加法运算。当进行有符号减法时，</span><br><span class="line">溢出判断与加法相同。</span><br></pre></td></tr></table></figure><br><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用logisim打开“实验05 8位串行可控加减法（教学版）.circ”文件。</span><br><span class="line"></span><br><span class="line">1. 添加电路“一位全加器FA封装”，实现一位全加器的子电路，其电路封装与引脚功能描述如表1。</span><br><span class="line">2. 在对应子电路中利用已封装好的全加器设计8位串行加法器电路，其电路封装与引脚功能描述如表2。</span><br><span class="line">3. 在对应子电路中利用已封装好的全加器设计8位串行可控加减法电路，其电路封装与引脚功能描述如表3。</span><br><span class="line">4. 保存电路文件为“学号姓名实验05.circ”并上传到ftp相关目录（实验05）。</span><br></pre></td></tr></table></figure><br><h2 id="一位全加器FA"><a href="#一位全加器FA" class="headerlink" title="一位全加器FA"></a>一位全加器FA</h2><mark class="hl-label green">连线图</mark> <p><img src="https://s2.loli.net/2023/04/19/nptCu1w4xVIgBNP.png" alt="一位全加器FA-0.png"></p><mark class="hl-label green">封装电路图</mark> <p><img src="https://s2.loli.net/2023/04/19/4jbEwc5vkCrO3NM.png" alt="一位全加器FA-1.png"></p><h2 id="八位可控加减法器"><a href="#八位可控加减法器" class="headerlink" title="八位可控加减法器"></a>八位可控加减法器</h2><p>采用了 ‘一位全加器FA’ 的封装电路</p><p><img src="https://s2.loli.net/2023/04/19/qxg64U8tHhIN3Y2.png" alt="8位可控加减法器.png"></p><h2 id="八位桶形移位器"><a href="#八位桶形移位器" class="headerlink" title="八位桶形移位器"></a>八位桶形移位器</h2><p>采用了八位二路选择器的封装电路</p><p><img src="https://s2.loli.net/2023/04/19/1OI3ncMiYdHsRGV.png" alt="八位桶形移位器.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理实验课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> Logisim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logisim实验 - 8位桶形移位器</title>
      <link href="/2023/05/14/0001-04/"/>
      <url>/2023/05/14/0001-04/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理实验4"><a href="#计算机组成原理实验4" class="headerlink" title="计算机组成原理实验4"></a>计算机组成原理实验4</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">•   了解桶形移位器的工作原理</span><br><span class="line">•   掌握多路选择器、移位器、分线器的使用方法</span><br></pre></td></tr></table></figure><br><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于固定位数的移位运算，逻辑实现不需要逻辑器件，只需要对原有数据位进行简单重组即可。</span><br><span class="line">对于可变参数的移位运算，可分解成若干个固定位数的移位运算的组合来实现。例如x&lt;&lt;y，假设x为32位变</span><br><span class="line">量，移位参数y为5位变量，则可以将可变移位运算按权值分解成5个固定位数的移位运算（1、2、4、8、16）</span><br><span class="line">的组合，其实现电路常称为桶形移位器。</span><br><span class="line">下图为桶形移位器的原理图，虚线所示路径为y=5的运算路径。</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/19/xFPwq3oQDdz6IkJ.png" alt="ppt.png"></p><br><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 设计一个桶形移位器电路，使得32位输入数据X能够进行可变位数的移位操作。</span><br><span class="line">2. 使用戳工具测试上述电路。</span><br></pre></td></tr></table></figure><br><h2 id="一位二路选择器"><a href="#一位二路选择器" class="headerlink" title="一位二路选择器"></a>一位二路选择器</h2><mark class="hl-label green">连线图</mark> <p><img src="https://s2.loli.net/2023/04/19/pWJiLsbkGoVmXvj.png" alt="一位二路选择器-0.png"></p><mark class="hl-label green">封装电路图</mark> <p><img src="https://s2.loli.net/2023/04/19/ZrQodUXkDSc1w2g.png" alt="一位二路选择器-1.png"></p><h2 id="八位二路选择器"><a href="#八位二路选择器" class="headerlink" title="八位二路选择器"></a>八位二路选择器</h2><p>采用了 ‘一位二路选择器’ 的封装电路</p><mark class="hl-label green">连线图</mark> <p><img src="https://s2.loli.net/2023/04/19/qkeXRJ6YcMa5mNf.png" alt="八位二路选择器-1.png"></p><mark class="hl-label green">封装电路图</mark> <p><img src="https://s2.loli.net/2023/04/19/16JvlnEpLmWOVuZ.png" alt="八位二路选择器-0.png"></p><h2 id="八位桶形移位器"><a href="#八位桶形移位器" class="headerlink" title="八位桶形移位器"></a>八位桶形移位器</h2><p>采用了 ‘八位二路选择器’ 的封装电路</p><p><img src="https://s2.loli.net/2023/04/19/1OI3ncMiYdHsRGV.png" alt="八位桶形移位器.png"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理实验课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> Logisim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组实验 - 移位运算器</title>
      <link href="/2023/05/14/0001-03/"/>
      <url>/2023/05/14/0001-03/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理实验3"><a href="#计算机组成原理实验3" class="headerlink" title="计算机组成原理实验3"></a>计算机组成原理实验3</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">•   了解移位寄存器芯片（74LS299）的逻辑功能</span><br><span class="line">•   了解移位控制实验中数据输入、左移、右移方法及在实际中的用处</span><br><span class="line">•   验证移位控制的组合功能</span><br></pre></td></tr></table></figure><br><h2 id="实验内容及原理"><a href="#实验内容及原理" class="headerlink" title="实验内容及原理"></a>实验内容及原理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;实验内容一：</span><br><span class="line"></span><br><span class="line">(1)将数据80H实现循环右移</span><br><span class="line">(2)将数据01H实现循环左移</span><br><span class="line">(3)验证带CY循环移位和不带CY循环移位的区别</span><br><span class="line">(4)不带CY循环右移操作流程</span><br><span class="line">(5)尝试把时钟单元的开关“STEP”切换为“RUN”来连续循环移位。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;实验内容二：</span><br><span class="line"></span><br><span class="line">(1)计算数据F0H*3/4，把结果输出到输出部件（OUT）。</span><br><span class="line">(2)F0H*3/4=F0H*(1/2+1/4)=F0H*(1-1/4)</span><br><span class="line">(3)乘以1/2相当于右移一位，乘以1/4相当于右移两位</span><br><span class="line">(4)移一位需要一个时钟脉冲（T4），移两位需要两个时钟脉冲</span><br><span class="line">(5)如果是乘以5/8，应该怎样做？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;实验原理：</span><br><span class="line"></span><br><span class="line">74LS299芯片主要引脚功能：</span><br><span class="line">•   IO7-IO0：8位数据输入输出，芯片的数据输入/输出共用一个引脚。</span><br><span class="line">•   S0、S1：功能控制端，控制数据输入、左移、右移等逻辑功能。</span><br><span class="line">•   OE1、OE2：使能端，低电平有效。</span><br><span class="line">•   CP：时钟输入端，数据的输入、移位需要在时钟脉冲的同步控制下执行。</span><br><span class="line">•   MR：清零端，低电平有效，清零移位寄存器。</span><br><span class="line">•   Q7：高位左移输出，左移时接受D7的信号。</span><br><span class="line">•   Q0：低位右移输出，右移时接受D0的信号。</span><br><span class="line">•   DS7：高位右移输入，右移时向D7输入信号。</span><br><span class="line">•   DS0：低位左移输入，左移时向D0输入信号。</span><br></pre></td></tr></table></figure><br><h2 id="实验主要仪器设备"><a href="#实验主要仪器设备" class="headerlink" title="实验主要仪器设备"></a>实验主要仪器设备</h2><blockquote><p><strong>略</strong></p></blockquote><br><h2 id="实验步骤、数据记录及总结分析"><a href="#实验步骤、数据记录及总结分析" class="headerlink" title="实验步骤、数据记录及总结分析"></a>实验步骤、数据记录及总结分析</h2><h3 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h3><blockquote><mark class="hl-label orange">&nbsp</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Input unit/#IO-R</td><td align="center">Manual unit/#IO-R</td></tr><tr><td align="center">2</td><td align="center">Output unit/#IO-W</td><td align="center">Manual unit/#IO-W</td></tr><tr><td align="center">3</td><td align="center">ALU unit/#/ALU-B</td><td align="center">Manual unit/#/ALU-B</td></tr><tr><td align="center">4</td><td align="center">ALU unit/#/299-B</td><td align="center">Manual unit/#/299-B</td></tr><tr><td align="center">5</td><td align="center">ALU unit/#S3~S0MCI</td><td align="center">Manual unit/#S3~S0MCI</td></tr><tr><td align="center">6</td><td align="center">ALU unit/#B-DA1</td><td align="center">Manual unit/#B-DA1</td></tr><tr><td align="center">7</td><td align="center">ALU unit/#B-DA2</td><td align="center">Manual unit/#B-DA2</td></tr><tr><td align="center">8</td><td align="center">ALU unit/#/CYCN</td><td align="center">Manual unit/#/CYCN</td></tr><tr><td align="center">9</td><td align="center">ALU unit/#/CYNCN</td><td align="center">Manual unit/#/CYNCN</td></tr><tr><td align="center">10</td><td align="center">Main Control unit/#T4</td><td align="center">Clock unit/#T4</td></tr></tbody></table></blockquote><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><blockquote><mark class="hl-label blue">不带CY循环右移</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">IN-&gt;299</td><td align="center">/IO-R, (S1S0)=11,T4</td></tr><tr><td align="center">2</td><td align="center">299不带CY循环右移-&gt;OUT</td><td align="center">/299-B,(S1S0,M)=100,T4,B-IO-W</td></tr></tbody></table></blockquote><blockquote><mark class="hl-label blue">FOH×3/4的减法实现</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">IN-&gt;DA1</td><td align="center">/IO-R,B-DA1</td></tr><tr><td align="center">2</td><td align="center">IN-&gt;299</td><td align="center">/IO-R,(S1S0)=11,T4</td></tr><tr><td align="center">3</td><td align="center">299右移2次-&gt;DA2</td><td align="center">/299-B,(S1S0)=10,T4,T4,B-DA2</td></tr><tr><td align="center">4</td><td align="center">ALU-&gt;OUT</td><td align="center">/ALU-B,(S3~S0,M,CI)=011000,IO-W</td></tr></tbody></table></blockquote><blockquote><mark class="hl-label blue">FOH×3/4的加法实现</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">IN-&gt;299</td><td align="center">/IO-R,(S1S0)=11,T4</td></tr><tr><td align="center">2</td><td align="center">299右移1次-&gt;DA1</td><td align="center">/299-B,(S1S0,M)=100,T4,B-DA1</td></tr><tr><td align="center">3</td><td align="center">IN-&gt;299</td><td align="center">/IO-R,(S1S0)=11,T4</td></tr><tr><td align="center">4</td><td align="center">299右移2次-&gt;DA2</td><td align="center">/299-B,(S1S0,M)=100,T4,T4,B-DA2</td></tr><tr><td align="center">5</td><td align="center">ALU-&gt;OUT</td><td align="center">/ALU-B,(S3~S0,M,CI)=100101,IO-W</td></tr></tbody></table></blockquote><h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><blockquote><ol><li>进行四种移位实验：不带CY循环右移、带CY循环右移、不带CY循环左移、带CY循环左移。<br>每移一位，观察总线上的数据显示，并记录到下表中：<table><thead><tr><th align="center">T4次数</th><th align="center">不带CY循环右移</th><th align="center">带CY循环右移</th><th align="center">不带CY循环左移</th><th align="center">带CY循环左移</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">10000000</td><td align="center">10110110</td><td align="center">10001000</td><td align="center">11011101</td></tr><tr><td align="center">1</td><td align="center">01000000</td><td align="center">01011011</td><td align="center">00010001</td><td align="center">10111010</td></tr><tr><td align="center">2</td><td align="center">00100000</td><td align="center">00101101</td><td align="center">00100010</td><td align="center">01110101</td></tr><tr><td align="center">3</td><td align="center">00010000</td><td align="center">10010110</td><td align="center">01000100</td><td align="center">11101011</td></tr><tr><td align="center">4</td><td align="center">00001000</td><td align="center">11001011</td><td align="center">10001000</td><td align="center">11010110</td></tr><tr><td align="center">5</td><td align="center">00000100</td><td align="center">01100101</td><td align="center">00010001</td><td align="center">10101101</td></tr><tr><td align="center">6</td><td align="center">00000010</td><td align="center">10110010</td><td align="center">00100010</td><td align="center">01011011</td></tr><tr><td align="center">7</td><td align="center">00000001</td><td align="center">11011001</td><td align="center">01000100</td><td align="center">10110111</td></tr><tr><td align="center">8</td><td align="center">10000000</td><td align="center">01101100</td><td align="center">10001000</td><td align="center">01101110</td></tr><tr><td align="center">9</td><td align="center">01000000</td><td align="center">10110110</td><td align="center">00010001</td><td align="center">11011101</td></tr></tbody></table></li></ol></blockquote><blockquote><ol start="2"><li>FOH × 3/4 = B4H</li></ol></blockquote><h3 id="实验结果与结论"><a href="#实验结果与结论" class="headerlink" title="实验结果与结论"></a>实验结果与结论</h3><blockquote><p><strong>略</strong></p></blockquote><h3 id="存在疑问"><a href="#存在疑问" class="headerlink" title="存在疑问"></a>存在疑问</h3><blockquote><p><strong>略</strong></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理实验课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> EDA实验箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组实验 - 算术运算</title>
      <link href="/2023/05/14/0001-02/"/>
      <url>/2023/05/14/0001-02/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理实验2"><a href="#计算机组成原理实验2" class="headerlink" title="计算机组成原理实验2"></a>计算机组成原理实验2</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">•   了解简单运算器的数据传输方式</span><br><span class="line">•   验证运算器芯片（74LS181）的算术运算功能</span><br><span class="line">•   了解运算标志位，掌握进位标志位、零标志位的判定方法以及它们在运算中的作用</span><br></pre></td></tr></table></figure><br><h2 id="实验内容及原理"><a href="#实验内容及原理" class="headerlink" title="实验内容及原理"></a>实验内容及原理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;实验内容一：</span><br><span class="line"></span><br><span class="line">根据P68表11-4，验证“操作”列各项操作理论运算结果与实验结果是否一致，并完成表格。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;实验内容二：</span><br><span class="line"></span><br><span class="line">(1)从输入部件（INPUT）自行输入两个数送入ALU部件进行减法运算，</span><br><span class="line">   判断借位标志CY和零标志ZI，以比较两个数的大小。</span><br><span class="line">(2)实现3465H和12A7H相加和相减结果保存到两个通用寄存器中并读出。</span><br><span class="line">(3)加法操作流程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;实验原理：</span><br><span class="line"></span><br><span class="line">74LS181芯片主要引脚功能：</span><br><span class="line">•   A[3..0]：第一组操作数据输入端。</span><br><span class="line">•   B[3..0]：第二组操作数据输人端。</span><br><span class="line">•   F[3..0]：操作结果数据输出端。</span><br><span class="line">•   S[3..0]：操作功能控制端。</span><br><span class="line">•   CN：低端进位接收端。</span><br><span class="line">•   CN4:高端进位输出端。</span><br><span class="line">•   M：算术/逻辑功能控制端。</span><br><span class="line"></span><br><span class="line">算术运算标志位：</span><br><span class="line">•   进位标志CF</span><br><span class="line">        运算结果最高位产生进位或借位，其值为1；否则为0。</span><br><span class="line">        常用于加减运算、无符号数比较大小等。</span><br><span class="line">•   零标志ZF</span><br><span class="line">        如果运算结果为0，则其值为1；否则为0。</span><br><span class="line">        可用于判断两数是否相等。</span><br><span class="line">•   奇偶标志PF</span><br><span class="line">        运算结果中“1”的个数为偶数，则其值为1；否则为0。</span><br><span class="line">        可用于数据校验。</span><br><span class="line">•   溢出标志OF</span><br><span class="line">        运算结果溢出，则其值为1；否则为0。</span><br><span class="line">        注意“溢出”和“进位”的区别。</span><br><span class="line"></span><br><span class="line">相关控制信号：</span><br><span class="line">•   T4：外部脉冲信号，判断CY、ZI标志的时钟脉冲。</span><br><span class="line">•   /CLR：清零信号，清除CY、ZI标志的控制信号。</span><br><span class="line">•   /CYCN：带低端进位输入的进位标志CY产生控制端。</span><br><span class="line">•   /CYNCN：不带低端进位输入的进位标志CY产生控制端。</span><br></pre></td></tr></table></figure><br><h2 id="实验主要仪器设备"><a href="#实验主要仪器设备" class="headerlink" title="实验主要仪器设备"></a>实验主要仪器设备</h2><blockquote><p><strong>略</strong></p></blockquote><br><h2 id="实验步骤、数据记录及总结分析"><a href="#实验步骤、数据记录及总结分析" class="headerlink" title="实验步骤、数据记录及总结分析"></a>实验步骤、数据记录及总结分析</h2><h3 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h3><blockquote><mark class="hl-label orange">实验内容一：算术运算</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Input unit/#IO-R</td><td align="center">Manual unit/#IO-R</td></tr><tr><td align="center">2</td><td align="center">Output unit/#IO-W</td><td align="center">Manual unit/#IO-W</td></tr><tr><td align="center">3</td><td align="center">ALU unit/#/ALU-B</td><td align="center">Manual unit/#/ALU-B</td></tr><tr><td align="center">4</td><td align="center">ALU unit/#S3~S0MCI</td><td align="center">Manual unit/#S3~S0MCI</td></tr><tr><td align="center">5</td><td align="center">ALU unit/#B-DA1</td><td align="center">Manual unit/#B-DA1</td></tr><tr><td align="center">6</td><td align="center">ALU unit/#B-DA2</td><td align="center">Manual unit/#B-DA2</td></tr><tr><td align="center">7</td><td align="center">ALU unit/#/CYCN</td><td align="center">Manual unit/#/CYCN</td></tr><tr><td align="center">8</td><td align="center">ALU unit/#/CYNCN</td><td align="center">Manual unit/#/CYNCN</td></tr><tr><td align="center">9</td><td align="center">Main Control unit/#T4</td><td align="center">Clock unit/#T4</td></tr></tbody></table></blockquote><blockquote><mark class="hl-label orange">实验内容二：16位数进（借）位加减法</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Input unit/#IO-R</td><td align="center">Manual unit/#IO-R</td></tr><tr><td align="center">2</td><td align="center">Output unit/#IO-W</td><td align="center">Manual unit/#IO-W</td></tr><tr><td align="center">3</td><td align="center">ALU unit/#/ALU-B</td><td align="center">Manual unit/#B-AR</td></tr><tr><td align="center">4</td><td align="center">ALU unit/#S3~S0MCI</td><td align="center">Manual unit/#S3~S0MCI</td></tr><tr><td align="center">5</td><td align="center">ALU unit/#B-DA1</td><td align="center">Manual unit/#B-DA1</td></tr><tr><td align="center">6</td><td align="center">ALU unit/#B-DA2</td><td align="center">Manual unit/#B-DA2</td></tr><tr><td align="center">7</td><td align="center">ALU unit/#/CYCN</td><td align="center">Manual unit/#/CYCN</td></tr><tr><td align="center">8</td><td align="center">ALU unit/#/CYNCN</td><td align="center">Manual unit/#/CYNCN</td></tr><tr><td align="center">9</td><td align="center">Main Control unit/#T4</td><td align="center">Clock unit/#T4</td></tr><tr><td align="center">10</td><td align="center">REG unit/#B-R1</td><td align="center">Manual unit/#KA</td></tr><tr><td align="center">11</td><td align="center">REG unit/#B-R0</td><td align="center">Manual unit/#KB</td></tr><tr><td align="center">12</td><td align="center">REG unit/#/R1-B</td><td align="center">Manual unit/#/R1-B</td></tr><tr><td align="center">13</td><td align="center">REG unit/#/R0-B</td><td align="center">Manual unit/#/R0-B</td></tr></tbody></table></blockquote><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><blockquote><mark class="hl-label blue">实验内容一：算术运算</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">IN-&gt;DA1</td><td align="center">/IO-R, B-DA1</td></tr><tr><td align="center">2</td><td align="center">IN-&gt;DA2</td><td align="center">/IO-R, B-DA2</td></tr><tr><td align="center">3</td><td align="center">ALU-&gt;OUT</td><td align="center">/ALU-B, S3~S0MCI=100101, IO-W</td></tr></tbody></table></blockquote><blockquote><mark class="hl-label blue">实验内容二：16位数进（借）位加减法</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">IN-&gt;DA1</td><td align="center">/IO-R, B-DA1</td></tr><tr><td align="center">2</td><td align="center">IN-&gt;DA2</td><td align="center">/IO-R, B-DA2</td></tr><tr><td align="center">3</td><td align="center">ALU-&gt;R0</td><td align="center">B-AR，S3~S0MCI=100101, KA</td></tr><tr><td align="center">4</td><td align="center">判断CY</td><td align="center">/CYCN或/CYNCN, T4</td></tr><tr><td align="center">5</td><td align="center">IN-&gt;DA1</td><td align="center">/IO-R, B-DA1</td></tr><tr><td align="center">6</td><td align="center">IN-&gt;DA2</td><td align="center">/IO-R, B-DA2</td></tr><tr><td align="center">7</td><td align="center">ALU-&gt;R1</td><td align="center">/CYCN, B-AR, S3~S0MCI=100101, KB</td></tr><tr><td align="center">8</td><td align="center">R1-&gt;OUT</td><td align="center">/R1-B, IO-W</td></tr><tr><td align="center">9</td><td align="center">R0-&gt;OUT</td><td align="center">/R0-B, IO-W</td></tr></tbody></table></blockquote><h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><blockquote><ol><li>验证F=A，F=B，F=A加B，F=A减B， F=(A+/B)加(A*B)，F=/(A⊕B)运算结果，<br> 验证理论运算结果与实验结果是否一致。（F[7..0]列填16进制数）<table><thead><tr><th align="center">操作</th><th align="center">S[3..0]</th><th align="center">M</th><th align="center">CN</th><th align="center">A[7..0]</th><th align="center">B[7..0]</th><th align="center">F[7..0]</th></tr></thead><tbody><tr><td align="center">F=A</td><td align="center">1111</td><td align="center">1</td><td align="center">x</td><td align="center">65H</td><td align="center">A7H</td><td align="center">65H</td></tr><tr><td align="center">F=B</td><td align="center">1010</td><td align="center">1</td><td align="center">x</td><td align="center">65H</td><td align="center">A7H</td><td align="center">A7H</td></tr><tr><td align="center">F=A加B</td><td align="center">1001</td><td align="center">0</td><td align="center">1</td><td align="center">65H</td><td align="center">A7H</td><td align="center">0CH</td></tr><tr><td align="center">F=A减B</td><td align="center">0110</td><td align="center">0</td><td align="center">0</td><td align="center">65H</td><td align="center">A7H</td><td align="center">BEH</td></tr><tr><td align="center">F=(A+/B)加(A*B)</td><td align="center">1010</td><td align="center">0</td><td align="center">1</td><td align="center">65H</td><td align="center">A7H</td><td align="center">A2H</td></tr><tr><td align="center">F=/(A⊕B)</td><td align="center">1001</td><td align="center">1</td><td align="center">x</td><td align="center">65H</td><td align="center">A7H</td><td align="center">3DH</td></tr></tbody></table></li></ol></blockquote><blockquote><ol start="2"><li>3465H + 12A7H = 470CH<br> 3465H - 12A7H = 21BEH</li></ol></blockquote><h3 id="实验结果与结论"><a href="#实验结果与结论" class="headerlink" title="实验结果与结论"></a>实验结果与结论</h3><blockquote><p><strong>略</strong></p></blockquote><h3 id="存在疑问"><a href="#存在疑问" class="headerlink" title="存在疑问"></a>存在疑问</h3><blockquote><p><strong>略</strong></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理实验课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> EDA实验箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组实验 - 输入输出控制</title>
      <link href="/2023/05/14/0001-01/"/>
      <url>/2023/05/14/0001-01/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组成原理实验1"><a href="#计算机组成原理实验1" class="headerlink" title="计算机组成原理实验1"></a>计算机组成原理实验1</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">•   熟悉实验台基本结构，了解各模块功能；</span><br><span class="line">•   理解控制信号的基本概念和作用；</span><br><span class="line">•   掌握输入模块与输出模块的功能、原理和操作方法。</span><br></pre></td></tr></table></figure><br><h2 id="实验内容及原理"><a href="#实验内容及原理" class="headerlink" title="实验内容及原理"></a>实验内容及原理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;实验内容：</span><br><span class="line">(1)实现从输入部件输入一个数据65H，并将之通过总线BUS从输出部件输出</span><br><span class="line">(2)把输入部件（INPUT）上的数据65H送到总线(BUS)：IN  BUS，涉及控制信号/IO-R。</span><br><span class="line">(3)把总线(BUS)上的数据送到输出部件(OUT)：BUS OUT，涉及控制信号/IO-W。</span><br><span class="line">(4)数据变换操作（clock单元代替开关）,OUT单元的数据随着INPUT单元的数据变化而变化（连续脉冲）。</span><br></pre></td></tr></table></figure><br><h2 id="实验主要仪器设备"><a href="#实验主要仪器设备" class="headerlink" title="实验主要仪器设备"></a>实验主要仪器设备</h2><blockquote><p><strong>略</strong></p></blockquote><br><h2 id="实验步骤、数据记录及总结分析"><a href="#实验步骤、数据记录及总结分析" class="headerlink" title="实验步骤、数据记录及总结分析"></a>实验步骤、数据记录及总结分析</h2><h3 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h3><blockquote><mark class="hl-label orange">实验内容：简单的输入输出</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">Input unit/#IO-R</td><td align="center">Manual unit/#IO-R</td></tr><tr><td align="center">2</td><td align="center">Output unit/#IO-W</td><td align="center">Manual unit/#IO-W</td></tr></tbody></table></blockquote><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><blockquote><mark class="hl-label blue">实验内容：简单的输入输出</mark> <table><thead><tr><th align="center">序号</th><th align="center">源单元/源控制信号</th><th align="center">目的单元/目的控制信号</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">IN-&gt;OUT</td><td align="center">/IO-R, IO-W</td></tr></tbody></table></blockquote><h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><blockquote><p><strong>略</strong></p></blockquote><h3 id="实验结果与结论"><a href="#实验结果与结论" class="headerlink" title="实验结果与结论"></a>实验结果与结论</h3><blockquote><p><strong>略</strong></p></blockquote><h3 id="存在疑问"><a href="#存在疑问" class="headerlink" title="存在疑问"></a>存在疑问</h3><blockquote><p><strong>略</strong></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理实验课 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 计算机组成原理 </tag>
            
            <tag> EDA实验箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt实验 - 事件，随机数和计时器练习</title>
      <link href="/2023/05/14/0002-08/"/>
      <url>/2023/05/14/0002-08/</url>
      
        <content type="html"><![CDATA[<h1 id="C-桌面应用程序实验8"><a href="#C-桌面应用程序实验8" class="headerlink" title="C++桌面应用程序实验8"></a>C++桌面应用程序实验8</h1><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">做一窗口，上面有一按钮</span><br><span class="line">（1）按下鼠标左键并拖动鼠标，按钮随着鼠标的光标移动，同时在状态栏显示鼠标以用户区坐标系表示的位置坐标；</span><br><span class="line">（2）当输入焦点在窗口上时，按下键盘上的Ctrl同时按下M的时候，窗口最大化显示；</span><br><span class="line">（3）做弹出式菜单“窗口”，下面三个菜单项“最大”“最小”“普通”，要求菜单项需要有图标，图标自定，要求使用qt的资</span><br><span class="line">     源；实现三个菜单项对应的功能；</span><br><span class="line">（4）在工具栏上添加上述三个菜单项所对应的Action。</span><br><span class="line">（5）在窗口上双击鼠标左键，窗口最大化，双击右键，由最大化恢复。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">dragpushbutton.h</button></li><li class="tab"><button type="button" data-href="#-2">dragpushbutton.cpp</button></li><li class="tab"><button type="button" data-href="#-3">mainwindow.h</button></li><li class="tab"><button type="button" data-href="#-4">mainwindow.cpp</button></li><li class="tab"><button type="button" data-href="#-5">注意事项！</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DRAGPUSHBUTTON_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DRAGPUSHBUTTON_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DragPushButton</span> : <span class="keyword">public</span> QPushButton</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">DragPushButton</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QPoint pressPoint;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// DRAGPUSHBUTTON_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dragpushbutton.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QString&gt;</span></span></span><br><span class="line"></span><br><span class="line">DragPushButton::<span class="built_in">DragPushButton</span>(QWidget *parent) : <span class="built_in">QPushButton</span>(parent)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DragPushButton::mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event-&gt;<span class="built_in">button</span>() == Qt::LeftButton)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">raise</span>(); <span class="comment">//将此按钮移动到顶层显示</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;pressPoint = event-&gt;<span class="built_in">pos</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DragPushButton::mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(event-&gt;<span class="built_in">buttons</span>() == Qt::LeftButton)&#123;</span><br><span class="line">        QPoint curPos = <span class="keyword">this</span>-&gt;<span class="built_in">mapToParent</span>(event-&gt;<span class="built_in">pos</span>() - <span class="keyword">this</span>-&gt;pressPoint);</span><br><span class="line"><span class="comment">//        QString str = QString(&quot;按钮当前位置: (%1 , %2)&quot;).arg(event-&gt;pos().x()).arg(event-&gt;pos().y());</span></span><br><span class="line">        QString str = <span class="built_in">QString</span>(<span class="string">&quot;按钮相对全屏所在位置: (%1 , %2)&quot;</span>).<span class="built_in">arg</span>(curPos.<span class="built_in">x</span>()).<span class="built_in">arg</span>(curPos.<span class="built_in">y</span>());</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">move</span>(curPos);</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">        <span class="comment">//防止按钮移出父窗口</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;<span class="built_in">mapToParent</span>(<span class="keyword">this</span>-&gt;<span class="built_in">rect</span>().<span class="built_in">topLeft</span>()).<span class="built_in">x</span>() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">move</span>(<span class="number">0</span>, <span class="keyword">this</span>-&gt;<span class="built_in">pos</span>().<span class="built_in">y</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;<span class="built_in">mapToParent</span>(<span class="keyword">this</span>-&gt;<span class="built_in">rect</span>().<span class="built_in">bottomRight</span>()).<span class="built_in">x</span>() &gt;= <span class="keyword">this</span>-&gt;<span class="built_in">parentWidget</span>()-&gt;<span class="built_in">rect</span>().<span class="built_in">width</span>())&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">move</span>(<span class="keyword">this</span>-&gt;<span class="built_in">parentWidget</span>()-&gt;<span class="built_in">rect</span>().<span class="built_in">width</span>() - <span class="keyword">this</span>-&gt;<span class="built_in">width</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">pos</span>().<span class="built_in">y</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;<span class="built_in">mapToParent</span>(<span class="keyword">this</span>-&gt;<span class="built_in">rect</span>().<span class="built_in">topLeft</span>()).<span class="built_in">y</span>() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">move</span>(<span class="keyword">this</span>-&gt;<span class="built_in">pos</span>().<span class="built_in">x</span>(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;<span class="built_in">mapToParent</span>(<span class="keyword">this</span>-&gt;<span class="built_in">rect</span>().<span class="built_in">bottomRight</span>()).<span class="built_in">y</span>() &gt;= <span class="keyword">this</span>-&gt;<span class="built_in">parentWidget</span>()-&gt;<span class="built_in">rect</span>().<span class="built_in">height</span>())&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">move</span>(<span class="keyword">this</span>-&gt;<span class="built_in">pos</span>().<span class="built_in">x</span>(), <span class="keyword">this</span>-&gt;<span class="built_in">parentWidget</span>()-&gt;<span class="built_in">rect</span>().<span class="built_in">height</span>() - <span class="keyword">this</span>-&gt;<span class="built_in">height</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dragpushbutton.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenu&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenuBar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QAction&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MainWindow</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mouseDoubleClickEvent</span><span class="params">(QMouseEvent *event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">keyPressEvent</span><span class="params">(QKeyEvent *event)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QPoint offset;</span><br><span class="line"></span><br><span class="line">    QMenu pMenu;</span><br><span class="line"></span><br><span class="line">    DragPushButton *pbDrag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onTaskBoxContextMenuEvent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_MainWindow_customContextMenuRequested</span><span class="params">(<span class="type">const</span> QPoint &amp;pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MainWindow</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MainWindow</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMouseEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QKeyEvent&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可拖动的按钮</span></span><br><span class="line">    pbDrag = <span class="keyword">new</span> <span class="built_in">DragPushButton</span>(<span class="keyword">this</span>);</span><br><span class="line">    pbDrag-&gt;<span class="built_in">resize</span>(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">    pbDrag-&gt;<span class="built_in">move</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">statusBar</span>()-&gt;<span class="built_in">showMessage</span>(<span class="string">&quot;Status is here...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mousePressEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        QCursor cursor;</span><br><span class="line">        cursor.<span class="built_in">setShape</span>(Qt::CrossCursor);</span><br><span class="line">        QApplication::<span class="built_in">setOverrideCursor</span>(cursor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Q_UNUSED</span>(event);</span><br><span class="line">    QApplication::<span class="built_in">restoreOverrideCursor</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString str = <span class="built_in">QString</span>(<span class="string">&quot;鼠标在用户区的坐标: (%1 , %2)&quot;</span>).<span class="built_in">arg</span>(event-&gt;<span class="built_in">pos</span>().<span class="built_in">x</span>()).<span class="built_in">arg</span>(event-&gt;<span class="built_in">pos</span>().<span class="built_in">y</span>());</span><br><span class="line">    <span class="built_in">statusBar</span>()-&gt;<span class="built_in">showMessage</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::mouseDoubleClickEvent</span><span class="params">(QMouseEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event-&gt;<span class="built_in">button</span>() == Qt::LeftButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">setWindowState</span>(Qt::WindowFullScreen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (event-&gt;<span class="built_in">button</span>() == Qt::RightButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">setWindowState</span>(Qt::WindowNoState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::keyPressEvent</span><span class="params">(QKeyEvent *event)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event-&gt;<span class="built_in">modifiers</span>() == Qt::ControlModifier)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (event-&gt;<span class="built_in">key</span>() == Qt::Key_M)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">setWindowState</span>(Qt::WindowMaximized);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::on_MainWindow_customContextMenuRequested</span><span class="params">(<span class="type">const</span> QPoint &amp;<span class="comment">/*pos*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建菜单对象</span></span><br><span class="line">    QMenu *pMenu = <span class="keyword">new</span> <span class="built_in">QMenu</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    QAction *pChange1 = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="built_in">tr</span>(<span class="string">&quot;最大&quot;</span>), <span class="keyword">this</span>);</span><br><span class="line">    QAction *pChange2 = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="built_in">tr</span>(<span class="string">&quot;普通&quot;</span>), <span class="keyword">this</span>);</span><br><span class="line">    QAction *pChange3 = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="built_in">tr</span>(<span class="string">&quot;最小&quot;</span>), <span class="keyword">this</span>);</span><br><span class="line">    pChange1-&gt;<span class="built_in">setData</span>(<span class="number">1</span>);</span><br><span class="line">    pChange2-&gt;<span class="built_in">setData</span>(<span class="number">2</span>);</span><br><span class="line">    pChange3-&gt;<span class="built_in">setData</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加图标</span></span><br><span class="line">    <span class="function">QIcon <span class="title">icon</span><span class="params">(<span class="string">&quot;:/image/coleduck.jpg&quot;</span>)</span></span>;</span><br><span class="line">    pChange1-&gt;<span class="built_in">setIcon</span>(icon);</span><br><span class="line">    pChange2-&gt;<span class="built_in">setIcon</span>(icon);</span><br><span class="line">    pChange3-&gt;<span class="built_in">setIcon</span>(icon);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把QAction对象添加到菜单上</span></span><br><span class="line">    pMenu-&gt;<span class="built_in">addAction</span>(pChange1);</span><br><span class="line">    pMenu-&gt;<span class="built_in">addAction</span>(pChange2);</span><br><span class="line">    pMenu-&gt;<span class="built_in">addAction</span>(pChange3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接鼠标右键点击信号</span></span><br><span class="line">    <span class="built_in">connect</span>(pChange1, <span class="built_in">SIGNAL</span>(<span class="built_in">triggered</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">onTaskBoxContextMenuEvent</span>()));</span><br><span class="line">    <span class="built_in">connect</span>(pChange2, <span class="built_in">SIGNAL</span>(<span class="built_in">triggered</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">onTaskBoxContextMenuEvent</span>()));</span><br><span class="line">    <span class="built_in">connect</span>(pChange3, <span class="built_in">SIGNAL</span>(<span class="built_in">triggered</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">onTaskBoxContextMenuEvent</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在鼠标右键点击的地方显示菜单</span></span><br><span class="line">    pMenu-&gt;<span class="built_in">exec</span>(<span class="built_in">cursor</span>().<span class="built_in">pos</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放内存</span></span><br><span class="line">    QList&lt;QAction*&gt; list = pMenu-&gt;<span class="built_in">actions</span>();</span><br><span class="line">    foreach (QAction* pAction, list) <span class="keyword">delete</span> pAction;</span><br><span class="line">    <span class="keyword">delete</span> pMenu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MainWindow::onTaskBoxContextMenuEvent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QAction *pEven = <span class="built_in">qobject_cast</span>&lt;QAction *&gt;(<span class="keyword">this</span>-&gt;<span class="built_in">sender</span>()); <span class="comment">//this-&gt;sender()就是发信号者 QAction</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> iType = pEven-&gt;<span class="built_in">data</span>().<span class="built_in">toInt</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (iType)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">setWindowState</span>(Qt::WindowMaximized);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">setWindowState</span>(Qt::WindowNoState);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">setWindowState</span>(Qt::WindowMinimized);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MainWindow::~<span class="built_in">MainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一定要把 contextMenuPolicy 设置成 CustomContextMenu</span><br><span class="line">这样才可以使用自定义的弹出式菜单栏</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/12/ti2z7NFbxyjLSPo.png" alt="7960d707e41e2e3f2059692d93e5cbd.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">目的与要求</button></li><li class="tab"><button type="button" data-href="#-2">实验准备</button></li><li class="tab"><button type="button" data-href="#-3">实验内容</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）掌握使用定时器的方法</span><br><span class="line">（2）掌握随机数的设置方法</span><br><span class="line">（3）会使用定时器实现时钟</span><br><span class="line">（4）了解图片显示的方法</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">做一窗口，上面有一按钮</span><br><span class="line">（1）了解信号和槽的基本使用方法</span><br><span class="line">（2）了解定时器和随机数的基本概念</span><br><span class="line">（3）准备好需要使用的图片文件</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用定时器可以在指定时间执行一些功能，而要实现随机效果就要使用随机数来实现。实验目标为新建程序实现电子时钟效</span><br><span class="line">果，并每隔一秒随机显示一张图片。</span><br><span class="line"></span><br><span class="line">（1）新建Qt Widgets应用，项目名称为mytimer，基类选择QWidget，类名为Widget。</span><br><span class="line">（2）完成项目创建后，双击widget.ui进入设计模式，然后向界面上拖入两个Push Button、一个Line Edit和一个Label部件，修改其显示文本，效果如下图所示。</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/12/GT8W7U9LDC4FlcE.jpg" alt="1.jpg"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（3）然后到widget.h文件中添加类的前置声明：</span><br><span class="line">        class QTimer;</span><br><span class="line"></span><br><span class="line">   再添加一个私有槽声明：</span><br><span class="line">        private slots:</span><br><span class="line">          void timerUpdate();</span><br><span class="line"></span><br><span class="line">   和一个私有对象指针：</span><br><span class="line">        private:</span><br><span class="line">          QTimer *timer;</span><br><span class="line"></span><br><span class="line">（4）到widget.cpp中，先添加头文件包含：</span><br><span class="line">        #include &lt;QTimer&gt;</span><br><span class="line">        #include &lt;QDateTime&gt;</span><br><span class="line">        #include &lt;QRandomGenerator&gt;</span><br><span class="line">   然后在构造函数中添加如下代码：</span><br><span class="line">        timer = new QTimer(this);</span><br><span class="line">        //关联定时器溢出信号和相应的槽函数</span><br><span class="line">        connect(timer, &amp;QTimer::timeout, this, &amp;Widget::timerUpdate);</span><br><span class="line">   这里创建了一个定时器，并将其溢出信号和更新槽关联起来。</span><br><span class="line"></span><br><span class="line">（5）下面在widget.cpp文件中添加timerUpdate()函数的定义：</span><br><span class="line">        void Widget::timerUpdate()</span><br><span class="line">        &#123;</span><br><span class="line">            //获取系统现在的时间</span><br><span class="line">            QDateTime time = QDateTime::currentDateTime();</span><br><span class="line">            //设置系统时间显示格式</span><br><span class="line">            QString str = time.toString(&quot;yyyy-MM-dd hh:mm:ss dddd&quot;);</span><br><span class="line">            //在标签上显示时间</span><br><span class="line">            ui-&gt;lineEdit-&gt;setText(str);</span><br><span class="line"></span><br><span class="line">            int rand = QRandomGenerator::global()-&gt;bounded(5);  // 产生5以内随机整数即0-4</span><br><span class="line"></span><br><span class="line">            QPixmap pix = QPixmap(QString(&quot;../mytimer/images/%1.png&quot;).arg(rand));</span><br><span class="line">            ui-&gt;label-&gt;setPixmap(pix.scaled(ui-&gt;label-&gt;size(), Qt::IgnoreAspectRatio));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     这里在行编辑器中显示了当前的时间。然后使用global()-&gt;bounded(5)产生5以内的随机数，并使用这个随机数来获取图片，并在标签中进行显示。</span><br><span class="line">     </span><br><span class="line">     关于随机数，Qt中是使用QRandomGenerator类实现的，它可以从一个高质量的随机数生成器来生成随机的数值。使用</span><br><span class="line">     时，可以在创建QRandomGenerator对象时直接给定一个数值作为种子来生成一组相同的随机数，给定不同的种子，那</span><br><span class="line">     么生成的随机数序列也是不同的，也可以使用seed()来设置种子。另外，可以使用bounded()函数来设置生成随机数</span><br><span class="line">     的范围，它有多种重载形式，例如bounded(256)可以生成 [0, 256)（包含0但不包含256）之间的一个随机整数；</span><br><span class="line">     bounded(5.0)可以生成[0,5)之间的双精度浮点数；bounded(-10, 10)生成随机数的范围是[-10, 10)。在实际编程</span><br><span class="line">     中，我们经常使用QRandomGenerator::global()来获取一个QRandomGenerator的全局实例。</span><br><span class="line"></span><br><span class="line">（6）前面代码中使用了0.png、1.png、2.png、3.png、4.png这样5张图片，需要复制5张图片到项目目录下面新建的</span><br><span class="line">     images目录中。当然，也可以将图片放到资源文件中。</span><br><span class="line"></span><br><span class="line">（7）在设计模式，分别右击“开始”按钮和“停止”按钮，选择转到槽，然后选择clicked()信号。将对应的槽函数修改如下：</span><br><span class="line">        // 开始按钮</span><br><span class="line">        void Widget::on_pushButton_clicked()</span><br><span class="line">        &#123;</span><br><span class="line">            timer-&gt;start(1000);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 停止按钮</span><br><span class="line">        void Widget::on_pushButton_2_clicked()</span><br><span class="line">        &#123;</span><br><span class="line">            timer-&gt;stop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     使用start()来启动定时器，其中参数用来指定溢出时间间隔，单位为毫秒。这里设置为1000，表明每隔1秒发射一次</span><br><span class="line">     timeout()信号。如果要停止定时器，可以调用stop()函数。</span><br><span class="line"></span><br><span class="line">（8）运行程序，点击“开始”按钮，会显示当前系统时间，并每隔一秒随机显示一张图片。效果如图5-2所示。</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/12/GXgHo6Ri7VtnP5h.jpg" alt="2.jpg"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">widget.h</button></li><li class="tab"><button type="button" data-href="#-2">widget.cpp</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">Widget</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QTimer</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">timerUpdate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pb_run_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_pb_stop_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QTimer *timer;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pre = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTimer&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDateTime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QRandomGenerator&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    timer = <span class="keyword">new</span> <span class="built_in">QTimer</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">connect</span>(timer, &amp;QTimer::timeout, <span class="keyword">this</span>, &amp;Widget::timerUpdate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::timerUpdate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取系统现在的时间</span></span><br><span class="line">    QDateTime time = QDateTime::<span class="built_in">currentDateTime</span>();</span><br><span class="line">    <span class="comment">//设置系统时间显示格式</span></span><br><span class="line">    QString str = time.<span class="built_in">toString</span>(<span class="string">&quot;yyyy-MM-dd hh:mm:ss dddd&quot;</span>);</span><br><span class="line">    <span class="comment">//在标签上显示时间</span></span><br><span class="line">    ui-&gt;lineEdit-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rand = QRandomGenerator::<span class="built_in">global</span>()-&gt;<span class="built_in">bounded</span>(<span class="number">5</span>);  <span class="comment">// 产生5以内随机整数即0-4</span></span><br><span class="line">    <span class="keyword">while</span> (rand == pre)</span><br><span class="line">    &#123;</span><br><span class="line">        rand = QRandomGenerator::<span class="built_in">global</span>()-&gt;<span class="built_in">bounded</span>(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pre = rand;</span><br><span class="line"></span><br><span class="line">    QPixmap pix = <span class="built_in">QPixmap</span>(<span class="built_in">QString</span>(<span class="string">&quot;../pro2/%1.jpg&quot;</span>).<span class="built_in">arg</span>(rand));</span><br><span class="line">    ui-&gt;label-&gt;<span class="built_in">setPixmap</span>(pix.<span class="built_in">scaled</span>(ui-&gt;label-&gt;<span class="built_in">size</span>(), Qt::IgnoreAspectRatio));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pb_run_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    timer-&gt;<span class="built_in">start</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::on_pb_stop_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    timer-&gt;<span class="built_in">stop</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> C++桌面应用程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 桌面应用程序 </tag>
            
            <tag> QT creator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt实验 - 主窗口、资源的使用</title>
      <link href="/2023/05/14/0002-07/"/>
      <url>/2023/05/14/0002-07/</url>
      
        <content type="html"><![CDATA[<h1 id="C-桌面应用程序实验7"><a href="#C-桌面应用程序实验7" class="headerlink" title="C++桌面应用程序实验7"></a>C++桌面应用程序实验7</h1><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用Qt做一个基于主窗口的程序，用于处理文档，要求如下：</span><br><span class="line">1.要有菜单，其中至少有3个常用菜单项具有图标，快捷键，图标是基于qt资源的；</span><br><span class="line">2.要有工具栏，工具栏中有主要菜单项的按钮；</span><br><span class="line">3.状态栏，用于显示软件名称、作者，文档信息（字数或当前行列数，自定）</span><br><span class="line">4.有“关于”菜单项，弹出关于对话框，显示软件作者姓名、软件名称、开发日期</span><br><span class="line">5.软件“登录”菜单项，用于验证用户名、密码，点击登录菜单项后，弹出登录对话框，当用户输入用户名、密码点击确</span><br><span class="line">    定，核对已有用户名和密码，核对通过则进入，否则提示错误，并且重试；当登陆成功后，登陆菜单项变为灰色；“退</span><br><span class="line">    出当前用户”变为可用</span><br><span class="line">6.当登陆成功后，状态栏显示临时信息“当前用户为***（你登陆的用户名）”</span><br><span class="line">7.能够打开硬盘上已有记事本文档（使用标准对话框中的文件打开对话框）</span><br><span class="line">8.能够保存窗口显示文字为txt文件</span><br><span class="line">9.能够使用字体选择组合框更改显示字体</span><br><span class="line">10.右键弹出式菜单，能够关闭程序和选择字体。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Logindialog.h</button></li><li class="tab"><button type="button" data-href="#-2">Mymainwindow.h</button></li><li class="tab"><button type="button" data-href="#-3">Mymainwindow.cpp</button></li><li class="tab"><button type="button" data-href="#-4">Logindialog.ui</button></li><li class="tab"><button type="button" data-href="#-5">Mymainwindow.ui</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LOGINDIALOG_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGINDIALOG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginDialog</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginDialog</span> : <span class="keyword">public</span> QDialog</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">emit_login_log</span><span class="params">(QString &amp;str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">LoginDialog</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~<span class="built_in">LoginDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_LoginBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::LoginDialog *ui;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// LOGINDIALOG_H</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Logindialog.cpp:</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;logindialog.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_logindialog.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QString&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">LoginDialog::<span class="built_in">LoginDialog</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QDialog</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::LoginDialog)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginDialog::~<span class="built_in">LoginDialog</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LoginDialog::on_LoginBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString Username = ui-&gt;Username-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QString Password = ui-&gt;Password-&gt;<span class="built_in">text</span>();</span><br><span class="line">    <span class="keyword">if</span> (Username == <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Warnning&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;用户名不能为空&quot;</span>), QMessageBox::Ok);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Password == <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Warnning&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;密码不能为空&quot;</span>), QMessageBox::Ok);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (Username != Password)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Warnning&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;用户名或密码错误，请重新输入&quot;</span>), QMessageBox::Ok);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        emit <span class="built_in">emit_login_log</span>(Username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYMAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYMAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;logindialog.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MyMainWindow</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMainWindow</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyMainWindow</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MyMainWindow</span>();</span><br><span class="line"></span><br><span class="line">    LoginDialog *login = <span class="keyword">new</span> <span class="built_in">LoginDialog</span>(<span class="keyword">this</span>);</span><br><span class="line">    QString User = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_action_O_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_action_A_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_action_L_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login_log</span><span class="params">(QString &amp;str)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_textEdit_cursorPositionChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_action_Q_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_action_S_triggered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_MyMainWindow_customContextMenuRequested</span><span class="params">(<span class="type">const</span> QPoint &amp;pos)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">onTaskBoxContextMenuEvent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MyMainWindow *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYMAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mymainwindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mymainwindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMenu&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFontDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">MyMainWindow::<span class="built_in">MyMainWindow</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MyMainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">connect</span>(login, &amp;LoginDialog::emit_login_log, <span class="keyword">this</span>, &amp;MyMainWindow::login_log);</span><br><span class="line">    login-&gt;<span class="built_in">setWindowModality</span>(Qt::WindowModal);</span><br><span class="line"></span><br><span class="line">    QString str = <span class="string">&quot;软件作者姓名：一只柯尔鸭\n软件名称：QT第11周作业\n开发日期：2023-04-24\n&quot;</span>;</span><br><span class="line">    ui-&gt;textEdit-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line"></span><br><span class="line">    ui-&gt;action_Q-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>); <span class="comment">//禁用该菜单</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyMainWindow::~<span class="built_in">MyMainWindow</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyMainWindow::on_textEdit_cursorPositionChanged</span><span class="params">()</span> <span class="comment">//光标发生改变引起行号和列号的改变</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> row, col;</span><br><span class="line">    QTextCursor cursor;</span><br><span class="line">    cursor=ui-&gt;textEdit-&gt;<span class="built_in">textCursor</span>();</span><br><span class="line">    col = cursor.<span class="built_in">columnNumber</span>();</span><br><span class="line">    row = cursor.<span class="built_in">blockNumber</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    qDebug() &lt;&lt; col &lt;&lt; &quot; &quot; &lt;&lt; row &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">    QString strcol = QString::<span class="built_in">number</span>(col, <span class="number">10</span>);</span><br><span class="line">    QString strrow = QString::<span class="built_in">number</span>(row, <span class="number">10</span>);</span><br><span class="line">    QString str = <span class="string">&quot;当前位置：&quot;</span> + strrow + <span class="string">&quot; 行 &quot;</span> + strcol + <span class="string">&quot; 列&quot;</span>;</span><br><span class="line">    ui-&gt;textInfo-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyMainWindow::login_log</span><span class="params">(QString &amp;str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString info = <span class="string">&quot;欢迎你，&quot;</span> + str + <span class="string">&quot; 登录成功！&quot;</span>;</span><br><span class="line">    User = str;</span><br><span class="line">    ui-&gt;textEdit-&gt;<span class="built_in">setText</span>(info);</span><br><span class="line">    ui-&gt;action_Q-&gt;<span class="built_in">setEnabled</span>(<span class="literal">true</span>);</span><br><span class="line">    ui-&gt;action_L-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">    login-&gt;<span class="built_in">hide</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; str &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyMainWindow::on_action_O_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString fileName = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;文件对话框&quot;</span>), <span class="string">&quot;../&quot;</span>, <span class="string">&quot;txt(*.txt)&quot;</span>);</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;fileName: &quot;</span> &lt;&lt; fileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fileName.<span class="built_in">isEmpty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">QFile <span class="title">file</span><span class="params">(fileName)</span></span>;</span><br><span class="line">        <span class="type">bool</span> isok = file.<span class="built_in">open</span>(QIODevice::ReadOnly); <span class="comment">//打开方式为只读</span></span><br><span class="line">        <span class="keyword">if</span> (isok)</span><br><span class="line">        &#123;</span><br><span class="line">            QByteArray array = file.<span class="built_in">readAll</span>(); <span class="comment">//读取文本中全部文件</span></span><br><span class="line">            ui-&gt;textEdit-&gt;<span class="built_in">setText</span>(<span class="built_in">QString</span>(array));</span><br><span class="line">        &#125;</span><br><span class="line">        file.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyMainWindow::on_action_A_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QMessageBox::<span class="built_in">about</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;关于对话框&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;软件作者姓名：一只柯尔鸭\n软件名称：QT第11周作业\n开发日期：2023-04-24\n&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyMainWindow::on_action_L_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    login-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyMainWindow::on_action_Q_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;action_Q-&gt;<span class="built_in">setEnabled</span>(<span class="literal">false</span>);</span><br><span class="line">    ui-&gt;action_L-&gt;<span class="built_in">setEnabled</span>(<span class="literal">true</span>);</span><br><span class="line">    QString info = <span class="string">&quot;您已安全退出，&quot;</span> + User + <span class="string">&quot; 欢迎下次登录！&quot;</span>;</span><br><span class="line">    ui-&gt;textEdit-&gt;<span class="built_in">setText</span>(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyMainWindow::on_action_S_triggered</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString fileName = QFileDialog::<span class="built_in">getSaveFileName</span>(<span class="keyword">this</span>, <span class="string">&quot;save&quot;</span>, <span class="string">&quot;../&quot;</span>, <span class="string">&quot;txt(*.txt)&quot;</span>); <span class="comment">//写出文件的路径</span></span><br><span class="line">    <span class="keyword">if</span> (!fileName.<span class="built_in">isEmpty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">QFile <span class="title">file</span><span class="params">(fileName)</span></span>;</span><br><span class="line">        <span class="type">bool</span> isok = file.<span class="built_in">open</span>(QIODevice::WriteOnly); <span class="comment">//打开方式为只写</span></span><br><span class="line">        <span class="keyword">if</span> (isok)</span><br><span class="line">        &#123;</span><br><span class="line">            QString str = ui-&gt;textEdit-&gt;<span class="built_in">toPlainText</span>(); <span class="comment">//获取文本框中的内容</span></span><br><span class="line">            file.<span class="built_in">write</span>(str.<span class="built_in">toUtf8</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        file.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyMainWindow::on_MyMainWindow_customContextMenuRequested</span><span class="params">(<span class="type">const</span> QPoint &amp;<span class="comment">/*pos*/</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">//创建菜单对象</span></span><br><span class="line">        QMenu *pMenu = <span class="keyword">new</span> <span class="built_in">QMenu</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        QAction *pChangeFont = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="built_in">tr</span>(<span class="string">&quot;更改字体&quot;</span>), <span class="keyword">this</span>);</span><br><span class="line">        QAction *pQuitProcess = <span class="keyword">new</span> <span class="built_in">QAction</span>(<span class="built_in">tr</span>(<span class="string">&quot;退出程序&quot;</span>), <span class="keyword">this</span>);</span><br><span class="line">        pChangeFont-&gt;<span class="built_in">setData</span>(<span class="number">1</span>);</span><br><span class="line">        pQuitProcess-&gt;<span class="built_in">setData</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把QAction对象添加到菜单上</span></span><br><span class="line">        pMenu-&gt;<span class="built_in">addAction</span>(pChangeFont);</span><br><span class="line">        pMenu-&gt;<span class="built_in">addAction</span>(pQuitProcess);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接鼠标右键点击信号</span></span><br><span class="line">        <span class="built_in">connect</span>(pChangeFont, <span class="built_in">SIGNAL</span>(<span class="built_in">triggered</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">onTaskBoxContextMenuEvent</span>()));</span><br><span class="line">        <span class="built_in">connect</span>(pQuitProcess, <span class="built_in">SIGNAL</span>(<span class="built_in">triggered</span>()), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">onTaskBoxContextMenuEvent</span>()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在鼠标右键点击的地方显示菜单</span></span><br><span class="line">        pMenu-&gt;<span class="built_in">exec</span>(<span class="built_in">cursor</span>().<span class="built_in">pos</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放内存</span></span><br><span class="line">        QList&lt;QAction*&gt; list = pMenu-&gt;<span class="built_in">actions</span>();</span><br><span class="line">        foreach (QAction* pAction, list) <span class="keyword">delete</span> pAction;</span><br><span class="line">        <span class="keyword">delete</span> pMenu;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyMainWindow::onTaskBoxContextMenuEvent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QAction *pEven = <span class="built_in">qobject_cast</span>&lt;QAction *&gt;(<span class="keyword">this</span>-&gt;<span class="built_in">sender</span>()); <span class="comment">//this-&gt;sender()就是发信号者 QAction</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取发送信息类型 1:更改字体 2:退出程序</span></span><br><span class="line">    <span class="type">int</span> iType = pEven-&gt;<span class="built_in">data</span>().<span class="built_in">toInt</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (iType)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> ok;</span><br><span class="line">        QFont font = QFontDialog::<span class="built_in">getFont</span>(&amp;ok, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (ok) <span class="keyword">this</span>-&gt;<span class="built_in">setFont</span>(font);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">qDebug</span>() &lt;&lt; <span class="built_in">tr</span>(<span class="string">&quot;没有选择字体！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">this</span>-&gt;<span class="built_in">hide</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><p><img src="https://s2.loli.net/2023/05/03/vW3o2TUn94riAzG.png" alt="1.png"><br><img src="https://s2.loli.net/2023/05/03/ORmqaSnItp9uVGP.png" alt="2.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><p><img src="https://s2.loli.net/2023/05/03/OJIpan3FlEiLxDU.png" alt="3.png"><br><img src="https://s2.loli.net/2023/05/03/eAy9ICFcau7EozW.png" alt="4.png"><br><img src="https://s2.loli.net/2023/05/03/o4AlLQtkysgMW5Z.png" alt="5.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> C++桌面应用程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 桌面应用程序 </tag>
            
            <tag> QT creator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt实验 - 窗口布局</title>
      <link href="/2023/05/14/0002-06/"/>
      <url>/2023/05/14/0002-06/</url>
      
        <content type="html"><![CDATA[<h1 id="C-桌面应用程序实验6"><a href="#C-桌面应用程序实验6" class="headerlink" title="C++桌面应用程序实验6"></a>C++桌面应用程序实验6</h1><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">MyDialog.h</button></li><li class="tab"><button type="button" data-href="#-3">MyDialog.cpp</button></li><li class="tab"><button type="button" data-href="#-4">效果</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">布局练习： 参看文档《Qt5开发及实例》（ftp://10.21.11.21/教师课件/计算机科学与技术系/宋超/Qt </span><br><span class="line">ebook）第3章，3.4节，基本布局，照着做图3.7界面（P80）（注意，可以按照该文档做，也可以使用Qt </span><br><span class="line">Designer做）</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/19/uyJR7SFCl9DZQe1.png" alt="lab02-pro1-0.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYDIALOG_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYDIALOG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLabel&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QLineEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QComboBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QTextEdit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QGridLayout&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MyDialog</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDialog</span> : <span class="keyword">public</span> QDialog</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="comment">//左侧</span></span><br><span class="line">   QLabel *UserNameLabel;</span><br><span class="line">   QLabel *NameLabel;</span><br><span class="line">   QLabel *SexLabel;</span><br><span class="line">   QLabel *DepartmentLabel;</span><br><span class="line">   QLabel *AgeLabel;</span><br><span class="line">   QLabel *OtherLabel;</span><br><span class="line">   QLineEdit *UserNameLineEdit;</span><br><span class="line">   QLineEdit *NameLineEdit;</span><br><span class="line">   QComboBox *SexComboBox;</span><br><span class="line">   QTextEdit *DepartmentTextEdit;</span><br><span class="line">   QLineEdit *AgeLineEdit;</span><br><span class="line"></span><br><span class="line">   QGridLayout *LeftLayout;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//右上侧</span></span><br><span class="line">   QLabel *HeadLabel;</span><br><span class="line">   QLabel *HeadIconLabel;</span><br><span class="line">   QPushButton *UpdateHeadBtn;</span><br><span class="line"></span><br><span class="line">   QHBoxLayout *TopRightLayout;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//右下侧</span></span><br><span class="line">   QLabel *IntroductionLabel;</span><br><span class="line">   QTextEdit *IntroductionTextEdit;</span><br><span class="line"></span><br><span class="line">   QVBoxLayout *RightLayout;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//底部</span></span><br><span class="line">   QPushButton *OkBtn;</span><br><span class="line">   QPushButton *CancelBtn;</span><br><span class="line"></span><br><span class="line">   QHBoxLayout *ButtomLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyDialog</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MyDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MyDialog *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYDIALOG_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mydialog.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mydialog.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPixmap&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyDialog::<span class="built_in">MyDialog</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QDialog</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MyDialog)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setWindowTitle</span>(<span class="built_in">tr</span>(<span class="string">&quot;UserInfo&quot;</span>));</span><br><span class="line">    <span class="comment">/******************* 左侧 *******************/</span></span><br><span class="line"></span><br><span class="line">    UserNameLabel = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="built_in">tr</span>(<span class="string">&quot;用户名：&quot;</span>));</span><br><span class="line">    UserNameLineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">    NameLabel = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="built_in">tr</span>(<span class="string">&quot;姓名：&quot;</span>));</span><br><span class="line">    NameLineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">    SexLabel = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="built_in">tr</span>(<span class="string">&quot;性别：&quot;</span>));</span><br><span class="line">    SexComboBox = <span class="keyword">new</span> QComboBox;</span><br><span class="line">    SexComboBox-&gt;<span class="built_in">addItem</span>(<span class="built_in">tr</span>(<span class="string">&quot;女&quot;</span>));</span><br><span class="line">    SexComboBox-&gt;<span class="built_in">addItem</span>(<span class="built_in">tr</span>(<span class="string">&quot;男&quot;</span>));</span><br><span class="line">    DepartmentLabel = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="built_in">tr</span>(<span class="string">&quot;部门：&quot;</span>));</span><br><span class="line">    DepartmentTextEdit = <span class="keyword">new</span> QTextEdit;</span><br><span class="line">    AgeLabel = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="built_in">tr</span>(<span class="string">&quot;年龄：&quot;</span>));</span><br><span class="line">    AgeLineEdit = <span class="keyword">new</span> QLineEdit;</span><br><span class="line">    OtherLabel = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="built_in">tr</span>(<span class="string">&quot;备注：&quot;</span>));</span><br><span class="line">    OtherLabel-&gt;<span class="built_in">setFrameStyle</span>(QFrame::Panel|QFrame::Sunken);</span><br><span class="line"></span><br><span class="line">    LeftLayout = <span class="keyword">new</span> <span class="built_in">QGridLayout</span>();</span><br><span class="line">    LeftLayout-&gt;<span class="built_in">addWidget</span>(UserNameLabel, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    LeftLayout-&gt;<span class="built_in">addWidget</span>(UserNameLineEdit, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    LeftLayout-&gt;<span class="built_in">addWidget</span>(NameLabel, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    LeftLayout-&gt;<span class="built_in">addWidget</span>(NameLineEdit, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    LeftLayout-&gt;<span class="built_in">addWidget</span>(SexLabel, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">    LeftLayout-&gt;<span class="built_in">addWidget</span>(SexComboBox, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    LeftLayout-&gt;<span class="built_in">addWidget</span>(DepartmentLabel, <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">    LeftLayout-&gt;<span class="built_in">addWidget</span>(DepartmentTextEdit, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">    LeftLayout-&gt;<span class="built_in">addWidget</span>(AgeLabel, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">    LeftLayout-&gt;<span class="built_in">addWidget</span>(AgeLineEdit, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">    LeftLayout-&gt;<span class="built_in">addWidget</span>(OtherLabel, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    LeftLayout-&gt;<span class="built_in">setColumnStretch</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    LeftLayout-&gt;<span class="built_in">setColumnStretch</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******************* 右上侧 *******************/</span></span><br><span class="line"></span><br><span class="line">    HeadLabel = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="built_in">tr</span>(<span class="string">&quot;头像：&quot;</span>));</span><br><span class="line">    HeadIconLabel = <span class="keyword">new</span> QLabel;</span><br><span class="line">    <span class="function">QPixmap <span class="title">icon</span><span class="params">(<span class="string">&quot;coleduck.jpg&quot;</span>)</span></span>;</span><br><span class="line">    HeadIconLabel-&gt;<span class="built_in">setPixmap</span>(icon);</span><br><span class="line">    HeadIconLabel-&gt;<span class="built_in">resize</span>(icon.<span class="built_in">width</span>(), icon.<span class="built_in">height</span>());</span><br><span class="line">    UpdateHeadBtn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="built_in">tr</span>(<span class="string">&quot;更新&quot;</span>));</span><br><span class="line"></span><br><span class="line">    TopRightLayout = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">    TopRightLayout-&gt;<span class="built_in">setSpacing</span>(<span class="number">20</span>);</span><br><span class="line">    TopRightLayout-&gt;<span class="built_in">addWidget</span>(HeadLabel);</span><br><span class="line">    TopRightLayout-&gt;<span class="built_in">addWidget</span>(HeadIconLabel);</span><br><span class="line">    TopRightLayout-&gt;<span class="built_in">addWidget</span>(UpdateHeadBtn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******************* 右下侧 *******************/</span></span><br><span class="line"></span><br><span class="line">    IntroductionLabel = <span class="keyword">new</span> <span class="built_in">QLabel</span>(<span class="built_in">tr</span>(<span class="string">&quot;个人说明：&quot;</span>));</span><br><span class="line">    IntroductionTextEdit = <span class="keyword">new</span> QTextEdit;</span><br><span class="line"></span><br><span class="line">    RightLayout = <span class="keyword">new</span> <span class="built_in">QVBoxLayout</span>();</span><br><span class="line">    RightLayout-&gt;<span class="built_in">setMargin</span>(<span class="number">10</span>);</span><br><span class="line">    RightLayout-&gt;<span class="built_in">addLayout</span>(TopRightLayout);</span><br><span class="line">    RightLayout-&gt;<span class="built_in">addWidget</span>(IntroductionLabel);</span><br><span class="line">    RightLayout-&gt;<span class="built_in">addWidget</span>(IntroductionTextEdit);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******************* 底部 *******************/</span></span><br><span class="line"></span><br><span class="line">    OkBtn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="built_in">tr</span>(<span class="string">&quot;确定：&quot;</span>));</span><br><span class="line">    CancelBtn = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="built_in">tr</span>(<span class="string">&quot;取消：&quot;</span>));</span><br><span class="line"></span><br><span class="line">    ButtomLayout = <span class="keyword">new</span> <span class="built_in">QHBoxLayout</span>();</span><br><span class="line">    ButtomLayout-&gt;<span class="built_in">addStretch</span>();</span><br><span class="line">    ButtomLayout-&gt;<span class="built_in">addWidget</span>(OkBtn);</span><br><span class="line">    ButtomLayout-&gt;<span class="built_in">addWidget</span>(CancelBtn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*******************************************/</span></span><br><span class="line">    QGridLayout *mainLayout = <span class="keyword">new</span> <span class="built_in">QGridLayout</span>(<span class="keyword">this</span>);</span><br><span class="line">    mainLayout-&gt;<span class="built_in">setMargin</span>(<span class="number">15</span>);</span><br><span class="line">    mainLayout-&gt;<span class="built_in">setSpacing</span>(<span class="number">10</span>);</span><br><span class="line">    mainLayout-&gt;<span class="built_in">addLayout</span>(LeftLayout, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    mainLayout-&gt;<span class="built_in">addLayout</span>(RightLayout, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    mainLayout-&gt;<span class="built_in">addLayout</span>(ButtomLayout, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    mainLayout-&gt;<span class="built_in">setSizeConstraint</span>(QLayout::SetFixedSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyDialog::~<span class="built_in">MyDialog</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><p><img src="https://s2.loli.net/2023/04/19/KHj1mSG6gqnBic2.png" alt="lab02-pro1-1.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">MyWidget.h</button></li><li class="tab"><button type="button" data-href="#-3">MyWidget.cpp</button></li><li class="tab"><button type="button" data-href="#-4">MyWidget.ui</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 二、使用Designer进行布局设计</span><br><span class="line">(1) 建立一个以QWidget为窗口的项目Project_1</span><br><span class="line">(2) 在Designer中，设计教材图4-2(旧版4-3)所示的界面</span><br><span class="line">(3) 定义如图中所示的热键（提示：要设定Buddy关系）；确定每个部件的Tab order</span><br><span class="line">(4) 性别下拉框中，加入“男”，“女”两项</span><br><span class="line">(5) 年龄范围设为(10-60)，步长为1</span><br><span class="line">(6) PushButton的文本改为“保存”</span><br><span class="line">(7) 为“保存”按钮定义一个单击槽函数，处理如下事情：1. 检查姓名、邮箱项是否为空，如果是空的，弹出</span><br><span class="line">    一个对话框，提示哪项不能为空；2. 如果检查通过了，则根据姓名、性别、年龄和邮箱生成一个数据，</span><br><span class="line">    保存到一个链表list中。同时，利用qDebug函数输出该数据，看看是否正确。提示: 可以定义一个结构</span><br><span class="line">    体DataItem, 再使用std::list&lt;DataItem&gt;定义一个链表. std::list为C++标准库中的链表实现, 为</span><br><span class="line">    一个模板类, 使用时需要#include &lt;list&gt;</span><br><span class="line"></span><br><span class="line">三、数据与界面互动：扩展Project_1的功能</span><br><span class="line">（1） 把窗口最下面的LineEdit替换为两个按钮：Pre, Next.</span><br><span class="line">（2） 按下Pre键，窗口显示list中的上一条记录，按下Next键显示list中的下一条记录。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYWIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MyWidget</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DataItem</span> &#123;</span><br><span class="line">    QString name;</span><br><span class="line">    QString sex;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    QString mail;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyWidget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MyWidget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    std::list&lt;DataItem&gt; values;</span><br><span class="line">    <span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_SaveBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_PreBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_NextBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MyWidget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYWIDGET_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyWidget::<span class="built_in">MyWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MyWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyWidget::~<span class="built_in">MyWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::on_SaveBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString name = ui-&gt;NameLineEdit-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QString mail = ui-&gt;MailLineEdit-&gt;<span class="built_in">text</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name == <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Warnning&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;姓名不能为空&quot;</span>), QMessageBox::Ok);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (mail == <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Warnning&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;邮箱不能为空&quot;</span>), QMessageBox::Ok);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        QString sex = ui-&gt;SexLineEdit-&gt;<span class="built_in">currentText</span>();</span><br><span class="line">        <span class="type">int</span> age = ui-&gt;AgeLineEdit-&gt;<span class="built_in">value</span>();</span><br><span class="line">        DataItem stu = &#123;name, sex, age, mail&#125;;</span><br><span class="line"></span><br><span class="line">        values.<span class="built_in">push_back</span>(stu);</span><br><span class="line">        cnt ++ ;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;成功录入第&quot;</span> &lt;&lt; cnt &lt;&lt; <span class="string">&quot;个学生&quot;</span> &lt;&lt; <span class="string">&quot;\n姓名：&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;\n邮箱：&quot;</span> &lt;&lt; mail &lt;&lt; <span class="string">&quot;\n性别：&quot;</span> &lt;&lt; sex &lt;&lt; <span class="string">&quot;\n年龄：&quot;</span> &lt;&lt; age &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::on_PreBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pos)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Warnning&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;当前已是第一个数据&quot;</span>), QMessageBox::Ok);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pos -- ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::list&lt;DataItem&gt;::iterator iter;</span><br><span class="line">    iter = values.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      iter ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;当前访问的是第&quot;</span> &lt;&lt; pos + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生信息&quot;</span> &lt;&lt; <span class="string">&quot;\n姓名：&quot;</span> &lt;&lt; iter-&gt;name &lt;&lt; <span class="string">&quot;\n邮箱：&quot;</span> &lt;&lt; iter-&gt;mail &lt;&lt; <span class="string">&quot;\n性别：&quot;</span> &lt;&lt; iter-&gt;sex &lt;&lt; <span class="string">&quot;\n年龄：&quot;</span> &lt;&lt; iter-&gt;age &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::on_NextBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos + <span class="number">1</span> == cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Warnning&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;当前已是最后一个数据&quot;</span>), QMessageBox::Ok);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pos ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::list&lt;DataItem&gt;::iterator iter;</span><br><span class="line">    iter = values.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      iter ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;当前访问的是第&quot;</span> &lt;&lt; pos + <span class="number">1</span> &lt;&lt; <span class="string">&quot;个学生信息&quot;</span> &lt;&lt; <span class="string">&quot;\n姓名：&quot;</span> &lt;&lt; iter-&gt;name &lt;&lt; <span class="string">&quot;\n邮箱：&quot;</span> &lt;&lt; iter-&gt;mail &lt;&lt; <span class="string">&quot;\n性别：&quot;</span> &lt;&lt; iter-&gt;sex &lt;&lt; <span class="string">&quot;\n年龄：&quot;</span> &lt;&lt; iter-&gt;age &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><p><img src="https://s2.loli.net/2023/04/19/b9FSth3W8mQD7UP.png" alt="lab02-pro2-1.png"><br><img src="https://s2.loli.net/2023/04/19/C5wiH7hjav2YMVJ.png" alt="lab02-pro2-2.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">MyWidget.h</button></li><li class="tab"><button type="button" data-href="#-3">MyWidget.cpp</button></li><li class="tab"><button type="button" data-href="#-4">MyWidget.ui</button></li><li class="tab"><button type="button" data-href="#-5">LoginDialog.h</button></li><li class="tab"><button type="button" data-href="#-6">LoginDialog.cpp</button></li><li class="tab"><button type="button" data-href="#-7">LoginDialog.ui</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">四、做一基于QWidget的程序，上面有一个QTextEdit，还有两个按钮“登录”“更改密码”，请注意以上三个部</span><br><span class="line">件要求使用合理布局。当点击登录时，跳出登录界面如图所示用户能输入用户名、密码</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYWIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;logindialog.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MyWidget</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//    LoginDialog login;</span></span><br><span class="line">    LoginDialog *login = <span class="keyword">new</span> <span class="built_in">LoginDialog</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyWidget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MyWidget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_LoginBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">login_log</span><span class="params">(QString &amp;str)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">back</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MyWidget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYWIDGET_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyWidget::<span class="built_in">MyWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MyWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//    LoginDialog *login = new LoginDialog(this);</span></span><br><span class="line">    <span class="built_in">connect</span>(login, &amp;LoginDialog::emit_login_log, <span class="keyword">this</span>, &amp;MyWidget::login_log);</span><br><span class="line">    <span class="built_in">connect</span>(login, &amp;LoginDialog::emit_back, <span class="keyword">this</span>, &amp;MyWidget::back);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyWidget::~<span class="built_in">MyWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::on_LoginBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    login-&gt;<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">hide</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::login_log</span><span class="params">(QString &amp;str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;textEdit-&gt;<span class="built_in">setText</span>(str);</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">show</span>();</span><br><span class="line">    login-&gt;<span class="built_in">hide</span>();</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; str &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    login-&gt;<span class="built_in">hide</span>();</span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><p><img src="https://s2.loli.net/2023/04/19/XKm84TS57AjGpFL.png" alt="lab02-pro3-1.png"><br><img src="https://s2.loli.net/2023/04/19/ecx47vsZhnAomdr.png" alt="lab02-pro3-2.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LOGINDIALOG_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGINDIALOG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginDialog</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginDialog</span> : <span class="keyword">public</span> QDialog</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">emit_login_log</span><span class="params">(QString &amp;str)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">emit_back</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_EnterBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_QuitBtn_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">LoginDialog</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~<span class="built_in">LoginDialog</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::LoginDialog *ui;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// LOGINDIALOG_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-6"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;logindialog.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_logindialog.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"></span><br><span class="line">LoginDialog::<span class="built_in">LoginDialog</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QDialog</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::LoginDialog)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LoginDialog::~<span class="built_in">LoginDialog</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LoginDialog::on_EnterBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString username = ui-&gt;UsernameLineEdit-&gt;<span class="built_in">text</span>();</span><br><span class="line">    QString password = ui-&gt;PasswordLineEdit-&gt;<span class="built_in">text</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (username == <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Warnning&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;用户名不能为空&quot;</span>), QMessageBox::Ok);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (password == <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;Warnning&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;密码不能为空&quot;</span>), QMessageBox::Ok);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (username != <span class="string">&quot;admin&quot;</span> || password != <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        QString str = <span class="string">&quot;用户名或密码错误，请重新输入&quot;</span>;</span><br><span class="line">        <span class="function">emit <span class="title">emit_login_log</span><span class="params">(str)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        QString str = <span class="string">&quot;欢迎你，&quot;</span> + username + <span class="string">&quot; 登录成功！&quot;</span>;</span><br><span class="line">        <span class="function">emit <span class="title">emit_login_log</span><span class="params">(str)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LoginDialog::on_QuitBtn_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">emit <span class="title">emit_back</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-7"><p><img src="https://s2.loli.net/2023/04/19/HlGNqI3s4BYpUh2.png" alt="lab02-pro3-3.png"><br><img src="https://s2.loli.net/2023/04/19/HOyivYKNTMo2xmf.png" alt="lab02-pro3-4.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> C++桌面应用程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 桌面应用程序 </tag>
            
            <tag> QT creator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt实验 - 基础程序结构与控件使用</title>
      <link href="/2023/05/14/0002-05/"/>
      <url>/2023/05/14/0002-05/</url>
      
        <content type="html"><![CDATA[<h1 id="C-桌面应用程序实验5"><a href="#C-桌面应用程序实验5" class="headerlink" title="C++桌面应用程序实验5"></a>C++桌面应用程序实验5</h1><h2 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目1</button></li><li class="tab"><button type="button" data-href="#-2">Project_1.pro</button></li><li class="tab"><button type="button" data-href="#-3">main.cpp</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目要求：窗口与子部件的区别</span><br><span class="line">（1）新建一个空的Qt项目：Project_1；</span><br><span class="line">（2）在main函数中新建三个部件：一个widget，两个label。其中，一个label为子部件，即它的父对象为那个</span><br><span class="line">widget。分别设置它们的标题及文本。</span><br><span class="line">（3）显示窗口：widget以及那个非子部件的label</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">QT       += core gui</span><br><span class="line"></span><br><span class="line">greaterThan(QT_MAJOR_VERSION, 4): QT += widgets</span><br><span class="line"></span><br><span class="line">TEMPLATE = app</span><br><span class="line">#INCLUDEPATH += .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SOURCES += \</span><br><span class="line">        main.cpp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#TEMPLATE = app</span><br><span class="line">#CONFIG += console c++11</span><br><span class="line">#CONFIG -= app_bundle</span><br><span class="line">#CONFIG -= qt</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtWidgets&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    QWidget * widget = <span class="keyword">new</span> <span class="built_in">QWidget</span>();</span><br><span class="line">    widget-&gt;<span class="built_in">setWindowTitle</span>(QObject::<span class="built_in">tr</span>(<span class="string">&quot;这是Widget&quot;</span>));</span><br><span class="line"></span><br><span class="line">    QLabel * label1 = <span class="keyword">new</span> <span class="built_in">QLabel</span>();</span><br><span class="line">    label1-&gt;<span class="built_in">setWindowTitle</span>(QObject::<span class="built_in">tr</span>(<span class="string">&quot;这是Label&quot;</span>));</span><br><span class="line">    label1-&gt;<span class="built_in">setText</span>(QObject::<span class="built_in">tr</span>(<span class="string">&quot;label1:我不是Widget的子部件&quot;</span>));</span><br><span class="line">    label1-&gt;<span class="built_in">resize</span>(<span class="number">500</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    QLabel * label2 = <span class="keyword">new</span> <span class="built_in">QLabel</span>(widget);</span><br><span class="line">    label2-&gt;<span class="built_in">setText</span>(QObject::<span class="built_in">tr</span>(<span class="string">&quot;label2:我是Widget的子部件&quot;</span>));</span><br><span class="line">    label2-&gt;<span class="built_in">resize</span>(<span class="number">500</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    label1-&gt;<span class="built_in">show</span>();</span><br><span class="line">    widget-&gt;<span class="built_in">show</span>();</span><br><span class="line">    <span class="type">int</span> ret = a.<span class="built_in">exec</span>();</span><br><span class="line">    <span class="keyword">delete</span> widget;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目2</button></li><li class="tab"><button type="button" data-href="#-2">Mywidget.cpp</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目要求：熟悉模态和非模态对话框</span><br><span class="line">（1）新建一个Qt Widget Application项目：Project_2</span><br><span class="line">（2）在主窗口类的构造函数中，设置主窗口的标题为：I’m the main window</span><br><span class="line">（3）在主窗口类的构造函数中，定义一个基本对话框对象，设置其标题为：I’m a dialog</span><br><span class="line">（4）在主窗口类的构造函数中，以模态形式显示(3)中定义的对话框</span><br><span class="line">（5）撤消(4)操作，在主窗口类的构造函数中，以非模态形式显示(3)中定义的对话框</span><br><span class="line">（6）分析比较模态和非模态对话框的行为</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyWidget::<span class="built_in">MyWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MyWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;I’m the main window&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    QDialog dialog(this);</span></span><br><span class="line"><span class="comment">//    dialog.show();</span></span><br><span class="line"><span class="comment">//    dialog.exec();</span></span><br><span class="line"></span><br><span class="line">    QDialog * dialog = <span class="keyword">new</span> <span class="built_in">QDialog</span>(<span class="keyword">this</span>);</span><br><span class="line">    dialog-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;I’m a dialog&quot;</span>);</span><br><span class="line">    dialog-&gt;<span class="built_in">resize</span>(<span class="number">500</span>, <span class="number">50</span>);</span><br><span class="line"><span class="comment">//    dialog-&gt;setModal(true);     //以模态形式显示</span></span><br><span class="line">    dialog-&gt;<span class="built_in">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyWidget::~<span class="built_in">MyWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目3</button></li><li class="tab"><button type="button" data-href="#-2">myWidget.h</button></li><li class="tab"><button type="button" data-href="#-3">myWidget.cpp</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目要求：一个Qt界面程序的一般框架结构。通常，为程序的主窗口定义一个类，并在这个类中完成主窗口中的子部件</span><br><span class="line">的创建以及信号的处理。这样，程序的GUI部分全部放在主窗口中实现，便于管理和维护</span><br><span class="line">（1）新建一个空的Qt项目：Project_3</span><br><span class="line">（2）新建一个主窗口类，继承于Widget</span><br><span class="line">（3）在main函数中定义一个主窗口实例，并显示。</span><br><span class="line">（4）运行程序</span><br><span class="line">（5）在主窗口中添加一个PushButton。注意：在主窗口类的构造函数中完成该操作，不要在main函数中。运行程序。</span><br><span class="line">（6）通过Qt Designer在主窗口放置一个label标签，位置与(5)中的PushButton不要重叠，并设置其文本为：</span><br><span class="line">I’m a label。运行程序。</span><br><span class="line">（7）尝试在主窗口类的构造函数中修改(6)中label的文本为：access from code。运行程序。</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYWIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MyWidget</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span> : <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyWidget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MyWidget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QPushButton *myPushButton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MyWidget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYWIDGET_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">MyWidget::<span class="built_in">MyWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QMainWindow</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MyWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    myPushButton = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;按钮&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    ui-&gt;label-&gt;<span class="built_in">setText</span>(<span class="string">&quot;access from code&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyWidget::~<span class="built_in">MyWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目4</button></li><li class="tab"><button type="button" data-href="#-2">mywidget.h_</button></li><li class="tab"><button type="button" data-href="#-3">mywidget.cpp_</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目要求：熟悉信号槽机制。该题目在上面的Project_3上继续完成。</span><br><span class="line">（1）在主窗口类中定义一个slot槽函数changeLabelText()。</span><br><span class="line">（2）在主窗口类中把主窗口中PushButton的clicked信号与槽changeLabelText ()关联在一起. </span><br><span class="line">（3）在showDlg()完成如下处理：如果主窗口中的label的文本为: access from code，则修改其文本为：I’m </span><br><span class="line">a label；反之，则修改为：access from code。提示：字符串比较，可以用QString中的compare函数。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYWIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MyWidget</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">changeLabelText</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QPushButton *myPushButton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyWidget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MyWidget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MyWidget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYWIDGET_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QString&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyWidget::<span class="built_in">MyWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MyWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;I’m the main window&quot;</span>);</span><br><span class="line"></span><br><span class="line">    QDialog * dialog = <span class="keyword">new</span> <span class="built_in">QDialog</span>(<span class="keyword">this</span>);</span><br><span class="line">    dialog-&gt;<span class="built_in">setWindowTitle</span>(<span class="string">&quot;I’m a dialog&quot;</span>);</span><br><span class="line">    dialog-&gt;<span class="built_in">resize</span>(<span class="number">500</span>, <span class="number">50</span>);</span><br><span class="line"><span class="comment">//    dialog-&gt;setModal(true);     //以模态形式显示</span></span><br><span class="line">    dialog-&gt;<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    myPushButton = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;转换&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//    ui-&gt;label-&gt;setText(&quot;access from code&quot;);</span></span><br><span class="line"><span class="comment">//    connect(myPushButton, SIGNAL(clicked()), this, SLOT(changeLabelText()));</span></span><br><span class="line">    <span class="built_in">connect</span>(myPushButton, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MyWidget::changeLabelText);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyWidget::~<span class="built_in">MyWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::changeLabelText</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString str1 = <span class="string">&quot;access from code&quot;</span>;</span><br><span class="line">    QString str2 = <span class="string">&quot;I’m a label&quot;</span>;</span><br><span class="line">    QString str_now = ui-&gt;label-&gt;<span class="built_in">text</span>();</span><br><span class="line">    <span class="keyword">if</span> (QString::<span class="built_in">localeAwareCompare</span>(str_now, str1) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;label-&gt;<span class="built_in">setText</span>(str2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (QString::<span class="built_in">localeAwareCompare</span>(str_now, str2) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ui-&gt;label-&gt;<span class="built_in">setText</span>(str1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目5</button></li><li class="tab"><button type="button" data-href="#-2">mywidget.h</button></li><li class="tab"><button type="button" data-href="#-3">mywidget.cpp</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目要求：熟悉标准对话框</span><br><span class="line">（1）新建一个空的Qt项目：Project_4</span><br><span class="line">（2）新建一个主窗口类，继承于Widget</span><br><span class="line">（3）在Qt Designer中编辑主窗口界面，放置如教材中图3-11所示的按钮</span><br><span class="line">（4）增加并关联每个按钮单击的信号槽</span><br><span class="line">（5）在每个按钮对应的槽函数中，显示对应的标准对话框。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> MYWIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MYWIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWizard&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123; <span class="keyword">class</span> <span class="title class_">MyWidget</span>; &#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QErrorMessage</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyWidget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show_Dlg1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show_Dlg2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show_Dlg3</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show_Dlg4</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show_Dlg5</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show_Dlg6</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show_Dlg7</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show_Dlg8</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QPushButton *myPushButton1;</span><br><span class="line">    QPushButton *myPushButton2;</span><br><span class="line">    QPushButton *myPushButton3;</span><br><span class="line">    QPushButton *myPushButton4;</span><br><span class="line">    QPushButton *myPushButton5;</span><br><span class="line">    QPushButton *myPushButton6;</span><br><span class="line">    QPushButton *myPushButton7;</span><br><span class="line">    QPushButton *myPushButton8;</span><br><span class="line"></span><br><span class="line">    QErrorMessage *errordlg;</span><br><span class="line"></span><br><span class="line">    <span class="function">QWizardPage *<span class="title">createPage1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">QWizardPage *<span class="title">createPage2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">QWizardPage *<span class="title">createPage3</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">MyWidget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">MyWidget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MyWidget *ui;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// MYWIDGET_H</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;mywidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_mywidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QtDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QColorDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFileDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QFontDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QInputDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QProgressDialog&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QErrorMessage&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWizard&gt;</span></span></span><br><span class="line"></span><br><span class="line">MyWidget::<span class="built_in">MyWidget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MyWidget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    myPushButton1 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;颜色对话框&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    myPushButton1-&gt;<span class="built_in">setGeometry</span>(<span class="number">150</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="built_in">connect</span>(myPushButton1, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MyWidget::show_Dlg1);</span><br><span class="line"></span><br><span class="line">    myPushButton2 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;文件对话框&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    myPushButton2-&gt;<span class="built_in">setGeometry</span>(<span class="number">450</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="built_in">connect</span>(myPushButton2, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MyWidget::show_Dlg2);</span><br><span class="line"></span><br><span class="line">    myPushButton3 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;字体对话框&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    myPushButton3-&gt;<span class="built_in">setGeometry</span>(<span class="number">150</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="built_in">connect</span>(myPushButton3, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MyWidget::show_Dlg3);</span><br><span class="line"></span><br><span class="line">    myPushButton4 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;输入对话框&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    myPushButton4-&gt;<span class="built_in">setGeometry</span>(<span class="number">450</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="built_in">connect</span>(myPushButton4, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MyWidget::show_Dlg4);</span><br><span class="line"></span><br><span class="line">    myPushButton5 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;消息对话框&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    myPushButton5-&gt;<span class="built_in">setGeometry</span>(<span class="number">150</span>, <span class="number">300</span>, <span class="number">150</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="built_in">connect</span>(myPushButton5, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MyWidget::show_Dlg5);</span><br><span class="line"></span><br><span class="line">    myPushButton6 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;进度对话框&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    myPushButton6-&gt;<span class="built_in">setGeometry</span>(<span class="number">450</span>, <span class="number">300</span>, <span class="number">150</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="built_in">connect</span>(myPushButton6, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MyWidget::show_Dlg6);</span><br><span class="line"></span><br><span class="line">    errordlg = <span class="keyword">new</span> <span class="built_in">QErrorMessage</span>(<span class="keyword">this</span>);</span><br><span class="line">    myPushButton7 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;错误信息对话框&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    myPushButton7-&gt;<span class="built_in">setGeometry</span>(<span class="number">150</span>, <span class="number">400</span>, <span class="number">150</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="built_in">connect</span>(myPushButton7, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MyWidget::show_Dlg7);</span><br><span class="line"></span><br><span class="line">    myPushButton8 = <span class="keyword">new</span> <span class="built_in">QPushButton</span>(<span class="string">&quot;向导对话框&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    myPushButton8-&gt;<span class="built_in">setGeometry</span>(<span class="number">450</span>, <span class="number">400</span>, <span class="number">150</span>, <span class="number">50</span>);</span><br><span class="line">    <span class="built_in">connect</span>(myPushButton8, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;MyWidget::show_Dlg8);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyWidget::~<span class="built_in">MyWidget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::show_Dlg1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QColor color = QColorDialog::<span class="built_in">getColor</span>(Qt::red, <span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;颜色对话框&quot;</span>));</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;color: &quot;</span> &lt;&lt; color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::show_Dlg2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString fileName = QFileDialog::<span class="built_in">getOpenFileName</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;文件对话框&quot;</span>), <span class="string">&quot;D:&quot;</span>, <span class="built_in">tr</span>(<span class="string">&quot;图片文件(*png *jpg)&quot;</span>));</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;fileName: &quot;</span> &lt;&lt; fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::show_Dlg3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> ok;</span><br><span class="line">    QFont font = QFontDialog::<span class="built_in">getFont</span>(&amp;ok, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (ok) myPushButton3-&gt;<span class="built_in">setFont</span>(font);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">qDebug</span>() &lt;&lt; <span class="built_in">tr</span>(<span class="string">&quot;没有选择字体！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::show_Dlg4</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">bool</span> ok;</span><br><span class="line">    QString string = QInputDialog::<span class="built_in">getText</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;输入字符串对话框&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;请输入用户名:&quot;</span>), QLineEdit::Normal, <span class="built_in">tr</span>(<span class="string">&quot;admin&quot;</span>), &amp;ok);</span><br><span class="line">    <span class="keyword">if</span> (ok) <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;string: &quot;</span> &lt;&lt; string;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> value1 = QInputDialog::<span class="built_in">getInt</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;输入整数对话框&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;请输入-1000到1000之间的数值:&quot;</span>), <span class="number">100</span>, <span class="number">-1000</span>, <span class="number">1000</span>, <span class="number">10</span>, &amp;ok);</span><br><span class="line">    <span class="keyword">if</span> (ok) <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;value1: &quot;</span> &lt;&lt; value1;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> value2 = QInputDialog::<span class="built_in">getDouble</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;输入浮点数对话框&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;请输入-1000到1000之间的数值:&quot;</span>), <span class="number">0.00</span>, <span class="number">-1000</span>, <span class="number">1000</span>, <span class="number">2</span>, &amp;ok);</span><br><span class="line">    <span class="keyword">if</span> (ok) <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;value2: &quot;</span> &lt;&lt; value2;</span><br><span class="line"></span><br><span class="line">    QStringList items;</span><br><span class="line">    items &lt;&lt; <span class="built_in">tr</span>(<span class="string">&quot;条目1&quot;</span>) &lt;&lt; <span class="built_in">tr</span>(<span class="string">&quot;条目2&quot;</span>);</span><br><span class="line">    QString item = QInputDialog::<span class="built_in">getItem</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;输入条目对话框&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;请选择或输入一个条目&quot;</span>), items, <span class="number">0</span>, <span class="literal">true</span>, &amp;ok);</span><br><span class="line">    <span class="keyword">if</span> (ok) <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;item: &quot;</span> &lt;&lt; item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::show_Dlg5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret1 = QMessageBox::<span class="built_in">question</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;问题对话框&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;你了解Qt吗？&quot;</span>), QMessageBox::Yes, QMessageBox::No);</span><br><span class="line">    <span class="keyword">if</span> (ret1 == QMessageBox::Yes) <span class="built_in">qDebug</span>() &lt;&lt; <span class="built_in">tr</span>(<span class="string">&quot;问题！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret2 = QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;提示对话框&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;这是Qt书籍！&quot;</span>), QMessageBox::Ok);</span><br><span class="line">    <span class="keyword">if</span> (ret2 == QMessageBox::Ok) <span class="built_in">qDebug</span>() &lt;&lt; <span class="built_in">tr</span>(<span class="string">&quot;提示！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret3 = QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;警告对话框&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;不能提前结束！&quot;</span>), QMessageBox::Abort);</span><br><span class="line">    <span class="keyword">if</span> (ret3 == QMessageBox::Abort) <span class="built_in">qDebug</span>() &lt;&lt; <span class="built_in">tr</span>(<span class="string">&quot;警告！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> ret4 = QMessageBox::<span class="built_in">critical</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;严重错误对话框&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;发现一个严重错误，现在要关闭所有文件！&quot;</span>), QMessageBox::YesAll);</span><br><span class="line">    <span class="keyword">if</span> (ret4 == QMessageBox::YesAll) <span class="built_in">qDebug</span>() &lt;&lt; <span class="built_in">tr</span>(<span class="string">&quot;错误！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    QMessageBox::<span class="built_in">about</span>(<span class="keyword">this</span>, <span class="built_in">tr</span>(<span class="string">&quot;关于对话框&quot;</span>), <span class="built_in">tr</span>(<span class="string">&quot;嗯嗯嗯嗯嗯嗯&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::show_Dlg6</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QProgressDialog <span class="title">dialog</span><span class="params">(tr(<span class="string">&quot;文件复制进度&quot;</span>), tr(<span class="string">&quot;取消&quot;</span>), <span class="number">0</span>, <span class="number">50000</span>, <span class="keyword">this</span>)</span></span>;</span><br><span class="line">    dialog.<span class="built_in">setWindowTitle</span>(<span class="string">&quot;进度对话框&quot;</span>);</span><br><span class="line">    dialog.<span class="built_in">setWindowModality</span>(Qt::WindowModal);</span><br><span class="line">    dialog.<span class="built_in">show</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50000</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        dialog.<span class="built_in">setValue</span>(i);</span><br><span class="line">        QCoreApplication::<span class="built_in">processEvents</span>();</span><br><span class="line">        <span class="keyword">if</span> (dialog.<span class="built_in">wasCanceled</span>()) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dialog.<span class="built_in">setValue</span>(<span class="number">50000</span>);</span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="built_in">tr</span>(<span class="string">&quot;复制结束！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::show_Dlg7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    errordlg-&gt;<span class="built_in">setWindowTitle</span>(<span class="built_in">tr</span>(<span class="string">&quot;错误信息对话框&quot;</span>));</span><br><span class="line">    errordlg-&gt;<span class="built_in">showMessage</span>(<span class="built_in">tr</span>(<span class="string">&quot;这里是出错信息！&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyWidget::show_Dlg8</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QWizard <span class="title">wizard</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">    wizard.<span class="built_in">setWindowTitle</span>(<span class="built_in">tr</span>(<span class="string">&quot;向导对话框&quot;</span>));</span><br><span class="line">    wizard.<span class="built_in">addPage</span>(<span class="built_in">createPage1</span>());</span><br><span class="line">    wizard.<span class="built_in">addPage</span>(<span class="built_in">createPage2</span>());</span><br><span class="line">    wizard.<span class="built_in">addPage</span>(<span class="built_in">createPage3</span>());</span><br><span class="line">    wizard.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QWizardPage * <span class="title">MyWidget::createPage1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QWizardPage *page = <span class="keyword">new</span> QWizardPage;</span><br><span class="line">    page-&gt;<span class="built_in">setTitle</span>(<span class="built_in">tr</span>(<span class="string">&quot;介绍&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">QWizardPage * <span class="title">MyWidget::createPage2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QWizardPage *page = <span class="keyword">new</span> QWizardPage;</span><br><span class="line">    page-&gt;<span class="built_in">setTitle</span>(<span class="built_in">tr</span>(<span class="string">&quot;用户选择信息&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">QWizardPage * <span class="title">MyWidget::createPage3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QWizardPage *page = <span class="keyword">new</span> QWizardPage;</span><br><span class="line">    page-&gt;<span class="built_in">setTitle</span>(<span class="built_in">tr</span>(<span class="string">&quot;结束&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> C++桌面应用程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 桌面应用程序 </tag>
            
            <tag> QT creator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS C++桌面应用程序 - 对话框练习</title>
      <link href="/2023/05/14/0002-04/"/>
      <url>/2023/05/14/0002-04/</url>
      
        <content type="html"><![CDATA[<h1 id="C-桌面应用程序实验4"><a href="#C-桌面应用程序实验4" class="headerlink" title="C++桌面应用程序实验4"></a>C++桌面应用程序实验4</h1><mark class="hl-label green">题目</mark> <div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">第一题</button></li><li class="tab"><button type="button" data-href="#-2">第二题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 模式对话框练习：做一简单窗口， 具有弹出式菜单“文件”，文件下面有3个菜单项，分别为“打开”，“保存”，“退</span><br><span class="line">出”，要求</span><br><span class="line"></span><br><span class="line">1） 初始状态下，“打开”“退出”两个菜单项为可用，“保存”菜单项为不可用</span><br><span class="line">2） 点击“打开”，弹出模式对话框，对话框中有一按钮“确定”</span><br><span class="line">3）当点击对话框“确定”按钮时，对话框关闭，窗口用户区中央显示文字“对话框已成功关闭！”，“保存”菜单项为可用</span><br><span class="line">4）点击“保存”菜单项时，跳出消息框，包含标题为“模式对话框”内容为“您已经保存！”，按钮OK。</span><br><span class="line">4）点击“退出”菜单项，窗口关闭，程序退出</span><br><span class="line">5）为上述三个菜单项添加相应加速键，并能正确响应加速键消息</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2. 非模式对话框练习：在第1题中的文件菜单项中“保存”菜单项下加入一分隔线后，添加一个“非模式对话框”菜单项，</span><br><span class="line">当用户点击该菜单项时，在主菜单条下添加一个弹出式菜单“对话框”，下面有菜单项，分别为“打开”、“关闭”、分隔线和</span><br><span class="line">“删除菜单”，初始情况下“删除菜单”为不可用</span><br><span class="line"></span><br><span class="line">1） 当点击“打开”菜单项时，弹出非模式对话框，标题为“非模式对话框”，该对话框有一编辑框和一按钮确定，</span><br><span class="line">2）当用户在编辑框中输入文字，并点击“确定”按钮时，非模式对话框关闭，主窗口左上角显示：“非模式对话框输入文字</span><br><span class="line">为： ”加上编辑框输入的文字。</span><br><span class="line">3）当非模式对话框显示的情况下，点击“关闭”菜单项，也可以关闭非模式对话框，但是此时主窗口不显示非模式对话框</span><br><span class="line">相关文字。</span><br><span class="line">4） 2）和3）种情况发生时，“删除菜单”均变为可用</span><br><span class="line">5）当“删除菜单”可用时，点击之，可以将弹出式菜单“对话框”删除</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label green">代码</mark> <div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">(1)</button></li><li class="tab"><button type="button" data-href="#-2">(2)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Resource.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDD_DIALOG1                     129</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_TITLE                       1000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_OPEN                         32774</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_SAVE                         32775</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_EXIT                         32776</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---- 以下是程序部分 ----  */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量:</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span>* text = <span class="keyword">new</span> <span class="type">char</span>[MAX_LOADSTRING];       <span class="comment">// 主窗口输出文本</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span>* text_dlg = <span class="keyword">new</span> <span class="type">char</span>[MAX_LOADSTRING];   <span class="comment">// 对话框输出文本</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK    <span class="title">Dialog1</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>; <span class="comment">// 前向声明</span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> BOOL flag = TRUE;</span><br><span class="line"></span><br><span class="line">    HDC hdc;</span><br><span class="line">    HMENU hmenu = <span class="built_in">GetMenu</span>(hWnd);</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择:</span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">                <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_EXIT:</span><br><span class="line">                <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_OPEN:</span><br><span class="line">                <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_DIALOG1), hWnd, Dialog1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_SAVE:</span><br><span class="line">                <span class="built_in">strcpy_s</span>(text_dlg, <span class="built_in">sizeof</span>(<span class="string">&quot;您已经保存！&quot;</span>), <span class="string">&quot;您已经保存！&quot;</span>);</span><br><span class="line">                <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_DIALOG1), hWnd, Dialog1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            hdc = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_LOADSTRING; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    text[i] = text_dlg[i] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_SAVE, MF_GRAYED);</span><br><span class="line">                flag = FALSE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">TextOut</span>(hdc, <span class="number">10</span>, <span class="number">10</span>, text, <span class="built_in">strlen</span>(text));</span><br><span class="line"></span><br><span class="line">            <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// “模式对话框”框的消息处理程序。</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">Dialog1</span><span class="params">(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMENU hmenu = <span class="built_in">GetMenu</span>(<span class="built_in">GetParent</span>(hDlg));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UNREFERENCED_PARAMETER</span>(lParam);</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_INITDIALOG:</span><br><span class="line">        <span class="built_in">SetDlgItemText</span>(hDlg, IDC_TITLE, text_dlg);</span><br><span class="line">        <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">LOWORD</span>(wParam) == IDOK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">strcpy_s</span>(text, <span class="built_in">sizeof</span>(<span class="string">&quot;对话框已成功关闭！&quot;</span>), <span class="string">&quot;对话框已成功关闭！&quot;</span>);</span><br><span class="line">            <span class="built_in">EnableMenuItem</span>(hmenu, ID_SAVE, MF_ENABLED);</span><br><span class="line">            <span class="built_in">EndDialog</span>(hDlg, <span class="built_in">LOWORD</span>(wParam));</span><br><span class="line">            <span class="built_in">InvalidateRect</span>(<span class="built_in">GetParent</span>(hDlg), <span class="literal">NULL</span>, TRUE);</span><br><span class="line">            <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">        <span class="built_in">EndDialog</span>(hDlg, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (INT_PTR)FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Resource.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDD_DIALOG1                     129</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDD_DIALOG2                     130</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_TITLE                       1001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_EDIT                        1002</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_OPEN                         32774</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_SAVE                         32775</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_EXIT                         32776</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_MODALLESS_DEL                32779</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_MODALLESS_CLOSE              32780</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_MODALLESS_OPEN               32781</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID_MODALLESS                    32783</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---- 以下是程序部分 ----  */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line">HWND hdlg_modalless;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span>* text = <span class="keyword">new</span> <span class="type">char</span>[MAX_LOADSTRING];       <span class="comment">// 主窗口输出文本</span></span><br><span class="line"><span class="type">static</span> <span class="type">char</span>* text_dlg = <span class="keyword">new</span> <span class="type">char</span>[MAX_LOADSTRING];   <span class="comment">// 对话框输出文本</span></span><br><span class="line"><span class="type">static</span> BOOL flag_center = FALSE;</span><br><span class="line"><span class="function">INT_PTR CALLBACK    <span class="title">Dialog1</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;<span class="comment">// 前向声明</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK    <span class="title">Dialog2</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;<span class="comment">// 前向声明</span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> BOOL flag = TRUE;</span><br><span class="line">    <span class="type">static</span> BOOL has_modalless = FALSE;</span><br><span class="line"></span><br><span class="line">    HDC hdc;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line">    HMENU hPopupMenu = <span class="built_in">CreatePopupMenu</span>();</span><br><span class="line">    HMENU hmenu = <span class="built_in">GetMenu</span>(hWnd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择:</span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> ID_EXIT:</span><br><span class="line">                <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_OPEN:</span><br><span class="line">                <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_DIALOG1), hWnd, Dialog1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_SAVE:</span><br><span class="line">                <span class="built_in">strcpy_s</span>(text_dlg, <span class="built_in">sizeof</span>(<span class="string">&quot;您已经保存！&quot;</span>), <span class="string">&quot;您已经保存！&quot;</span>);</span><br><span class="line">                <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_DIALOG1), hWnd, Dialog1);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_MODALLESS:</span><br><span class="line">                <span class="keyword">if</span> (!has_modalless)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">AppendMenu</span>(hmenu, MF_ENABLED | MF_POPUP, (INT_PTR)hPopupMenu, <span class="built_in">TEXT</span>(<span class="string">&quot;对话框&quot;</span>));</span><br><span class="line">                    <span class="built_in">AppendMenu</span>(hPopupMenu, MF_ENABLED, ID_MODALLESS_OPEN, <span class="string">&quot;打开&quot;</span>);</span><br><span class="line">                    <span class="built_in">AppendMenu</span>(hPopupMenu, MF_ENABLED, ID_MODALLESS_CLOSE, <span class="string">&quot;关闭&quot;</span>);</span><br><span class="line">                    <span class="built_in">AppendMenu</span>(hPopupMenu, MF_STRING, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                    <span class="built_in">AppendMenu</span>(hPopupMenu, MF_GRAYED, ID_MODALLESS_DEL, <span class="string">&quot;删除菜单&quot;</span>);</span><br><span class="line">                    <span class="built_in">DrawMenuBar</span>(hWnd);</span><br><span class="line">                    has_modalless = TRUE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_MODALLESS_OPEN:</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MODALLESS_DEL, MF_GRAYED);</span><br><span class="line">                hdlg_modalless = <span class="built_in">CreateDialog</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_DIALOG2), hWnd, Dialog2);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_MODALLESS_CLOSE:</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MODALLESS_DEL, MF_ENABLED);</span><br><span class="line">                <span class="built_in">EndDialog</span>(hdlg_modalless, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_MODALLESS_DEL:</span><br><span class="line">                <span class="built_in">RemoveMenu</span>(hmenu, <span class="number">1</span>, MF_BYPOSITION);</span><br><span class="line">                <span class="built_in">DrawMenuBar</span>(hWnd);</span><br><span class="line">                has_modalless = FALSE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            hdc = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_LOADSTRING; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    text[i] = text_dlg[i] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_SAVE, MF_GRAYED);</span><br><span class="line">                flag = FALSE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag_center)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">TextOut</span>(hdc, <span class="number">500</span>, <span class="number">250</span>, text, <span class="built_in">strlen</span>(text));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">TextOut</span>(hdc, <span class="number">10</span>, <span class="number">10</span>, text, <span class="built_in">strlen</span>(text));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// “非模式对话框”框的消息处理程序。</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">Dialog2</span><span class="params">(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMENU hmenu = <span class="built_in">GetMenu</span>(<span class="built_in">GetParent</span>(hDlg));</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span>* str = <span class="keyword">new</span> <span class="type">char</span>[MAX_LOADSTRING];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UNREFERENCED_PARAMETER</span>(lParam);</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_INITDIALOG:</span><br><span class="line">        <span class="built_in">SetDlgItemText</span>(hDlg, IDC_TITLE, text_dlg);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MAX_LOADSTRING; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            str[i] = text[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">LOWORD</span>(wParam) == IDOK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">GetDlgItemText</span>(hDlg, IDC_EDIT, str, <span class="number">200</span>);</span><br><span class="line">            <span class="built_in">strcpy_s</span>(text, <span class="built_in">sizeof</span>(<span class="string">&quot;非模式对话框输入文字为：&quot;</span>), <span class="string">&quot;非模式对话框输入文字为：&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">strlen</span>(text), j = <span class="number">0</span>; i &lt; MAX_LOADSTRING; i++, j++)</span><br><span class="line">            &#123;</span><br><span class="line">                text[i] = str[j];</span><br><span class="line">            &#125;</span><br><span class="line">            flag_center = FALSE;</span><br><span class="line">            <span class="built_in">EnableMenuItem</span>(hmenu, ID_MODALLESS_DEL, MF_ENABLED);</span><br><span class="line">            <span class="built_in">EndDialog</span>(hDlg, <span class="built_in">LOWORD</span>(wParam));</span><br><span class="line">            <span class="built_in">InvalidateRect</span>(<span class="built_in">GetParent</span>(hDlg), <span class="literal">NULL</span>, TRUE);</span><br><span class="line">            <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">        <span class="built_in">EndDialog</span>(hDlg, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (INT_PTR)FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “模式对话框”框的消息处理程序。</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">Dialog1</span><span class="params">(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMENU hmenu = <span class="built_in">GetMenu</span>(<span class="built_in">GetParent</span>(hDlg));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UNREFERENCED_PARAMETER</span>(lParam);</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_INITDIALOG:</span><br><span class="line">        <span class="built_in">SetDlgItemText</span>(hDlg, IDC_TITLE, text_dlg);</span><br><span class="line">        <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">LOWORD</span>(wParam) == IDOK)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">strcpy_s</span>(text, <span class="built_in">sizeof</span>(<span class="string">&quot;对话框已成功关闭！&quot;</span>), <span class="string">&quot;对话框已成功关闭！&quot;</span>);</span><br><span class="line">            flag_center = TRUE;</span><br><span class="line">            <span class="built_in">EnableMenuItem</span>(hmenu, ID_SAVE, MF_ENABLED);</span><br><span class="line">            <span class="built_in">EndDialog</span>(hDlg, <span class="built_in">LOWORD</span>(wParam));</span><br><span class="line">            <span class="built_in">InvalidateRect</span>(<span class="built_in">GetParent</span>(hDlg), <span class="literal">NULL</span>, TRUE);</span><br><span class="line">            <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_CLOSE:</span><br><span class="line">        <span class="built_in">EndDialog</span>(hDlg, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (INT_PTR)FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> C++桌面应用程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 桌面应用程序 </tag>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS C++桌面应用程序 - 菜单和加速键</title>
      <link href="/2023/05/14/0002-03/"/>
      <url>/2023/05/14/0002-03/</url>
      
        <content type="html"><![CDATA[<h1 id="C-桌面应用程序实验3"><a href="#C-桌面应用程序实验3" class="headerlink" title="C++桌面应用程序实验3"></a>C++桌面应用程序实验3</h1><mark class="hl-label green">题目</mark> <div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">第一题</button></li><li class="tab"><button type="button" data-href="#-2">第二题</button></li><li class="tab"><button type="button" data-href="#-3">第三题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1)菜单资源及其创建。为一简单窗口创建菜单，结构层次和加速键依次为：</span><br><span class="line">文件：打开（Ctrl+O）、保存（Ctrl+S）、另存为、分割线、打印（Ctrl+P）、退出（Ctrl+X）</span><br><span class="line">编辑：复制（Ctrl+C）、粘贴（Ctrl+V）    </span><br><span class="line">帮助：关于（F1）</span><br><span class="line">2) 初始状态下，保存、打印、复制菜单项为灰色</span><br><span class="line">3）完成如下功能，单击“打开””菜单项或者键盘上按下“Ctrl+O”，在窗口用户区中显示“浙江工商大学欢迎你！”，同</span><br><span class="line">时，将“保存“、复制、打印菜单项变为可用状态，打开菜单项变为不可用状态。</span><br><span class="line">4）后点击菜单项“保存“或在键盘上按下”Ctrl+S”，将窗口中显示的文字存成默认路径下的文本文件，文件名为</span><br><span class="line">“data.txt”，将打开菜单项恢复可用状态，同时在其下方插入新的菜单项“导入”，ID号为ID_FILE_LOAD、可用状</span><br><span class="line">态。，加速键为Ctrl+L</span><br><span class="line">5）点击导入菜单项，程序清除屏幕显示，并从data.txt文件导入文件内容，显示于窗口客户区</span><br><span class="line">6）在编辑弹出式菜单下面追加一分割线，并在其下面添加菜单项“颜色”、ID_EDIT_COLOR,初始状态为可用。当点击颜色菜单时，在其后面追加三个菜单项，分别为红色、绿色、蓝色。ID自选，当选中某一颜色菜单项时，如红色，窗口中字体变为红色，同时该菜单前出现选中标识，也就是文字是什么颜色，则相应颜色菜单项出现选中标识。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">续上题</span><br><span class="line"></span><br><span class="line">1）在“编辑“”菜单下追加一分割线，后追加依次两个菜单项（包含加速键）“显示工具菜单（Ctrl+A）” “删除工具</span><br><span class="line">    菜单（Ctrl+D）”初始状态“创建工具菜单”菜单项为可用，“删除工具菜单”项为不可用（灰色）</span><br><span class="line">2）完成如下功能：</span><br><span class="line">      A. 点击（或按相应加速键）“显示工具菜单”项，在菜单条中“编辑”菜单后，增加一弹出式菜单“工具”，包含 </span><br><span class="line">         “红色”,”绿色“、“蓝色”，分隔线、“更改文字（Modal）”、更改文字（Modaless）菜单项；同时“显示工</span><br><span class="line">         具菜单”菜单项变为不可用（变灰），“删除工具菜单”菜单项变为可用。</span><br><span class="line">      B. 点击“删除工具菜单“项，菜单条中弹出式菜单“工具”，被删除，同时“显示工具菜单”菜单项变为可用，“删</span><br><span class="line">         除工具菜单”变灰</span><br><span class="line">      C. 在“工具”菜单项存在的情况下，分别点击“红色”、“绿色”、“蓝色”菜单项，窗口用户区的文字分别显示为</span><br><span class="line">         对应的颜色</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建一窗口，具有弹出式菜单“形状”，下面有菜单项“矩形”、“椭圆”，另有弹出式菜单“颜色”，下面有“红色”、“蓝</span><br><span class="line">色”“绿色”，弹出式菜单项“移动”，下面有菜单项“上”“下”“左”“右”，并为之设置四个方向键为其加速键，要求如下：</span><br><span class="line"></span><br><span class="line">1） 当点击椭圆或矩形菜单（相应的具有选中标识），拖动鼠标同时按下左键，在屏幕上画相应的形状，当放开左键</span><br><span class="line">    时，图形停留在窗口上，</span><br><span class="line">2） 当点击相应的方向（方向键或菜单）时，屏幕图形向该方向移动。</span><br><span class="line">3） 选中颜色菜单，相应改变颜色。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label green">代码</mark> <div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">(1)</button></li><li class="tab"><button type="button" data-href="#-2">(2)</button></li><li class="tab"><button type="button" data-href="#-3">(3)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一题和第二题代码写成一份，放在后面</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Resource.h 里添加的定义</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_OPEN                   32781</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_SAVE                   32782</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_SAVES                  32783</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_PASTE                  32784</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_EXIT                   32785</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_COPY                   32786</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_FILELOAD               32787</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_PRINT                  32788</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_ABOUT                  32789</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_COLOR_R                32806</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_COLOR_G                32807</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_COLOR_B                32808</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_COLOR                  32809</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_DELTOOL                32819</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_ADDTOOL                32820</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_TOOL                   32823</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_MODAL                  32821</span></span><br><span class="line"><span class="comment">// #define ID_MENU1_MODALESS               32822</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加速键的设置内容省略</span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HDC hdc = <span class="built_in">GetDC</span>(hWnd);</span><br><span class="line">    HMENU hmenu = <span class="built_in">GetMenu</span>(hWnd);</span><br><span class="line">    HMENU hPopupMenu = <span class="built_in">CreatePopupMenu</span>();</span><br><span class="line">    <span class="comment">//HMENU hmenu_0 = GetSubMenu(hmenu, 0);</span></span><br><span class="line">    <span class="comment">//HMENU hmenu_1 = GetSubMenu(hmenu, 1);</span></span><br><span class="line">    <span class="comment">//HMENU hmenu_2 = GetSubMenu(hmenu, 2);</span></span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">char</span>* textbuf = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> BOOL flag = TRUE;</span><br><span class="line">    <span class="type">static</span> BOOL flag_fileload = TRUE;</span><br><span class="line">    <span class="type">static</span> BOOL flag_text = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL flag_color_r = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL flag_color_g = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL flag_color_b = FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 分析菜单选择:</span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> ID_MENU1_ABOUT:</span><br><span class="line">                <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_MENU1_EXIT:</span><br><span class="line">                <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_MENU1_OPEN:</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_COPY, MF_ENABLED);</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_SAVE, MF_ENABLED);</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_PASTE, MF_ENABLED);</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_OPEN, MF_GRAYED);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">512</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    textbuf[i] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">strcpy_s</span>(textbuf, <span class="built_in">sizeof</span>(<span class="string">&quot;浙江工商大学欢迎你！\n&quot;</span>), <span class="string">&quot;浙江工商大学欢迎你！\n&quot;</span>);</span><br><span class="line">                flag_text = TRUE;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_MENU1_SAVE:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_OPEN, MF_ENABLED);</span><br><span class="line">                    <span class="keyword">if</span> (flag_fileload)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">InsertMenu</span>(hmenu, ID_MENU1_SAVE, MF_BYCOMMAND | MF_ENABLED,</span><br><span class="line">                            ID_MENU1_FILELOAD, <span class="string">&quot;导入(&amp;L)&quot;</span>);</span><br><span class="line">                        flag_fileload = FALSE;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="function">std::ofstream <span class="title">ofs</span><span class="params">(<span class="string">&quot;D:\\Code\\VS_desktop\\test6\\data.txt&quot;</span>, std::ios::app)</span></span>;</span><br><span class="line">                    ofs.<span class="built_in">write</span>(textbuf, <span class="built_in">strlen</span>(textbuf));</span><br><span class="line">                    ofs.<span class="built_in">close</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_MENU1_FILELOAD:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">DeleteMenu</span>(hmenu, ID_MENU1_FILELOAD, MF_BYCOMMAND);</span><br><span class="line">                    flag_fileload = TRUE;</span><br><span class="line">                    <span class="function">std::ifstream <span class="title">ifs</span><span class="params">(<span class="string">&quot;D:\\Code\\VS_desktop\\test6\\data.txt&quot;</span>, std::ios::in)</span></span>;</span><br><span class="line">                    ifs.<span class="built_in">read</span>(textbuf, <span class="number">512</span>);</span><br><span class="line">                    ifs.<span class="built_in">close</span>();</span><br><span class="line">                    flag_text = TRUE;</span><br><span class="line">                    <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//case ID_MENU1_COLOR:</span></span><br><span class="line">            <span class="comment">//    AppendMenu(hmenu_1, MF_ENABLED, ID_MENU1_COLOR_R, &quot;红色&quot;);</span></span><br><span class="line">            <span class="comment">//    AppendMenu(hmenu_1, MF_ENABLED, ID_MENU1_COLOR_G, &quot;绿色&quot;);</span></span><br><span class="line">            <span class="comment">//    AppendMenu(hmenu_1, MF_ENABLED, ID_MENU1_COLOR_B, &quot;蓝色&quot;);</span></span><br><span class="line">            <span class="comment">//    EnableMenuItem(hmenu, ID_MENU1_COLOR, MF_GRAYED);</span></span><br><span class="line">            <span class="comment">//    break;</span></span><br><span class="line">            <span class="keyword">case</span> ID_MENU1_COLOR_R:</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_MENU1_COLOR_R, MF_CHECKED);</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_MENU1_COLOR_G, MF_UNCHECKED);</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_MENU1_COLOR_B, MF_UNCHECKED);</span><br><span class="line">                flag_color_r = flag_text = TRUE;</span><br><span class="line">                flag_color_g = flag_color_b = FALSE;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_MENU1_COLOR_G:</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_MENU1_COLOR_R, MF_UNCHECKED);</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_MENU1_COLOR_G, MF_CHECKED);</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_MENU1_COLOR_B, MF_UNCHECKED);</span><br><span class="line">                flag_color_g = flag_text = TRUE;</span><br><span class="line">                flag_color_r = flag_color_b = FALSE;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_MENU1_COLOR_B:</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_MENU1_COLOR_R, MF_UNCHECKED);</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_MENU1_COLOR_G, MF_UNCHECKED);</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_MENU1_COLOR_B, MF_CHECKED);</span><br><span class="line">                flag_color_b = flag_text = TRUE;</span><br><span class="line">                flag_color_r = flag_color_g = FALSE;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_MENU1_ADDTOOL:</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_DELTOOL, MF_ENABLED);</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_ADDTOOL, MF_GRAYED);</span><br><span class="line">                <span class="comment">//hPopupMenu = CreatePopupMenu();</span></span><br><span class="line">                <span class="comment">//AppendMenu(hmenu, MF_POPUP, (UINT_PTR)hPopupmenu, &quot;工具&quot;);</span></span><br><span class="line">                <span class="built_in">InsertMenu</span>(hmenu, <span class="number">2</span>, MF_BYPOSITION | MF_ENABLED | MF_POPUP, (INT_PTR)hPopupMenu, <span class="built_in">TEXT</span>(<span class="string">&quot;工具&quot;</span>));</span><br><span class="line">                <span class="built_in">AppendMenu</span>(hPopupMenu, MF_ENABLED, ID_MENU1_COLOR_R, <span class="string">&quot;红色&quot;</span>);</span><br><span class="line">                <span class="built_in">AppendMenu</span>(hPopupMenu, MF_ENABLED, ID_MENU1_COLOR_G, <span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">                <span class="built_in">AppendMenu</span>(hPopupMenu, MF_ENABLED, ID_MENU1_COLOR_B, <span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">                <span class="built_in">AppendMenu</span>(hPopupMenu, MF_STRING, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="built_in">AppendMenu</span>(hPopupMenu, MF_ENABLED, ID_MENU1_MODAL, <span class="string">&quot;更改文字（Modal）&quot;</span>);</span><br><span class="line">                <span class="built_in">AppendMenu</span>(hPopupMenu, MF_ENABLED, ID_MENU1_MODALESS, <span class="string">&quot;更改文字（Modaless）&quot;</span>);</span><br><span class="line">                <span class="built_in">DrawMenuBar</span>(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_MENU1_DELTOOL:</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_DELTOOL, MF_GRAYED);</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_ADDTOOL, MF_ENABLED);</span><br><span class="line">                <span class="built_in">RemoveMenu</span>(hmenu, <span class="number">2</span>, MF_BYPOSITION);</span><br><span class="line">                <span class="built_in">DrawMenuBar</span>(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            PAINTSTRUCT ps;</span><br><span class="line">            HDC hdc = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_COPY, MF_GRAYED);</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_SAVE, MF_GRAYED);</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_PASTE, MF_GRAYED);</span><br><span class="line">                <span class="built_in">EnableMenuItem</span>(hmenu, ID_MENU1_DELTOOL, MF_GRAYED);</span><br><span class="line">                flag = FALSE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (flag_text)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag_color_r)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">SetTextColor</span>(hdc, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (flag_color_g)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">SetTextColor</span>(hdc, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (flag_color_b)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">SetTextColor</span>(hdc, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">char</span>* str_line = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">512</span>];</span><br><span class="line">                <span class="type">int</span> pos = <span class="number">0</span>, line_cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(textbuf); i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (textbuf[i] != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        str_line[pos++] = textbuf[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        str_line[pos++] = <span class="number">0</span>;</span><br><span class="line">                        line_cnt++;</span><br><span class="line">                        <span class="built_in">TextOut</span>(hdc, <span class="number">10</span>, <span class="number">10</span> + line_cnt * <span class="number">30</span>, str_line, <span class="built_in">strlen</span>(str_line));</span><br><span class="line">                        pos = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                flag_text = FALSE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Resource.h 里添加的定义</span></span><br><span class="line"><span class="comment">// #define ID_RECT                         32780</span></span><br><span class="line"><span class="comment">// #define ID_CIRCLE                       32781</span></span><br><span class="line"><span class="comment">// #define ID_RED                          32782</span></span><br><span class="line"><span class="comment">// #define ID_BLUE                         32783</span></span><br><span class="line"><span class="comment">// #define ID_GREEN                        32784</span></span><br><span class="line"><span class="comment">// #define ID_UP                           32785</span></span><br><span class="line"><span class="comment">// #define ID_DOWN                         32786</span></span><br><span class="line"><span class="comment">// #define ID_LEFT                         32787</span></span><br><span class="line"><span class="comment">// #define ID_RIGHT                        32788</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加速键的设置内容省略</span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMENU hmenu = <span class="built_in">GetMenu</span>(hWnd), haddmenu;</span><br><span class="line">    HMENU hmenu_0 = <span class="built_in">GetSubMenu</span>(hmenu, <span class="number">0</span>);</span><br><span class="line">    HMENU hmenu_1 = <span class="built_in">GetSubMenu</span>(hmenu, <span class="number">1</span>);</span><br><span class="line">    HMENU hmenu_2 = <span class="built_in">GetSubMenu</span>(hmenu, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    HPEN hPen_black = (HPEN)<span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">2</span>, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    HPEN hPen_white = (HPEN)<span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">5</span>, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">    HBRUSH hBrush_white = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH);</span><br><span class="line">    HBRUSH hBrush_red = (HBRUSH)<span class="built_in">CreateSolidBrush</span>(<span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    HBRUSH hBrush_green = (HBRUSH)<span class="built_in">CreateSolidBrush</span>(<span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line">    HBRUSH hBrush_blue = (HBRUSH)<span class="built_in">CreateSolidBrush</span>(<span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> BOOL bRect = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL bCircle = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL bRed = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL bBlue = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL bGreen = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL nLButtonDown = FALSE;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> start_x = <span class="number">0</span>, end_x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> start_y = <span class="number">0</span>, end_y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">LOWORD</span>(lParam);</span><br><span class="line">    <span class="type">int</span> y = <span class="built_in">HIWORD</span>(lParam);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    HDC hDC;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择:</span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> ID_CIRCLE:</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_CIRCLE, MF_CHECKED);</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_RECT, MF_UNCHECKED);</span><br><span class="line">                bCircle = TRUE; bRect = FALSE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_RECT:</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_RECT, MF_CHECKED);</span><br><span class="line">                <span class="built_in">CheckMenuItem</span>(hmenu, ID_CIRCLE, MF_UNCHECKED);</span><br><span class="line">                bRect = TRUE; bCircle = FALSE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_UP:</span><br><span class="line">                start_y -= <span class="number">50</span>;</span><br><span class="line">                end_y -= <span class="number">50</span>;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_DOWN:</span><br><span class="line">                start_y += <span class="number">50</span>;</span><br><span class="line">                end_y += <span class="number">50</span>;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_LEFT:</span><br><span class="line">                start_x -= <span class="number">50</span>;</span><br><span class="line">                end_x -= <span class="number">50</span>;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_RIGHT:</span><br><span class="line">                start_x += <span class="number">50</span>;</span><br><span class="line">                end_x += <span class="number">50</span>;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_BLUE:</span><br><span class="line">                bBlue = TRUE; bRed = FALSE; bGreen = FALSE;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_RED:</span><br><span class="line">                bRed = TRUE; bBlue = FALSE; bGreen = FALSE;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ID_GREEN:</span><br><span class="line">                bGreen = TRUE; bRed = FALSE; bBlue = FALSE;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">        &#123;</span><br><span class="line">            start_x = end_x = x;</span><br><span class="line">            start_y = end_y = y;</span><br><span class="line">            nLButtonDown = TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONUP:</span><br><span class="line">        &#123;</span><br><span class="line">            nLButtonDown = FALSE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_MOUSEMOVE:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nLButtonDown)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">                end_x = x, end_y = y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            hDC = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">SelectObject</span>(hDC, hPen_white);</span><br><span class="line">            <span class="built_in">Rectangle</span>(hDC, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>, <span class="number">1000</span>);</span><br><span class="line">            <span class="built_in">SelectObject</span>(hDC, hPen_black);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bRed)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">SelectObject</span>(hDC, hBrush_red);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bBlue)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">SelectObject</span>(hDC, hBrush_blue);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bGreen)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">SelectObject</span>(hDC, hBrush_green);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bRect)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Rectangle</span>(hDC, start_x, start_y, end_x, end_y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (bCircle)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Ellipse</span>(hDC, start_x, start_y, end_x, end_y);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> C++桌面应用程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 桌面应用程序 </tag>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS C++桌面应用程序 - 鼠标键盘编程</title>
      <link href="/2023/05/14/0002-02/"/>
      <url>/2023/05/14/0002-02/</url>
      
        <content type="html"><![CDATA[<h1 id="C-桌面应用程序实验2"><a href="#C-桌面应用程序实验2" class="headerlink" title="C++桌面应用程序实验2"></a>C++桌面应用程序实验2</h1><mark class="hl-label green">题目</mark> <div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">第一题</button></li><li class="tab"><button type="button" data-href="#-2">第二题</button></li><li class="tab"><button type="button" data-href="#-3">第三题</button></li><li class="tab"><button type="button" data-href="#-4">第四题</button></li><li class="tab"><button type="button" data-href="#-5">第五题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.重做书中例题1（旧版教材找到相应题目），测试是否达到要求。(注意，通过此题重新测试)</span><br><span class="line">    (a)大小写问题 (b)复合按键问题(ctrl+A) (c)如果按键既产生按键消息又产生字符消息，谁先谁后？</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.用户区中央显示一个正方形（大小自定）,然后</span><br><span class="line"></span><br><span class="line">a.按键盘上的方向键，正方形能够按方向键的指示相应移动，大小不变。</span><br><span class="line">b.按键盘上的 b键，正方形涂黑，再按一下b键，正方形又切换为白色填充。如此，可以利用b键</span><br><span class="line">    正方形可以在黑白两色间切换（要求在WM_CHAR消息中对b键进行相应,即在case WM_CHAR:</span><br><span class="line">c.  按下键盘上的ctrl + R键，圆形变为正方形，按下ctrl+C键又变回圆形，如此，可实现圆和正方形间的</span><br><span class="line">    切换，其他功能仍可正常执行。（可能但不一定能用到： GetKeyState(VK_*) &lt; 0 说明VK_*被按下，</span><br><span class="line">    &gt;0 ：VK_*没有按下，但是VK_CAPITAL 除外）</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建一个简单窗口， 按下鼠标左键，同时按下键盘上的ctrl键，拖动鼠标，在用户区上画出一个矩形，</span><br><span class="line">矩形左上角以初始按下鼠标的点，右下角为鼠标当前位置，放开鼠标，窗口用户区显示一个最后的矩形。</span><br><span class="line">按下键盘的‘l’(英文字母L的小写)，矩形放大，按下‘s’键，矩形缩小，</span><br><span class="line">并能用方向键实现所画矩形按相应方向移动。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">做一个简单的画图程序，基本功能：</span><br><span class="line"></span><br><span class="line">1）按“L”后，用鼠标拖拽能在屏幕上画直线；</span><br><span class="line">2）按“E”后,用鼠标托拽能在屏幕上画矩形</span><br><span class="line">3）按“C”后，用鼠标拖拽能在屏幕上画圆</span><br><span class="line">4）按“R”“G”“B”能够改变所画图形为红、绿、蓝色</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><p>在窗口用户区中做一个简单的英文文本编辑器，基本功能：</p><p>1）    能够响应键盘输入文字；<br>2）    按Ctrl+A，实现文字底色全部变为蓝色，试着实现Ctrl+C，Ctrl+V<br>    实现复制粘贴功能，粘贴位置紧随原文之后<br>3）    按“Ctrl+S”键能够将所输入文字存成文件<br>4）    分别按“R”“G”“B”能够相应改变文字颜色<br>5）    能够用键盘移动在文字键插入字母<br>6）    如果采用定长数组存储输入文字，当输入越界时给出提示（提示——消息框：<br>    MessageBox(hWnd, “你的输入已经超过了最大存储！”,  “消息框实例”, MB_OK);</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label green">代码</mark> <div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">第一题</button></li><li class="tab"><button type="button" data-href="#-2">第二题</button></li><li class="tab"><button type="button" data-href="#-3">第三题</button></li><li class="tab"><button type="button" data-href="#-4">第四题</button></li><li class="tab"><button type="button" data-href="#-5">第五题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HDC hDC;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line">    HPEN hPen;</span><br><span class="line">    HBRUSH hBrush;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> cUp[] = <span class="string">&quot;You had pressed the UP key&quot;</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> cCtrl[] = <span class="string">&quot;You had pressed the CTRL key&quot;</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> cShift[] = <span class="string">&quot;You had pressed the SHIFT key&quot;</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> cCtrl_A[] = <span class="string">&quot;You had pressed the CTRL A key&quot;</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> cShift_B[] = <span class="string">&quot;You had pressed the SHIFT B key&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> BOOL nUpKeyDown = FALSE, nShiftKeyDown = FALSE, nCtrlKeyDown = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL nCtrlAKeyDown = FALSE, nShiftBKeyDown = FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (wParam)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> VK_UP:</span><br><span class="line">                nUpKeyDown = TRUE;</span><br><span class="line">                nCtrlKeyDown = nCtrlAKeyDown = FALSE;</span><br><span class="line">                nShiftKeyDown = nShiftBKeyDown = FALSE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VK_SHIFT:</span><br><span class="line">                nShiftKeyDown = TRUE;</span><br><span class="line">                nUpKeyDown = nShiftBKeyDown = FALSE;</span><br><span class="line">                nCtrlKeyDown = nCtrlAKeyDown = FALSE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VK_CONTROL:</span><br><span class="line">                nCtrlKeyDown = TRUE;</span><br><span class="line">                nUpKeyDown = nCtrlAKeyDown = FALSE;</span><br><span class="line">                nShiftKeyDown = nShiftBKeyDown = FALSE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//case WM_KEYUP:</span></span><br><span class="line">    <span class="comment">//    InvalidateRect(hWnd, NULL, FALSE);</span></span><br><span class="line">    <span class="comment">//    break;</span></span><br><span class="line">    <span class="keyword">case</span> WM_CHAR:</span><br><span class="line">        <span class="keyword">if</span> (wParam == <span class="string">&#x27;a&#x27;</span> || wParam == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">GetKeyState</span>(VK_CONTROL) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nCtrlAKeyDown = TRUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (wParam == <span class="string">&#x27;b&#x27;</span> || wParam == <span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">GetKeyState</span>(VK_SHIFT) &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nShiftBKeyDown = TRUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>;</span><br><span class="line">        <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择:</span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">                <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">                <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line">            hDC = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">            hBrush = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH);</span><br><span class="line">            hPen = (HPEN)<span class="built_in">GetStockObject</span>(WHITE_PEN);</span><br><span class="line">            <span class="built_in">SelectObject</span>(hDC, hPen);</span><br><span class="line">            <span class="built_in">SelectObject</span>(hDC, hBrush);</span><br><span class="line">            <span class="built_in">SetTextColor</span>(hDC, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nUpKeyDown == TRUE)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Rectangle</span>(hDC, <span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">                <span class="built_in">TextOut</span>(hDC, <span class="number">0</span>, <span class="number">0</span>, cUp, <span class="built_in">strlen</span>(cUp));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nCtrlAKeyDown == TRUE)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Rectangle</span>(hDC, <span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">                <span class="built_in">TextOut</span>(hDC, <span class="number">0</span>, <span class="number">100</span>, cCtrl_A, <span class="built_in">strlen</span>(cCtrl_A));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nCtrlKeyDown == TRUE)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Rectangle</span>(hDC, <span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">                <span class="built_in">TextOut</span>(hDC, <span class="number">0</span>, <span class="number">60</span>, cCtrl, <span class="built_in">strlen</span>(cCtrl));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nShiftBKeyDown == TRUE)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Rectangle</span>(hDC, <span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">                <span class="built_in">TextOut</span>(hDC, <span class="number">0</span>, <span class="number">0</span>, cShift_B, <span class="built_in">strlen</span>(cShift_B));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nShiftKeyDown == TRUE)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Rectangle</span>(hDC, <span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">200</span>);</span><br><span class="line">                <span class="built_in">TextOut</span>(hDC, <span class="number">0</span>, <span class="number">0</span>, cShift, <span class="built_in">strlen</span>(cShift));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">DeleteObject</span>(hPen);</span><br><span class="line">            <span class="built_in">DeleteObject</span>(hBrush);</span><br><span class="line">            <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HDC hDC;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line">    HPEN hPen_black = (HPEN)<span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">2</span>, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    HPEN hPen_white = (HPEN)<span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">5</span>, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">    HBRUSH hBrush_white = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH);</span><br><span class="line">    HBRUSH hBrush_black = (HBRUSH)<span class="built_in">GetStockObject</span>(BLACK_BRUSH);</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> BOOL backColor_White = TRUE;</span><br><span class="line">    <span class="type">static</span> BOOL shape_circle = FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> start_x = <span class="number">500</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> start_y = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">        &#123;</span><br><span class="line">            hDC = <span class="built_in">GetDC</span>(hWnd);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">SelectObject</span>(hDC, hPen_white);</span><br><span class="line">            <span class="built_in">SelectObject</span>(hDC, hBrush_white);</span><br><span class="line">            <span class="built_in">Rectangle</span>(hDC, start_x, start_y, start_x + <span class="number">200</span>, start_y + <span class="number">200</span>);</span><br><span class="line">            <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (wParam)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> VK_UP:</span><br><span class="line">                start_y -= <span class="number">50</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VK_DOWN:</span><br><span class="line">                start_y += <span class="number">50</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VK_LEFT:</span><br><span class="line">                start_x -= <span class="number">50</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> VK_RIGHT:</span><br><span class="line">                start_x += <span class="number">50</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                backColor_White = !backColor_White;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">GetKeyState</span>(VK_CONTROL) &lt; <span class="number">0</span>)</span><br><span class="line">                    shape_circle = TRUE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">GetKeyState</span>(VK_CONTROL) &lt; <span class="number">0</span>)</span><br><span class="line">                    shape_circle = FALSE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">            <span class="built_in">ReleaseDC</span>(hWnd, hDC);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//case WM_CHAR:</span></span><br><span class="line">    <span class="comment">//    &#123;</span></span><br><span class="line">    <span class="comment">//    if (wParam == &#x27;B&#x27;)</span></span><br><span class="line">    <span class="comment">//        backColor_White = !backColor_White;</span></span><br><span class="line">    <span class="comment">//    else if (wParam == &#x27;R&#x27;)</span></span><br><span class="line">    <span class="comment">//    &#123;</span></span><br><span class="line">    <span class="comment">//        if (GetKeyState(VK_CONTROL) &lt; 0)</span></span><br><span class="line">    <span class="comment">//            shape_circle = FALSE;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//    else if (wParam == &#x27;C&#x27;)</span></span><br><span class="line">    <span class="comment">//    &#123;</span></span><br><span class="line">    <span class="comment">//        if (GetKeyState(VK_CONTROL) &lt; 0)</span></span><br><span class="line">    <span class="comment">//            shape_circle = TRUE;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//    InvalidateRect(hWnd, NULL, FALSE);</span></span><br><span class="line">    <span class="comment">//    break;</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择:</span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">                <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">                <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            hDC = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">            <span class="built_in">SelectObject</span>(hDC, hPen_black);</span><br><span class="line">            <span class="built_in">SelectObject</span>(hDC, hBrush_white);</span><br><span class="line">            <span class="keyword">if</span> (backColor_White == FALSE)</span><br><span class="line">                <span class="built_in">SelectObject</span>(hDC, hBrush_black);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (shape_circle == TRUE)</span><br><span class="line">                <span class="built_in">Ellipse</span>(hDC, start_x, start_y, start_x + <span class="number">200</span>, start_y + <span class="number">200</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">Rectangle</span>(hDC, start_x, start_y, start_x + <span class="number">200</span>, start_y + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HDC hDC;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line">    HPEN hPen_black = (HPEN)<span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">2</span>, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    HPEN hPen_white = (HPEN)<span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">5</span>, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">    HBRUSH hBrush_white = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH);</span><br><span class="line">    HBRUSH hBrush_black = (HBRUSH)<span class="built_in">GetStockObject</span>(BLACK_BRUSH);</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> start_x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> start_y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> end_x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> end_y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> increase_x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> increase_y = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> BOOL Rect = FALSE;</span><br><span class="line">    <span class="type">int</span> x = <span class="built_in">LOWORD</span>(lParam);</span><br><span class="line">    <span class="type">int</span> y = <span class="built_in">HIWORD</span>(lParam);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">        hDC = <span class="built_in">GetDC</span>(hWnd);</span><br><span class="line">        <span class="built_in">SelectObject</span>(hDC, hPen_white);</span><br><span class="line">        <span class="built_in">Rectangle</span>(hDC, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">GetKeyState</span>(VK_CONTROL) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Rect = TRUE;</span><br><span class="line">            start_x = x;</span><br><span class="line">            start_y = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">ReleaseDC</span>(hWnd, hDC);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONUP:</span><br><span class="line">        Rect = FALSE;</span><br><span class="line">        <span class="keyword">if</span> (end_x &lt; start_x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> temp = end_x;</span><br><span class="line">            end_x = start_x;</span><br><span class="line">            start_x = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (end_y &lt; start_y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> temp = end_y;</span><br><span class="line">            end_y = start_y;</span><br><span class="line">            start_y = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        increase_x = (end_x - start_x) / <span class="number">4</span>;</span><br><span class="line">        increase_y = (end_y - start_y) / <span class="number">4</span>;</span><br><span class="line">        <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_MOUSEMOVE:</span><br><span class="line">        hDC = <span class="built_in">GetDC</span>(hWnd);</span><br><span class="line">        <span class="keyword">if</span> (Rect)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">SelectObject</span>(hDC, hPen_white);</span><br><span class="line">            <span class="built_in">Rectangle</span>(hDC, start_x, start_y, end_x, end_y);</span><br><span class="line">            end_x = x, end_y = y;</span><br><span class="line">            <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">ReleaseDC</span>(hWnd, hDC);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">    &#123;</span><br><span class="line">        hDC = <span class="built_in">GetDC</span>(hWnd);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">SelectObject</span>(hDC, hPen_white);</span><br><span class="line">        <span class="built_in">Rectangle</span>(hDC, start_x, start_y, end_x, end_y);</span><br><span class="line">        <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (wParam)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> VK_UP:</span><br><span class="line">            start_y -= <span class="number">50</span>;</span><br><span class="line">            end_y -= <span class="number">50</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VK_DOWN:</span><br><span class="line">            start_y += <span class="number">50</span>;</span><br><span class="line">            end_y += <span class="number">50</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VK_LEFT:</span><br><span class="line">            start_x -= <span class="number">50</span>;</span><br><span class="line">            end_x -= <span class="number">50</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> VK_RIGHT:</span><br><span class="line">            start_x += <span class="number">50</span>;</span><br><span class="line">            end_x += <span class="number">50</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">        <span class="built_in">ReleaseDC</span>(hWnd, hDC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WM_CHAR:</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span> (wParam == <span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">        &#123; </span><br><span class="line">            end_x += increase_x;</span><br><span class="line">            end_y += increase_y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (wParam == <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            end_x -= increase_x;</span><br><span class="line">            end_y -= increase_y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, FALSE);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择:</span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">                <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">                <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            hDC = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">            <span class="built_in">SelectObject</span>(hDC, hPen_black);</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">Rectangle</span>(hDC, start_x, start_y, end_x, end_y);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    为什么我运行之后执行两三次操作就无响应了？？？</span></span><br><span class="line"><span class="comment">    问题是我还不觉得代码哪里有错，Debug不出来呀！！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HDC hDC;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line"></span><br><span class="line">    HPEN hPen_white = (HPEN)<span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">5</span>, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">    HPEN hPen_black = (HPEN)<span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">2</span>, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    HPEN hPen_red = (HPEN)<span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">2</span>, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    HPEN hPen_green = (HPEN)<span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">2</span>, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line">    HPEN hPen_blue = (HPEN)<span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">2</span>, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"></span><br><span class="line">    HBRUSH hBrush_white = (HBRUSH)<span class="built_in">GetStockObject</span>(WHITE_BRUSH);</span><br><span class="line">    HBRUSH hBrush_black = (HBRUSH)<span class="built_in">GetStockObject</span>(BLACK_BRUSH);</span><br><span class="line">    HBRUSH hBrush_red = (HBRUSH)<span class="built_in">CreateSolidBrush</span>(<span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    HBRUSH hBrush_green = (HBRUSH)<span class="built_in">CreateSolidBrush</span>(<span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line">    HBRUSH hBrush_blue = (HBRUSH)<span class="built_in">CreateSolidBrush</span>(<span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> BOOL nLKeyDown = FALSE, nEKeyDown = FALSE, nCKeyDown = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL nRKeyDown = FALSE, nGKeyDown = FALSE, nBKeyDown = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL nLButtonKeyDown = FALSE, nEButtonKeyDown = FALSE, nCButtonKeyDown = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL isLButtonDown = FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> op = <span class="number">0</span>;</span><br><span class="line">    <span class="type">static</span> POINT LeftUp = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;, RightDown = &#123; <span class="number">0</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">        op = nRKeyDown = nGKeyDown = nBKeyDown = FALSE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isLButtonDown) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nLKeyDown) </span><br><span class="line">            &#123;</span><br><span class="line">                op = <span class="number">1</span>;</span><br><span class="line">                nLButtonKeyDown = TRUE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nEKeyDown) </span><br><span class="line">            &#123;</span><br><span class="line">                op = <span class="number">2</span>;</span><br><span class="line">                nEButtonKeyDown = TRUE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nCKeyDown) </span><br><span class="line">            &#123;</span><br><span class="line">                op = <span class="number">3</span>;</span><br><span class="line">                nCButtonKeyDown = TRUE;</span><br><span class="line">            &#125;</span><br><span class="line">            LeftUp = RightDown = &#123; <span class="built_in">LOWORD</span>(lParam), <span class="built_in">HIWORD</span>(lParam) &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        isLButtonDown = TRUE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONUP:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nLButtonKeyDown) </span><br><span class="line">        &#123;</span><br><span class="line">            RightDown = &#123; <span class="built_in">LOWORD</span>(lParam), <span class="built_in">HIWORD</span>(lParam) &#125;;</span><br><span class="line">            nLButtonKeyDown = FALSE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nEButtonKeyDown) </span><br><span class="line">        &#123;</span><br><span class="line">            RightDown = &#123; <span class="built_in">LOWORD</span>(lParam), <span class="built_in">HIWORD</span>(lParam) &#125;;</span><br><span class="line">            nEButtonKeyDown = FALSE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nCButtonKeyDown) </span><br><span class="line">        &#123;</span><br><span class="line">            RightDown = &#123; <span class="built_in">LOWORD</span>(lParam), <span class="built_in">HIWORD</span>(lParam) &#125;;</span><br><span class="line">            nCButtonKeyDown = FALSE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LeftUp.x &gt; RightDown.x || LeftUp.y &gt; RightDown.y)</span><br><span class="line">        &#123;</span><br><span class="line">            POINT Temp = LeftUp;</span><br><span class="line">            LeftUp = RightDown;</span><br><span class="line">            RightDown = Temp;</span><br><span class="line">        &#125;</span><br><span class="line">        isLButtonDown = FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_MOUSEMOVE:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLButtonDown) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nLButtonKeyDown) </span><br><span class="line">            &#123;</span><br><span class="line">                op = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">                RightDown = &#123; <span class="built_in">LOWORD</span>(lParam), <span class="built_in">HIWORD</span>(lParam) &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nEButtonKeyDown) </span><br><span class="line">            &#123;</span><br><span class="line">                op = <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">                RightDown = &#123; <span class="built_in">LOWORD</span>(lParam), <span class="built_in">HIWORD</span>(lParam) &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nCButtonKeyDown) </span><br><span class="line">            &#123;</span><br><span class="line">                op = <span class="number">3</span>;</span><br><span class="line">                <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">                RightDown = &#123; <span class="built_in">LOWORD</span>(lParam), <span class="built_in">HIWORD</span>(lParam) &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (wParam)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">            nLKeyDown = TRUE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">            nEKeyDown = TRUE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">            nCKeyDown = TRUE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">            nRKeyDown = TRUE;</span><br><span class="line">            nGKeyDown = nBKeyDown = FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;G&#x27;</span>:</span><br><span class="line">            nGKeyDown = TRUE;</span><br><span class="line">            nRKeyDown = nBKeyDown = FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">            nBKeyDown = TRUE;</span><br><span class="line">            nRKeyDown = nGKeyDown = FALSE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_KEYUP:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">        nLKeyDown = nLButtonKeyDown = FALSE;</span><br><span class="line">        nEKeyDown = nEButtonKeyDown = FALSE;</span><br><span class="line">        nCKeyDown = nCButtonKeyDown = FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">        <span class="comment">// 分析菜单选择:</span></span><br><span class="line">        <span class="keyword">switch</span> (wmId)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">            <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">            <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">    &#123;</span><br><span class="line">        hDC = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        <span class="built_in">SelectObject</span>(hDC, hPen_black);</span><br><span class="line">        <span class="built_in">SelectObject</span>(hDC, hBrush_white);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (op) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nRKeyDown) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">SelectObject</span>(hDC, hPen_red);</span><br><span class="line">                <span class="built_in">SelectObject</span>(hDC, hBrush_red);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nGKeyDown) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">SelectObject</span>(hDC, hPen_green);</span><br><span class="line">                <span class="built_in">SelectObject</span>(hDC, hBrush_green);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nBKeyDown) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">SelectObject</span>(hDC, hPen_blue);</span><br><span class="line">                <span class="built_in">SelectObject</span>(hDC, hBrush_blue);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">MoveToEx</span>(hDC, LeftUp.x, LeftUp.y, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="built_in">LineTo</span>(hDC, RightDown.x, RightDown.y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Rectangle</span>(hDC, LeftUp.x, LeftUp.y, RightDown.x, RightDown.y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Ellipse</span>(hDC, LeftUp.x, LeftUp.y, RightDown.x, RightDown.y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    失败了，这题我不会写！！！真的好难呀！</span></span><br><span class="line"><span class="comment">    为什么老师都是刚教会我们走路就要我们去参加赛跑呀</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_MAIN_EDIT 101</span></span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> BOOL nRKeyDown = FALSE, nGKeyDown = FALSE, nBKeyDown = FALSE;</span><br><span class="line">    <span class="type">static</span> BOOL KeyDown = FALSE;</span><br><span class="line">    <span class="comment">//static BOOL nBkDown = FALSE;</span></span><br><span class="line"></span><br><span class="line">    HDC hDC;</span><br><span class="line">    HWND hEdit;</span><br><span class="line">    PAINTSTRUCT ps;</span><br><span class="line"></span><br><span class="line">    TCHAR buffer[<span class="number">512</span>] = <span class="string">&quot;这是编辑框的文本内容&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_CTLCOLOREDIT:</span><br><span class="line">    &#123;</span><br><span class="line">        HDC hdc = (HDC)wParam;</span><br><span class="line">        <span class="keyword">if</span> (nRKeyDown)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">SetTextColor</span>(hdc, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nGKeyDown)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">SetTextColor</span>(hdc, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nBKeyDown)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">SetTextColor</span>(hdc, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">SetTextColor</span>(hdc, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">        <span class="comment">//if (nBkDown)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    SetBkColor(hdc, RGB(0, 0, 255));</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">return</span> (INT_PTR)<span class="built_in">CreateSolidBrush</span>(<span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//HWND hEdit = CreateWindowEx(</span></span><br><span class="line">        <span class="comment">//    WS_EX_CLIENTEDGE,</span></span><br><span class="line">        <span class="comment">//    &quot;EDIT&quot;,</span></span><br><span class="line">        <span class="comment">//    NULL,</span></span><br><span class="line">        <span class="comment">//    WS_CHILD | WS_VISIBLE | ES_MULTILINE | ES_LEFT |</span></span><br><span class="line">        <span class="comment">//    WS_VSCROLL | ES_AUTOVSCROLL | ES_AUTOHSCROLL,</span></span><br><span class="line">        <span class="comment">//    0, 0, 1000, 1000,</span></span><br><span class="line">        <span class="comment">//    hWnd,</span></span><br><span class="line">        <span class="comment">//    (HMENU)IDC_MAIN_EDIT,</span></span><br><span class="line">        <span class="comment">//    GetModuleHandle(NULL),</span></span><br><span class="line">        <span class="comment">//    NULL);</span></span><br><span class="line">        <span class="comment">//SetWindowText(hEdit, &quot;这是编辑框的文本内容&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_KEYDOWN:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!KeyDown)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (wParam)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">GetKeyState</span>(VK_CONTROL) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    KeyDown = nRKeyDown = TRUE;</span><br><span class="line">                    nGKeyDown = nBKeyDown = FALSE;</span><br><span class="line">                    <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;G&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">GetKeyState</span>(VK_CONTROL) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    KeyDown = nGKeyDown = TRUE;</span><br><span class="line">                    nRKeyDown = nBKeyDown = FALSE;</span><br><span class="line">                    <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">GetKeyState</span>(VK_CONTROL) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    KeyDown = nBKeyDown = TRUE;</span><br><span class="line">                    nRKeyDown = nGKeyDown = FALSE;</span><br><span class="line">                    <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;P&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">GetKeyState</span>(VK_CONTROL) &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    KeyDown = TRUE;</span><br><span class="line">                    nBKeyDown = nRKeyDown = nGKeyDown = FALSE;</span><br><span class="line">                    <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_KEYUP:</span><br><span class="line">    &#123;</span><br><span class="line">        KeyDown = FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> EM_GETSEL:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择:</span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">                <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">                <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            hDC = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line"></span><br><span class="line">            hEdit = <span class="built_in">CreateWindowEx</span>(</span><br><span class="line">                WS_EX_CLIENTEDGE,</span><br><span class="line">                <span class="string">&quot;EDIT&quot;</span>,</span><br><span class="line">                <span class="literal">NULL</span>,</span><br><span class="line">                WS_CHILD | WS_VISIBLE | ES_MULTILINE | ES_LEFT |</span><br><span class="line">                WS_VSCROLL | ES_AUTOVSCROLL | ES_AUTOHSCROLL,</span><br><span class="line">                <span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>, <span class="number">1000</span>,</span><br><span class="line">                hWnd,</span><br><span class="line">                (HMENU)IDC_MAIN_EDIT,</span><br><span class="line">                <span class="built_in">GetModuleHandle</span>(<span class="literal">NULL</span>),</span><br><span class="line">                <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">SetWindowText</span>(hEdit, buffer);</span><br><span class="line">            <span class="built_in">GetWindowText</span>(hEdit, buffer, <span class="number">512</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strlen</span>(buffer) &gt; <span class="number">256</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">MessageBox</span>(hWnd, <span class="string">&quot;你的输入已经超过了最大存储！&quot;</span>, <span class="string">&quot;消息框实例&quot;</span>, MB_OK);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//DestroyWindow(hEdit);</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> C++桌面应用程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 桌面应用程序 </tag>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS C++桌面应用程序 - 图形文字显示</title>
      <link href="/2023/05/14/0002-01/"/>
      <url>/2023/05/14/0002-01/</url>
      
        <content type="html"><![CDATA[<h1 id="C-桌面应用程序实验1"><a href="#C-桌面应用程序实验1" class="headerlink" title="C++桌面应用程序实验1"></a>C++桌面应用程序实验1</h1><mark class="hl-label green">题目</mark> <div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">第一题</button></li><li class="tab"><button type="button" data-href="#-2">第二题</button></li><li class="tab"><button type="button" data-href="#-3">第三题</button></li><li class="tab"><button type="button" data-href="#-4">第四题</button></li><li class="tab"><button type="button" data-href="#-5">第五题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(一) 编写一个简单的画图程序，要求如下： </span><br><span class="line"></span><br><span class="line">(1) 在例题2.1程序（可以用vc自动生成程序）的基础上，增加画图功能； </span><br><span class="line"></span><br><span class="line">(2) 在窗口函数中处理鼠标左键单击消息。在该消息处理中，绘制一条直线段，要求线段为实线，</span><br><span class="line">    宽度为 2 个像素，颜色为淡蓝色(132, 129, 255)。线段端点为(0, 0)和(100, 100)。</span><br><span class="line">   （注意，首先需要获取到设备环境，然后再进行绘制） </span><br><span class="line"></span><br><span class="line">(3) 认真调试，让程序顺利运行，并且结果正确。 </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(二) 程序二：刷新处理。要求如下： </span><br><span class="line"></span><br><span class="line">(1) 在程序(一)的基础上，完善该程序； </span><br><span class="line"></span><br><span class="line">(2) 大家调整一下窗口大小，是不是发现直线段没了。这是因为，窗口需要刷新。当需要刷新时，</span><br><span class="line">    操作系统会向窗口发送 WM_PAINT 消息，我们需要在 WM_PAINT 消息中，对刷新请求进行处理。</span><br><span class="line"></span><br><span class="line">(3) 怎么处理呢？我们可采用最直接的方法：在 WM_PAINT 消息中，再把直线段绘制一遍（注意，</span><br><span class="line">    在绘制前，也需要先获取到设备环境）。这样，当窗口需要刷新时，该直线段就会重新绘制一遍。</span><br><span class="line"></span><br><span class="line">(4) 认真调试，让程序顺利运行，并且结果正确。（再调整一下窗口，结果正确吗？） </span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(三) 程序三：刷新进阶。要求如下： </span><br><span class="line"></span><br><span class="line">(1) 在上述程序的基础上，改进该程序； </span><br><span class="line"></span><br><span class="line">(2) 定义一个 BOOL 型全局变量 bStatus，初如化其值为 TRUE； </span><br><span class="line"></span><br><span class="line">(3) 在 WM_PAINT 消息处理中，当 bStatus 为 TRUE 时，绘制一个矩形，其左上角在(10, 10)处，</span><br><span class="line">    右下角在(150, 100)处。要求矩形框为虚线，线宽为 1，矩形边框颜色为黑色，</span><br><span class="line">    内部填充色为(100, 167, 201)。当 bStatus 为 FALSE 时，绘制一条直线段，要求线段为实线，</span><br><span class="line">    宽度为 2 个像素，颜色为淡蓝色(132, 129, 255)。线段端点为(0, 0)和(100, 100)。 </span><br><span class="line"></span><br><span class="line">(4) 在 WM_LBUTTONDWON 消息处理中，反转 bStatus 的值，即 bStatus = !bStatus</span><br><span class="line">   （真变假，假变真）。写完后，运行程序。大家有没发现，窗口中的绘制内容并不会随 bStatus 的值</span><br><span class="line">    而更新，我们必需调整窗口大小，窗口中的内容才会更新。即只有请求刷新时，窗口才会刷新重绘。 </span><br><span class="line"></span><br><span class="line">(5) 那有没有无需调整窗口大小请求刷新的方法呢？有的，可通过函数InvalidateRect()，</span><br><span class="line">    大家在 WM_LBUTTONDOWN 消息处理中调用该函数。发现没，现在无需调整窗口大小，</span><br><span class="line">    窗口内容就自动刷新了。函数原型如下： </span><br><span class="line">    BOOL InvalidateRect( </span><br><span class="line">    HWND hWnd，           // 窗口句柄 </span><br><span class="line">    CONST RECT* lpRect,   // 矩形区域 </span><br><span class="line">    BOOL bErase            //是否擦除背景 </span><br><span class="line">    ); </span><br><span class="line">    该函数会放一个 WM_PAINT 消息到消息队列中，因此相当于让窗口变脏重绘。可以这样调用该函数：</span><br><span class="line">    InvalidateRect(hWnd, NULL, TRUE)；关于该函数的具体说明，大家可以去百度。</span><br><span class="line"></span><br><span class="line">(6) 认真调试，让程序顺利运行，并且结果正确。 </span><br><span class="line"></span><br><span class="line">(7) 总结：绘制代码可以放在 WM_PAINT 消息处理中，用于处理刷新。</span><br><span class="line">    而当代码中需要重绘时，可以通过 InvalidateRect()发送一个 WM_PAINT 消息。 </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(四) 做一个窗口，窗口用户区每隔1s颜色变化一次（红-&gt;白-&gt;黑-&gt;蓝）</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(五) 在窗口用户区滚动显示文字“浙江工商大学欢迎你”（效果如“动态文字”程序运行结果）</span><br><span class="line">     要求文字背景为红色，文字为白色。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><mark class="hl-label green">代码</mark> <div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">第一题</button></li><li class="tab"><button type="button" data-href="#-2">第二题</button></li><li class="tab"><button type="button" data-href="#-3">第三题</button></li><li class="tab"><button type="button" data-href="#-4">第四题</button></li><li class="tab"><button type="button" data-href="#-5">第五题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">        <span class="comment">// 分析菜单选择:</span></span><br><span class="line">        <span class="keyword">switch</span> (wmId)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">            <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">            <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">    &#123;</span><br><span class="line">        PAINTSTRUCT ps;</span><br><span class="line">        HDC hdc = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line">        <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">    &#123;</span><br><span class="line">        HDC hdc = <span class="built_in">GetDC</span>(hWnd);</span><br><span class="line">        HPEN hPen = <span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">2</span>, <span class="built_in">RGB</span>(<span class="number">132</span>, <span class="number">129</span>, <span class="number">255</span>));</span><br><span class="line">        HGDIOBJ hPenOld = <span class="built_in">SelectObject</span>(hdc, hPen);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">MoveToEx</span>(hdc, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">LineTo</span>(hdc, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">SelectObject</span>(hdc, hPenOld);</span><br><span class="line">        <span class="built_in">DeleteObject</span>(hPen);</span><br><span class="line">        <span class="built_in">ReleaseDC</span>(hWnd, hdc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BOOL flag = FALSE;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择:</span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">                <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">                <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            PAINTSTRUCT ps;</span><br><span class="line">            HDC hdc = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line"></span><br><span class="line">            HPEN hP = <span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">1</span>, <span class="built_in">RGB</span>(<span class="number">132</span>, <span class="number">129</span>, <span class="number">255</span>));</span><br><span class="line">            HGDIOBJ hPenOld = <span class="built_in">SelectObject</span>(hdc, hP);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="built_in">MoveToEx</span>(hdc, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="built_in">LineTo</span>(hdc, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">SelectObject</span>(hdc, hPenOld);</span><br><span class="line">            <span class="built_in">DeleteObject</span>(hP);</span><br><span class="line">            <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">        &#123;</span><br><span class="line">            flag = TRUE;</span><br><span class="line">            <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BOOL bStatus = TRUE;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">        <span class="comment">// 分析菜单选择:</span></span><br><span class="line">        <span class="keyword">switch</span> (wmId)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">            <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">            <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">    &#123;</span><br><span class="line">        PAINTSTRUCT ps;</span><br><span class="line">        HDC hdc = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line"></span><br><span class="line">        HPEN hP1 = <span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">1</span>, <span class="built_in">RGB</span>(<span class="number">132</span>, <span class="number">129</span>, <span class="number">255</span>));</span><br><span class="line">        HPEN hP2 = <span class="built_in">CreatePen</span>(PS_DASH, <span class="number">0</span>, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        HGDIOBJ hPenOld = <span class="built_in">SelectObject</span>(hdc, hP1);</span><br><span class="line"></span><br><span class="line">        HBRUSH hBr1 = <span class="built_in">CreateSolidBrush</span>(<span class="built_in">RGB</span>(<span class="number">100</span>, <span class="number">167</span>, <span class="number">201</span>));</span><br><span class="line">        HGDIOBJ hBrOld = <span class="built_in">SelectObject</span>(hdc, hBr1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bStatus) &#123;</span><br><span class="line">            hPenOld = <span class="built_in">SelectObject</span>(hdc, hP2);</span><br><span class="line">            hBrOld = <span class="built_in">SelectObject</span>(hdc, hBr1);</span><br><span class="line">            <span class="built_in">Rectangle</span>(hdc, <span class="number">10</span>, <span class="number">10</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            hPenOld = <span class="built_in">SelectObject</span>(hdc, hP1);</span><br><span class="line">            <span class="built_in">MoveToEx</span>(hdc, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="built_in">LineTo</span>(hdc, <span class="number">100</span>, <span class="number">100</span>);            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">SelectObject</span>(hdc, hPenOld);</span><br><span class="line">        <span class="built_in">DeleteObject</span>(hP1);</span><br><span class="line">        <span class="built_in">DeleteObject</span>(hP2);</span><br><span class="line">        <span class="built_in">SelectObject</span>(hdc, hBrOld);</span><br><span class="line">        <span class="built_in">DeleteObject</span>(hBr1);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line">    &#123;</span><br><span class="line">        HDC hdc = <span class="built_in">GetDC</span>(hWnd);</span><br><span class="line">        bStatus = !bStatus;</span><br><span class="line">        <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">        <span class="built_in">ReleaseDC</span>(hWnd, hdc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> TIMER_ID = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> Index = <span class="number">0</span>;</span><br><span class="line">COLORREF colors[] = &#123; <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">        <span class="built_in">SetTimer</span>(hWnd, TIMER_ID, <span class="number">1000</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_TIMER:</span><br><span class="line">        Index = (Index + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">        <span class="built_in">SetClassLongPtr</span>(hWnd, GCLP_HBRBACKGROUND, </span><br><span class="line">                        (LONG)<span class="built_in">CreateSolidBrush</span>(colors[Index]));</span><br><span class="line">        <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">        <span class="comment">// 分析菜单选择:</span></span><br><span class="line">        <span class="keyword">switch</span> (wmId)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">            <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">            <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">    &#123;</span><br><span class="line">        PAINTSTRUCT ps;</span><br><span class="line">        HDC hdc = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line">        <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> wmId = <span class="built_in">LOWORD</span>(wParam);</span><br><span class="line">        <span class="comment">// 分析菜单选择:</span></span><br><span class="line">        <span class="keyword">switch</span> (wmId)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">            <span class="built_in">DialogBox</span>(hInst, <span class="built_in">MAKEINTRESOURCE</span>(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">            <span class="built_in">DestroyWindow</span>(hWnd);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">    &#123;</span><br><span class="line">        PAINTSTRUCT ps;</span><br><span class="line">        HDC hdc = <span class="built_in">BeginPaint</span>(hWnd, &amp;ps);</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line"></span><br><span class="line">        HBRUSH hBr = <span class="built_in">CreateSolidBrush</span>(<span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        HGDIOBJ hBrOld = <span class="built_in">SelectObject</span>(hdc, hBr);</span><br><span class="line">        HFONT hFont = <span class="built_in">CreateFont</span>(<span class="number">50</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>, FW_NORMAL, FALSE, FALSE,</span><br><span class="line">            FALSE, DEFAULT_CHARSET,</span><br><span class="line">            OUT_DEFAULT_PRECIS,</span><br><span class="line">            CLIP_DEFAULT_PRECIS,</span><br><span class="line">            DEFAULT_QUALITY,</span><br><span class="line">            DEFAULT_PITCH | FF_SWISS,</span><br><span class="line">            <span class="string">&quot;Arial&quot;</span>); <span class="comment">// 创建一个新的字体对象</span></span><br><span class="line">        HFONT hOldFont = (HFONT)<span class="built_in">SelectObject</span>(hdc, hFont);</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> CHAR* textbuf[] =</span><br><span class="line">        &#123; <span class="string">&quot;浙江工商大学欢迎你    &quot;</span> ,</span><br><span class="line">            <span class="string">&quot;江工商大学欢迎你    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;工商大学欢迎你    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;商大学欢迎你    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;大学欢迎你    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;学欢迎你    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;欢迎你    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;迎你    &quot;</span>,</span><br><span class="line">            <span class="string">&quot;你    &quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">SetBkColor</span>(hdc, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="built_in">SetTextColor</span>(hdc, <span class="built_in">RGB</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; <span class="number">9</span>; x++) &#123;</span><br><span class="line">            <span class="built_in">TextOut</span>(hdc, <span class="number">0</span>, <span class="number">0</span>, textbuf[x], <span class="built_in">lstrlen</span>(textbuf[x]));</span><br><span class="line">            <span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line">            <span class="built_in">InvalidateRect</span>(hWnd, <span class="literal">NULL</span>, TRUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">SelectObject</span>(hdc, hOldFont); <span class="comment">// 恢复原来的字体</span></span><br><span class="line">        <span class="built_in">DeleteObject</span>(hFont); <span class="comment">// 删除新创建的字体对象</span></span><br><span class="line">        <span class="built_in">SelectObject</span>(hdc, hBrOld);</span><br><span class="line">        <span class="built_in">DeleteObject</span>(hBr);</span><br><span class="line">        <span class="built_in">EndPaint</span>(hWnd, &amp;ps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        <span class="built_in">PostQuitMessage</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">DefWindowProc</span>(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> C++桌面应用程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> 桌面应用程序 </tag>
            
            <tag> Visual Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理实验4</title>
      <link href="/2023/05/14/0004-04/"/>
      <url>/2023/05/14/0004-04/</url>
      
        <content type="html"><![CDATA[<mark class="hl-label green">图像下载链接</mark> <p><a href="https://coleduck.cn/annex/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/TestFigures.7z">data.zip</a></p><h2 id="4-A-基于区域的图像分割"><a href="#4-A-基于区域的图像分割" class="headerlink" title="4-A  基于区域的图像分割"></a>4-A  基于区域的图像分割</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打 开 TestFigures 目录中的 BirdFlying.png, 将其转换成灰度图像, 以cv2.adaptiveThreshold()对其进行自</span><br><span class="line">适应阈值化分割，该函数的用法参见如下（或阅读示例代码），理解各个参数的意义，且尝试不同的参数所得的结果。</span><br><span class="line"></span><br><span class="line">2. 打开 TestFigures 目录中的 BirdFlying.png，以 cv2.floodFill()对其进行漫水填充分割，该函数的用法参见如</span><br><span class="line">下（或阅读示例代码），理解各个参数的意义，且尝试不同的参数所得的结果。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">from</span> ipdb <span class="keyword">import</span> set_trace</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flood_fill</span>(<span class="params">src</span>):</span><br><span class="line">    mask = np.zeros((src.shape[<span class="number">0</span>]+<span class="number">2</span>, src.shape[<span class="number">1</span>] +<span class="number">2</span>), dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    实现漫水填充: cv2.floodFill(im, mask, seed_point, new_val, low_diff, up_diff, flags)</span></span><br><span class="line"><span class="string">    im--8位或浮点输入图像;  mask -- 单通道8位掩膜图像, 长宽需比输入图像大两个像素，算法不填充掩膜非零像素区域</span></span><br><span class="line"><span class="string">    seed_point -- 种子点;  new_val -- 像素点填充后被染色的值</span></span><br><span class="line"><span class="string">    low_diff -- 待加入的像素与当前观察像素之间的颜色的最大负差值</span></span><br><span class="line"><span class="string">    up_diff -- 待加入的像素与当前观察像素之间的颜色的最大正差值</span></span><br><span class="line"><span class="string">    flags -- 操作标志符, 低八位用于控制算法的连通性，可取4(默认4连通)或者8，高8位建议 FLOODFILL_FIXED_RANGE, 此时考虑当前像素与种子像素之间的差，否则将考虑当前像素与其相邻像素的差</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    newVal = (<span class="number">200</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    lowV   = (<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>)</span><br><span class="line">    upV    = (<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">    seed   = (<span class="number">650</span>, <span class="number">220</span>)</span><br><span class="line">    flags  = <span class="number">4</span>|cv2.FLOODFILL_FIXED_RANGE</span><br><span class="line">    ret, bin_im, mask, rect = cv2.floodFill(src.copy(), mask, seed, newVal, lowV, upV, flags)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bin_im</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adapt_thresh</span>(<span class="params">src</span>):</span><br><span class="line">    gray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    cv2.adaptiveThreshold(src, maxValue, adaptiveMethod, thresholdType, blockSize, C)</span></span><br><span class="line"><span class="string">    src -- 输入的灰度图像； maxValue -- 二值化后图像中的较大灰度值</span></span><br><span class="line"><span class="string">    adaptiveMethod -- 自适应阈值算法, 可选 ADAPTIVE_THRESH_MEAN_C 或 ADAPTIVE_THRESH_GAUSSIAN_C</span></span><br><span class="line"><span class="string">    thresholdType -- 二值化方法，只能选 THRESH_BINARY 或 THRESH_BINARY_INV, 其它如THRESH_TRUNC等似乎无法选</span></span><br><span class="line"><span class="string">    blockSize -- 区域大小，取奇数, 需多试几次；  C -- 常数，每个区域计算出的阈值的基础上在减去这个常数作为这个区域的最终阈值</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    bin_im = cv2.adaptiveThreshold(gray, <span class="number">255</span>, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, <span class="number">301</span>, <span class="number">5</span>) </span><br><span class="line">    </span><br><span class="line">    se = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="number">7</span>, <span class="number">7</span>), (-<span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line">    bin_im = cv2.morphologyEx(bin_im, cv2.MORPH_OPEN, se)   <span class="comment"># 开运算去除噪声</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bin_im</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    image = cv2.imread(<span class="string">&#x27;D:/Code/Python/Vscode/TestFigures/BirdFly.png&#x27;</span>)  </span><br><span class="line">    </span><br><span class="line">    bin_adapt = adapt_thresh(image)   <span class="comment"># 1</span></span><br><span class="line">    bin_flood = flood_fill(image)     <span class="comment"># 2</span></span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">131</span>), plt.title(<span class="string">&#x27;original&#x27;</span>)</span><br><span class="line">    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">132</span>), plt.title(<span class="string">&#x27;adapt_thresh&#x27;</span>)</span><br><span class="line">    plt.imshow(bin_adapt, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">133</span>), plt.title(<span class="string">&#x27;flood_fill&#x27;</span>)</span><br><span class="line">    plt.imshow(cv2.cvtColor(bin_flood, cv2.COLOR_BGR2RGB))</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="4-B-练习图像分离、截取、转换等函数的使用"><a href="#4-B-练习图像分离、截取、转换等函数的使用" class="headerlink" title="4-B  练习图像分离、截取、转换等函数的使用"></a>4-B  练习图像分离、截取、转换等函数的使用</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开 linux.jpg（保存在 TestFigures 目录），使用 cvtColor()转换成灰度图像，使用 threshold()对图像作阈</span><br><span class="line">值化处理，以 erode()函数对图像作腐蚀运算，dilate()函数对图像作膨胀运算，分别显示结果。</span><br><span class="line"></span><br><span class="line">2. 打开 j_outnoise.png，使用 cvtColor()转换成灰度图像，使用 threshold()对图像作阈值化处理，使用 </span><br><span class="line">morphologyEx()对图像作开运算，观察开运算的结果。</span><br><span class="line"></span><br><span class="line">3. 打开 j_innoise.png，使用 cvtColor()转换成灰度图像，使用 threshold()对图像作阈值化处理，使用 </span><br><span class="line">morphologyEx()对图像作闭运算，观察闭运算的结果。函数用法请参见课件。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">二值形态学处理</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">from</span> ipdb <span class="keyword">import</span> set_trace</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dilate_erode</span>(<span class="params">image</span>):</span><br><span class="line">    se = np.ones((<span class="number">3</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    ret_thr, dst = cv2.threshold(src, thr, maxVal, type)</span></span><br><span class="line"><span class="string">    src -- 灰度图像, thr -- 阈值,  maxVal -- 大于阈值的像素给出的值, type -- 使用的算法类型, cv2.THRESH_BINARY, cv2.THRESH_BINARY_INV, ...</span></span><br><span class="line"><span class="string">    # 返回值 ret_thr--得到的阈值, dst -- 结果图像</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    ret_thr, bin_im = cv2.threshold(image, <span class="number">160</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    dilate 操作, dst = cv2.dilate(src, se, iterations), opencv的膨胀操作, 每个通道独立处理, 可对单个通道执行多次递归操作</span></span><br><span class="line"><span class="string">    src -- 源图像, se -- 结构元素, iterations -- 操作次数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    dil_im = cv2.dilate(bin_im, se, iterations = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    腐蚀: dst = cv2.erode(src, kernel, iterations)</span></span><br><span class="line"><span class="string">    参数基本同 dilate()</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    ero_im = cv2.erode(dil_im, se, iterations = <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 显示比较</span></span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>); plt.title(<span class="string">&#x27;original&#x27;</span>)</span><br><span class="line">    plt.imshow(image, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>); plt.title(<span class="string">&#x27;dilated&#x27;</span>)</span><br><span class="line">    plt.imshow(dil_im, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>); plt.title(<span class="string">&#x27;eroded&#x27;</span>)</span><br><span class="line">    plt.imshow(ero_im, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_close</span>(<span class="params">im2open, im2close</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># cv2.getStructuringElement()--返回指定形状和尺寸的结构元素</span></span><br><span class="line">    se = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="number">7</span>, <span class="number">7</span>), (-<span class="number">1</span>, -<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    cv2.morphologyEx(src, op, kernel)</span></span><br><span class="line"><span class="string">    op -- cv2.MORPH_OPEN, 开运算； cv2.MORPH_CLOSE--闭运算</span></span><br><span class="line"><span class="string">    开运算可消除外部噪音, 闭运算可消除内部噪声</span></span><br><span class="line"><span class="string">    kernel -- 结构元素</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    ret_thr, bin_im = cv2.threshold(im2open, <span class="number">160</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">    bin_opened = cv2.morphologyEx(bin_im, cv2.MORPH_OPEN, se)</span><br><span class="line"></span><br><span class="line">    ret_thr, bin_im = cv2.threshold(im2close, <span class="number">160</span>, <span class="number">255</span>, cv2.THRESH_BINARY)    </span><br><span class="line">    bin_closed = cv2.morphologyEx(bin_im, cv2.MORPH_CLOSE, se)</span><br><span class="line">    </span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>); plt.title(<span class="string">&#x27;to open&#x27;</span>)</span><br><span class="line">    plt.imshow(im2open, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>); plt.title(<span class="string">&#x27;to close&#x27;</span>)</span><br><span class="line">    plt.imshow(im2close, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>); plt.title(<span class="string">&#x27;opened&#x27;</span>)</span><br><span class="line">    plt.imshow(bin_opened, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>); plt.title(<span class="string">&#x27;closed&#x27;</span>)</span><br><span class="line">    plt.imshow(bin_closed, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1</span></span><br><span class="line">    image = cv2.imread(<span class="string">&#x27;D:/Code/Python/Vscode/TestFigures/linux.jpg&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    dilate_erode(image)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2 , 3</span></span><br><span class="line">    im2open = cv2.imread(<span class="string">&#x27;D:/Code/Python/Vscode/TestFigures/j_outnoise.png&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    im2close = cv2.imread(<span class="string">&#x27;D:/Code/Python/Vscode/TestFigures/j_innoise.png&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    open_close(im2open, im2close)</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="4-C-图像颜色变换"><a href="#4-C-图像颜色变换" class="headerlink" title="4-C  图像颜色变换"></a>4-C  图像颜色变换</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开 TestFigures 目录下的 j_pattern.png 文件，使用合适的形态学操作得到如下图的结果</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">from</span> ipdb <span class="keyword">import</span> set_trace</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradient_proc</span>(<span class="params">image</span>):</span><br><span class="line">    ret_thr, bin_im = cv2.threshold(image, <span class="number">160</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</span><br><span class="line">    se = cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="number">5</span>, <span class="number">5</span>), (-<span class="number">1</span>, -<span class="number">1</span>))  </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    梯度运算: cv2.morphologyEx(src, op, kernel)</span></span><br><span class="line"><span class="string">    op -- cv2.MORPH_GRADIENT, 梯度运算， 结果为: 梯度 = 膨胀(src) - 腐蚀(src)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    bin_grad = cv2.morphologyEx(bin_im, cv2.MORPH_GRADIENT, se)</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>); plt.title(<span class="string">&#x27;open and close&#x27;</span>)</span><br><span class="line">    plt.imshow(image, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>); plt.title(<span class="string">&#x27;gradient&#x27;</span>)</span><br><span class="line">    plt.imshow(bin_grad, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    </span><br><span class="line">    im = cv2.imread(<span class="string">&#x27;D:/Code/Python/Vscode/TestFigures/j_pattern.png&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    gradient_proc(im)</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> 数字图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> OpenCV </tag>
            
            <tag> Visual Studio Code </tag>
            
            <tag> 数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理实验3</title>
      <link href="/2023/05/14/0004-03/"/>
      <url>/2023/05/14/0004-03/</url>
      
        <content type="html"><![CDATA[<h2 id="3-A-变换域图像处理"><a href="#3-A-变换域图像处理" class="headerlink" title="3-A  变换域图像处理"></a>3-A  变换域图像处理</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">仔细阅读 code_demo\傅里叶变换\目录下的代码 dft_demo.py，编写程序实现：</span><br><span class="line"></span><br><span class="line">1. 打开 Lenna.jpg，取绿色分量图像左上角为(100,100)，大小为 64*64 的一个正方形区域，作傅立变</span><br><span class="line">换，且计算频谱，屏幕打印输出0 &lt;= u, v &lt;= 10范围内的频谱值。傅立叶变换和频谱计算的参考函数下：</span><br><span class="line"></span><br><span class="line">2. 打开 Lenna.jpg，取绿色分量图像作二维 DFT 变换，将频率坐标的原点移到图像中心位置，按如下形</span><br><span class="line">式设置一个 mask，作低通滤波，观察截止范围为 16、32、48 等对逆变换图像的影响。部分参考代码如下</span><br><span class="line"></span><br><span class="line">3. 打开 Lenna.jpg，取绿色分量图像左上角为(100,100)，大小为 8*8 的一个正方形区域，作傅立叶变</span><br><span class="line">换，且计算频谱，根据频谱的中心对称特征，找出分别与位置(2，3)，(3，2)，(3，5)频谱相等的坐标位置。</span><br><span class="line"></span><br><span class="line">4. 编写代码由 Lenna 局部图像(LennaFace.png)的相位谱与 Flower 局部图像（Flower_1x1.png）的</span><br><span class="line">幅度谱混合产生合成图像（结果可参见如下的合成图像）。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 1 题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># img = cv2.imread(&#x27;D:/FilesCenter/Miku/picture/92.jpg&#x27;)</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;D:/FilesCenter/Miku/image/lenna.jpg&#x27;</span>)</span><br><span class="line">img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">green_channel = img[:,:,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">cropped_image = green_channel[<span class="number">100</span>:<span class="number">164</span>, <span class="number">100</span>:<span class="number">164</span>]</span><br><span class="line">f = np.fft.fft2(cropped_image)</span><br><span class="line">fshift = np.fft.fftshift(f)</span><br><span class="line">magnitude_spectrum = <span class="number">20</span>*np.log(np.<span class="built_in">abs</span>(fshift))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(magnitude_spectrum[i, j], end = <span class="string">&#x27;  &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">131</span>), plt.title(<span class="string">&#x27;original image&#x27;</span>)</span><br><span class="line">plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">132</span>), plt.title(<span class="string">&#x27;G[100:164, 100:164]&#x27;</span>) </span><br><span class="line">plt.imshow(cropped_image, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">133</span>), plt.title(<span class="string">&#x27;with fft shift&#x27;</span>) </span><br><span class="line">plt.imshow(magnitude_spectrum, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 2 题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = np.fft.fft2(green_channel)</span><br><span class="line">fshift = np.fft.fftshift(f)</span><br><span class="line"></span><br><span class="line">rows, cols = green_channel.shape</span><br><span class="line">crow, ccol = rows//<span class="number">2</span> , cols//<span class="number">2</span></span><br><span class="line"></span><br><span class="line">mask1 = np.zeros((rows,cols),np.uint8)</span><br><span class="line">mask1[crow-<span class="number">16</span>:crow+<span class="number">16</span>, ccol-<span class="number">16</span>:ccol+<span class="number">16</span>] = <span class="number">1</span></span><br><span class="line">mask2 = np.zeros((rows,cols),np.uint8)</span><br><span class="line">mask2[crow-<span class="number">32</span>:crow+<span class="number">32</span>, ccol-<span class="number">32</span>:ccol+<span class="number">32</span>] = <span class="number">1</span></span><br><span class="line">mask3 = np.zeros((rows,cols),np.uint8)</span><br><span class="line">mask3[crow-<span class="number">48</span>:crow+<span class="number">48</span>, ccol-<span class="number">48</span>:ccol+<span class="number">48</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">fshift1 = fshift*mask1</span><br><span class="line">fshift2 = fshift*mask2</span><br><span class="line">fshift3 = fshift*mask3</span><br><span class="line"></span><br><span class="line">f_ishift1 = np.fft.ifftshift(fshift1)</span><br><span class="line">img_back1 = np.fft.ifft2(f_ishift1)</span><br><span class="line">img_back1 = np.<span class="built_in">abs</span>(img_back1)</span><br><span class="line">f_ishift2 = np.fft.ifftshift(fshift2)</span><br><span class="line">img_back2 = np.fft.ifft2(f_ishift2)</span><br><span class="line">img_back2 = np.<span class="built_in">abs</span>(img_back2)</span><br><span class="line">f_ishift3 = np.fft.ifftshift(fshift3)</span><br><span class="line">img_back3 = np.fft.ifft2(f_ishift3)</span><br><span class="line">img_back3 = np.<span class="built_in">abs</span>(img_back3)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">221</span>), plt.title(<span class="string">&#x27;original image&#x27;</span>), plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">222</span>), plt.title(<span class="string">&#x27;16&#x27;</span>), plt.imshow(img_back1, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">223</span>), plt.title(<span class="string">&#x27;32&#x27;</span>), plt.imshow(img_back2, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.subplot(<span class="number">224</span>), plt.title(<span class="string">&#x27;48&#x27;</span>), plt.imshow(img_back3, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 3 题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取左上角为(100,100)，大小为 8*8 的一个正方形区域</span></span><br><span class="line">roi = green_channel[<span class="number">100</span>:<span class="number">108</span>, <span class="number">100</span>:<span class="number">108</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 傅立叶变换</span></span><br><span class="line">f = np.fft.fft2(roi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算频谱</span></span><br><span class="line">f_abs = np.<span class="built_in">abs</span>(f)</span><br><span class="line">f_abs_shifted = np.fft.fftshift(f_abs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据频谱的中心对称特征，找出分别与位置 (2，3)，(3，2)，(3，5) 频谱相等的坐标位置</span></span><br><span class="line">rows, cols = f_abs_shifted.shape</span><br><span class="line"></span><br><span class="line">pos_1 = (rows - <span class="number">2</span>, cols - <span class="number">3</span>)</span><br><span class="line">pos_2 = (rows - <span class="number">3</span>, cols - <span class="number">2</span>)</span><br><span class="line">pos_3 = (rows - <span class="number">3</span>, cols - <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">value_1 = f_abs_shifted[pos_1[<span class="number">0</span>], pos_1[<span class="number">1</span>]]</span><br><span class="line">value_2 = f_abs_shifted[pos_2[<span class="number">0</span>], pos_2[<span class="number">1</span>]]</span><br><span class="line">value_3 = f_abs_shifted[pos_3[<span class="number">0</span>], pos_3[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;位置 (&#123;&#125;, &#123;&#125;) 频谱值为 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(pos_1[<span class="number">0</span>], pos_1[<span class="number">1</span>], value_1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;位置 (&#123;&#125;, &#123;&#125;) 频谱值为 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(pos_2[<span class="number">0</span>], pos_2[<span class="number">1</span>], value_2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;位置 (&#123;&#125;, &#123;&#125;) 频谱值为 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(pos_3[<span class="number">0</span>], pos_3[<span class="number">1</span>], value_3))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 4 题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dft_merge</span>(<span class="params">im_A, im_B</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    输入图像A和B，产生一幅新的图像，以B的幅度谱作为新图像的幅度谱，A图像的相位谱作为新图像的相位谱</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    dft_A = cv2.dft(np.float32(im_A), flags=cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line">    dft_B = cv2.dft(np.float32(im_B), flags=cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line"></span><br><span class="line">    dft_mag_A = cv2.magnitude(dft_A[:,:,<span class="number">0</span>], dft_A[:,:,<span class="number">1</span>])</span><br><span class="line">    dft_mag_B = cv2.magnitude(dft_B[:,:,<span class="number">0</span>], dft_B[:,:,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    dft_X = dft_A</span><br><span class="line"></span><br><span class="line">    rows, cols = im_A.shape</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    注意: 由三角关系， i = m_b*sin(\alpha_a), r = m_b*cos(\alpha_a)</span></span><br><span class="line"><span class="string">    sin(\alpha_a) = i_a/m_a, cos(\alpha_a) = r_a/m_a</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, rows):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, cols):</span><br><span class="line">            dft_X[y, x, <span class="number">0</span>] = dft_mag_B[y,x]*dft_A[y,x,<span class="number">0</span>]/(dft_mag_A[y,x]+<span class="number">0.005</span>)</span><br><span class="line">            dft_X[y, x, <span class="number">1</span>] = dft_mag_B[y,x]*dft_A[y,x,<span class="number">1</span>]/(dft_mag_A[y,x]+<span class="number">0.005</span>)    </span><br><span class="line">   </span><br><span class="line">    im_i = cv2.idft(dft_X)</span><br><span class="line">    img_X = cv2.magnitude(im_i[:,:,<span class="number">0</span>], im_i[:,:,<span class="number">1</span>])</span><br><span class="line">    plt.subplot(<span class="number">131</span>), plt.title(<span class="string">&#x27;A image&#x27;</span>)</span><br><span class="line">    plt.imshow(im_A, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.subplot(<span class="number">132</span>),  plt.title(<span class="string">&#x27;B image&#x27;</span>)</span><br><span class="line">    plt.imshow(im_B, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.subplot(<span class="number">133</span>), plt.title(<span class="string">&#x27;merged&#x27;</span>)</span><br><span class="line">    plt.imshow(img_X, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">lenna = cv2.imread(<span class="string">&#x27;D:/FilesCenter/Miku/image/LennaFace.png&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">flower = cv2.imread(<span class="string">&#x27;D:/FilesCenter/Miku/image/Flower_1x1.png&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">dft_merge(lenna, flower)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-B-边缘检测"><a href="#3-B-边缘检测" class="headerlink" title="3-B  边缘检测"></a>3-B  边缘检测</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">仔细阅读 code_demo\图像分割_边缘角点\目录下的代码 edge_demo.py，编写程序实现：</span><br><span class="line"></span><br><span class="line">1. 打开 Flower.png，用 cv2.cvtColor()将其转换成灰度图像，以 Canny()函数对图像提取边缘，显</span><br><span class="line">示边缘图像。结合 PPT 内容，理解各个参数的意义。</span><br><span class="line">2. 在 1 的基础上，以 Canny()函数返回的结果图像为输入，进一步使用 findContours()函数寻找图像</span><br><span class="line">中的轮廓，且以 drawContours()绘制轮廓。上述两个函数的用法也可参见 </span><br><span class="line">https://docs.opencv.org/4.x/d4/d73/tutorial_py_contours_begin.html</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 1 题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># img = cv2.imread(&#x27;D:/FilesCenter/Miku/image/b.jpg&#x27;)</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;D:/FilesCenter/Miku/image/Flower.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取边缘</span></span><br><span class="line">edges = cv2.Canny(gray, <span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示边缘图像</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;Edges&#x27;</span>, edges)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 2 题</span></span><br><span class="line"></span><br><span class="line">contours, hierarchy = cv2.findContours(edges, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">cv2.drawContours(img, contours, -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">3</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Image&#x27;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="3-C-直线检测"><a href="#3-C-直线检测" class="headerlink" title="3-C  直线检测"></a>3-C  直线检测</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开 TestFigures 目录中的 Lane.jpg，将其转换成灰度图像，以 Canny()函数获取二值化的边缘图</span><br><span class="line">像，以 cv2.HoughLinesP()提取直线，该函数的用法参见如下，结合 PPT 内容，理解各个参数的意义，</span><br><span class="line">且尝试不同的参数所得的结果。</span><br><span class="line"></span><br><span class="line"># cv2.HoughLinesP(bim, rho, theta, threshold, lines=None, minLineLength, maxLineGap)</span><br><span class="line"># bim -- 输入的二值图像，推荐使用 canny 边缘检测的结果图像</span><br><span class="line"># rho -- 线段以像素为单位的距离精度</span><br><span class="line"># theta -- 线段以弧度为单位的角度精度</span><br><span class="line"># threshod -- 累加平面的阈值参数, 超过阈值才被检测出线段, 值越大, 意味着检出的线段越长, 检出</span><br><span class="line">的线段个数越少;</span><br><span class="line"># minLineLength -- 线段以像素为单位的最小长度，</span><br><span class="line"># maxLineGap -- 同一方向上两条线段判定为一条线段的最大允许间隔.</span><br><span class="line"># 返回以端点表示的</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 1 题</span></span><br><span class="line"></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;D:/FilesCenter/Miku/image/Lane.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">edges = cv2.Canny(gray, <span class="number">50</span>, <span class="number">150</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Edges&#x27;</span>, edges)</span><br><span class="line">lines = cv2.HoughLinesP(edges, <span class="number">1</span>, pi/<span class="number">180</span>, <span class="number">50</span>, minLineLength=<span class="number">35</span>, maxLineGap=<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    x1, y1, x2, y2 = line[<span class="number">0</span>]</span><br><span class="line">    cv2.line(image, (x1, y1), (x2, y2), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">4</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Image&#x27;</span>, image)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> 数字图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> OpenCV </tag>
            
            <tag> Visual Studio Code </tag>
            
            <tag> 数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理实验2</title>
      <link href="/2023/05/14/0004-02/"/>
      <url>/2023/05/14/0004-02/</url>
      
        <content type="html"><![CDATA[<h2 id="2-A-练习空间域图像处理函数的使用"><a href="#2-A-练习空间域图像处理函数的使用" class="headerlink" title="2-A  练习空间域图像处理函数的使用"></a>2-A  练习空间域图像处理函数的使用</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开图像 Lenna.jpg，分别使用 OpenCV 的平滑滤波函数：blur()，GaussianBlur()和 medianBlur()对打开</span><br><span class="line">的图像进行平滑处理，调整各个函数的参数，通过 imshow()函数观察参数对结果的影响（注：请阅读 PPT 或自行百</span><br><span class="line">度上述函数的用法）。</span><br><span class="line"></span><br><span class="line">2. 打开图像 Lenna.jpg，使用 OpenCV 的 Sobel 算子分别计算 X 和 Y 方向的梯度，使用 imshow()显示 X 和 </span><br><span class="line">Y 两个方向的梯度图像（注：可参阅 ftp 中 code_demo的 Sobel.py），通过调整参数，观察参数对结果的影响；</span><br><span class="line"></span><br><span class="line">3. 打开图像 Lenna.jpg，使用 OpenCV 的 Laplacian 算子对图像进行边缘计算，通过调整参数，观察参数对结果</span><br><span class="line">的影响（注：请百度 opencv 的 Laplacian()函数用法）。</span><br><span class="line"></span><br><span class="line">4. 形如: ker_emb = np.array(([-4, -2, 0], [-1, 1, 1], [0, 2, 4]), dtype=&quot;float32&quot;)定义一个自定义</span><br><span class="line">的滤波核，使用 OpenCV 的 filter2D()对图像进行滤波处理，观察结果图像。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">im_path = <span class="string">&#x27;D:/FilesCenter/Miku/picture/48.png&#x27;</span></span><br><span class="line">im = cv2.imread(im_path)</span><br><span class="line">im_gray = cv2.imread(im_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 1 题</span></span><br><span class="line"></span><br><span class="line">dst_1_blur = cv2.blur(im, (<span class="number">7</span>, <span class="number">7</span>))  </span><br><span class="line">dst_1_medianBlur = cv2.medianBlur(im, <span class="number">5</span>)</span><br><span class="line">dst_1_gaussianBlur = cv2.GaussianBlur(im, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line">cv2.imshow(<span class="string">u&#x27;original&#x27;</span>, im)                         <span class="comment"># 原图像</span></span><br><span class="line">cv2.imshow(<span class="string">u&#x27;blur&#x27;</span>,  dst_1_blur)                    <span class="comment"># 均值滤波</span></span><br><span class="line">cv2.imshow(<span class="string">u&#x27;medianBlur&#x27;</span>,  dst_1_medianBlur)        <span class="comment"># 中值滤波</span></span><br><span class="line">cv2.imshow(<span class="string">u&#x27;gaussianBlur&#x27;</span>,  dst_1_gaussianBlur)    <span class="comment"># 高斯滤波</span></span><br><span class="line">cv2.waitKey()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 2 题</span></span><br><span class="line"></span><br><span class="line">sobelX = cv2.Sobel(im_gray, cv2.CV_64F, <span class="number">1</span>, <span class="number">0</span>, ksize = <span class="number">3</span>)</span><br><span class="line">sobelY = cv2.Sobel(im_gray, cv2.CV_64F, <span class="number">0</span>, <span class="number">1</span>, ksize = <span class="number">3</span>)</span><br><span class="line">absX = cv2.convertScaleAbs(sobelX)</span><br><span class="line">absY = cv2.convertScaleAbs(sobelY)</span><br><span class="line">sobelXY = cv2.addWeighted(absX, <span class="number">0.5</span>, absY, <span class="number">0.5</span>, <span class="number">0</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;sobel X&#x27;</span>, absX)         <span class="comment"># X方向的 Sobel算子滤波</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;sobel Y&#x27;</span>, absY)         <span class="comment"># Y方向的 Sobel算子滤波</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;sobel XY&#x27;</span>, sobelXY)     <span class="comment"># XY合成方向的 Sobel算子滤波</span></span><br><span class="line">cv2.waitKey()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 3 题</span></span><br><span class="line"></span><br><span class="line">lap_color = cv2.Laplacian(im, cv2.CV_16S, ksize = <span class="number">3</span>)</span><br><span class="line">lap_gray = cv2.Laplacian(im_gray, cv2.CV_16S, ksize = <span class="number">3</span>)</span><br><span class="line">dst_3_color = cv2.convertScaleAbs(lap_color)</span><br><span class="line">dst_3_gray = cv2.convertScaleAbs(lap_gray)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;laplacian_color&#x27;</span>, dst_3_color)      <span class="comment"># 彩色图像的 laplacian算子滤波</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;laplacian_gray&#x27;</span>, dst_3_gray)        <span class="comment"># 灰度图像的 laplacian算子滤波</span></span><br><span class="line">cv2.waitKey()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 4 题</span></span><br><span class="line"></span><br><span class="line">ker_4 = np.array(([-<span class="number">4</span>, -<span class="number">2</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]), dtype=<span class="string">&quot;float32&quot;</span>)</span><br><span class="line">dst_4 = cv2.filter2D(im, -<span class="number">1</span>, ker_4)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;original&#x27;</span>, im)          <span class="comment"># 原图像</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;dst_emboss&#x27;</span>,  dst_4)    <span class="comment"># 自定义滤波(类似浮雕效果)</span></span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-B-图像直方图均衡化处理"><a href="#2-B-图像直方图均衡化处理" class="headerlink" title="2-B  图像直方图均衡化处理"></a>2-B  图像直方图均衡化处理</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开 Lenna.jpg，取 Blue 分量图像，使用 equalizeHist()对图像作直方图均衡化处理；</span><br><span class="line"></span><br><span class="line">2. 分别以窗体的形式显示均衡化处理之前和之后的直方图（显示请参考以下代码）</span><br><span class="line">   </span><br><span class="line">   &#x27;&#x27;&#x27;</span><br><span class="line">   matplot 的方法：plt.hist(x, bins, range, density, ...)</span><br><span class="line">   x -- 数组，bins -- bin 的数目, range -- bin 的下限和上限, ...</span><br><span class="line">   im.raver() -- 多维数组转一维数组 </span><br><span class="line">   &#x27;&#x27;&#x27;</span><br><span class="line">   plt.hist(im[:,:,0].ravel(), 256, [0, 256])</span><br><span class="line">   plt.show()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">im_path = <span class="string">&#x27;D:/FilesCenter/Miku/picture/48.png&#x27;</span></span><br><span class="line">im = cv2.imread(im_path)</span><br><span class="line"></span><br><span class="line">im_b = im[:,:,<span class="number">0</span>]</span><br><span class="line">dst = cv2.equalizeHist(im_b)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;original_B&#x27;</span>, im_b)      <span class="comment"># 原图像的B通道分量</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;after solve&#x27;</span>, dst)      <span class="comment"># 全局均衡化后</span></span><br><span class="line"></span><br><span class="line">plt.hist(im_b.ravel(), <span class="number">256</span>, [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">cv2.waitKey()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-C-图像直方图均衡化处理"><a href="#2-C-图像直方图均衡化处理" class="headerlink" title="2-C  图像直方图均衡化处理"></a>2-C  图像直方图均衡化处理</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开 Lenna.jpg，取绿色分量图像，使用 equalizeHist()对绿色分量图像作直方图均衡化处理；</span><br><span class="line"></span><br><span class="line">2. 以均衡化处理后的绿色分量图像的直方图为目标直方图，对 Lenna 的蓝色分量图像作直方图规定化，分别显示原</span><br><span class="line">   始和规定化处理后的蓝色分量图像，及各自的直方图（可参考可参阅 ftp 中 code_demo 的 303_hist_match.</span><br><span class="line">   py）。</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">im_path = <span class="string">&#x27;D:/FilesCenter/Miku/picture/48.png&#x27;</span></span><br><span class="line">im = cv2.imread(im_path)</span><br><span class="line"></span><br><span class="line">im_b = im[:,:,<span class="number">0</span>]</span><br><span class="line">im_g = im[:,:,<span class="number">1</span>]</span><br><span class="line">im_g_equalizeHist = cv2.equalizeHist(im_g)</span><br><span class="line">source = im_b</span><br><span class="line">target = im_g_equalizeHist</span><br><span class="line"></span><br><span class="line">s_hist = cv2.calcHist([source], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">t_hist = cv2.calcHist([target], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">s_hist = s_hist/source.shape[<span class="number">0</span>]/source.shape[<span class="number">1</span>]</span><br><span class="line">t_hist = t_hist/target.shape[<span class="number">0</span>]/target.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算积聚直方图形成映射函数（目标和源）</span></span><br><span class="line">t_map = t_hist.copy()</span><br><span class="line">accu_h  = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    accu_h += t_hist[i]</span><br><span class="line">    t_map[i] = accu_h</span><br><span class="line"></span><br><span class="line">s_map = s_hist.copy()</span><br><span class="line">accu_h  = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    accu_h += s_hist[i]</span><br><span class="line">    s_map[i] = accu_h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定映射关系</span></span><br><span class="line">index_map = np.zeros([<span class="number">256</span>, <span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    temp_h = np.ones([<span class="number">256</span>, <span class="number">1</span>])*s_map[i]</span><br><span class="line">    temp_h = np.fabs(temp_h - t_map)     <span class="comment"># 需取绝对值</span></span><br><span class="line">    index = np.argmin(temp_h)    <span class="comment"># 求 temp_h 中最小值所在位置的索引</span></span><br><span class="line">    index_map[i] = index </span><br><span class="line"></span><br><span class="line">out_im = index_map[source]</span><br><span class="line">out_im = out_im.astype(np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示比较</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;source&#x27;</span>)</span><br><span class="line">plt.imshow(im_b, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;after matching&#x27;</span>)</span><br><span class="line">plt.imshow(out_im, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;hist of source&#x27;</span>)</span><br><span class="line">plt.hist(im_b.ravel(), <span class="number">256</span>, [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;hist of matching&#x27;</span>)</span><br><span class="line">plt.hist(out_im.ravel(), <span class="number">256</span>, [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-D-图像直方图均衡化算法"><a href="#2-D-图像直方图均衡化算法" class="headerlink" title="2-D  图像直方图均衡化算法"></a>2-D  图像直方图均衡化算法</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如下为一个 100x100，灰度级为 0--15 的灰度图像的直方图，请编写程序实现直方图均衡化算法，且以画表方式给出均衡化处理前后的灰度映射关系（注二行表格，第一行为输入灰度级，第二行为均衡化以后对应的灰度级）。</span><br><span class="line"></span><br><span class="line">灰度|0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15</span><br><span class="line">:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:</span><br><span class="line">n 2 57 704 1979 2452 1501 1128 1196 505 316 105 40 12 2 1 0</span><br><span class="line"></span><br><span class="line">注：可将上述直方图定义成一个 16x1 的 numpy 数组，按 PPT 的算法步骤实现均衡化处理（即：归一化、求积聚直</span><br><span class="line">方图、乘最大灰度形成映射）。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">hist = np.asarray([<span class="number">2</span>,<span class="number">57</span>,<span class="number">704</span>,<span class="number">1979</span>,<span class="number">2452</span>,<span class="number">1501</span>,<span class="number">1128</span>,<span class="number">1196</span>,<span class="number">505</span>,<span class="number">316</span>,<span class="number">105</span>,<span class="number">40</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line">hist_temp = np.asarray([<span class="number">2</span>,<span class="number">57</span>,<span class="number">704</span>,<span class="number">1979</span>,<span class="number">2452</span>,<span class="number">1501</span>,<span class="number">1128</span>,<span class="number">1196</span>,<span class="number">505</span>,<span class="number">316</span>,<span class="number">105</span>,<span class="number">40</span>,<span class="number">15</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">tot = np.<span class="built_in">sum</span>(hist)</span><br><span class="line">hist = np.divide(hist, tot)  <span class="comment"># 归一化后的直方图</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">16</span>):</span><br><span class="line">    hist[i] += hist[i - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">hist_map = np.asarray([<span class="number">0.0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)])  <span class="comment"># 定义映射后的直方图</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    index = <span class="built_in">round</span>(hist[i] * <span class="number">15</span>)</span><br><span class="line">    hist_map[index] += hist[i]</span><br><span class="line"></span><br><span class="line">hist_res = [<span class="built_in">int</span>(hist_map[i] * tot) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line"></span><br><span class="line">res = [hist_temp, hist_res]  <span class="comment"># 分别是原始的数据 n ，和均衡化处理后的数目 n</span></span><br><span class="line">col = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">16</span>))</span><br><span class="line">row = [<span class="string">&#x27;n1&#x27;</span>, <span class="string">&#x27;n2&#x27;</span>]</span><br><span class="line">fig, ax =plt.subplots(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">ax.axis(<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">ax.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">ax.table(cellText = res, colLabels = col, rowLabels = row, loc = <span class="string">&quot;center&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> 数字图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> OpenCV </tag>
            
            <tag> Visual Studio Code </tag>
            
            <tag> 数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字图像处理实验1</title>
      <link href="/2023/05/14/0004-01/"/>
      <url>/2023/05/14/0004-01/</url>
      
        <content type="html"><![CDATA[<h2 id="1-A-设置-Python-OpenCV-VS-Code-开发环境"><a href="#1-A-设置-Python-OpenCV-VS-Code-开发环境" class="headerlink" title="1-A  设置 Python + OpenCV + VS Code 开发环境"></a>1-A  设置 Python + OpenCV + VS Code 开发环境</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 参考提供的视频“Python-Open-环境.mp4”，设置 Python+OpenCV+VS Code 开发环境；</span><br><span class="line"></span><br><span class="line">2. 在新建的.py 文件中输入如下代码，观察是否能运行成功。</span><br><span class="line">    import cv2</span><br><span class="line">    im = cv2.imread(&#x27;Flower.png&#x27;)</span><br><span class="line">    cv2.imshow(&#x27;The 1st Window&#x27;, im)</span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    cv2.destroyAllWindows(&#x27;The 1st Window&#x27;)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-B-练习图像分离、截取、转换等函数的使用"><a href="#1-B-练习图像分离、截取、转换等函数的使用" class="headerlink" title="1-B  练习图像分离、截取、转换等函数的使用"></a>1-B  练习图像分离、截取、转换等函数的使用</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开彩色图像 lenna.jpg，使用 cv2.split()分离红色、绿色和蓝色通道，分别用 imshow() 显示；使用 </span><br><span class="line">   cv2.merge()将分离后的三通道图像合并成一幅彩色图像，尝试不同的顺序时的结果：</span><br><span class="line">        im = cv2.imread(‘lenna.jpg’)</span><br><span class="line">        b,g,r = cv2.split(im)</span><br><span class="line">        ...</span><br><span class="line">        xim = cv2.merge([b,g,r])</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">2. 使用 cvtColor()将彩色图像转换成灰度图像，与上述通过分离获得的灰度图像作比较，观察与哪个分量图像</span><br><span class="line">   接近（cvtColor()的用法请自行百度）。</span><br><span class="line">        xim = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">3. 打开图像 lenna.jpg，保存到矩阵 im，使用如下形式的定义，截取从第 20 行至第 180 行,第 30 列至 </span><br><span class="line">   220 列的区域图像，且使用 cv2.imwrite(‘FileName’, rim) 保存区域图像（imwrite()的用法请自行百</span><br><span class="line">   度）</span><br><span class="line">        rim = im[20:180, 30:220, :];</span><br><span class="line">        cv2.imwrite(...)</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">4. 打开图像 lenna.jpg，使用 cv2.flip()产生水平镜像、垂直倒影和对角翻转图像，且加以显示（flip()的用</span><br><span class="line">   法请自行百度）</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">im = cv2.imread(<span class="string">&#x27;image/Miku.jpg&#x27;</span>)</span><br><span class="line">b, g, r = cv2.split(im)</span><br><span class="line">xim = cv2.merge([b, g, r])</span><br><span class="line">cv2.imshow(<span class="string">&#x27;The R image Window&#x27;</span>, r)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;The G image Window&#x27;</span>, g)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;The B image Window&#x27;</span>, b)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;The merge image Window&#x27;</span>, xim)</span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">im_toGray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY);</span><br><span class="line"><span class="comment"># 两幅图像作差分，图像越黑说明差异越小</span></span><br><span class="line">diff_b = cv2.absdiff(im_toGray, b)</span><br><span class="line">cv2.imshow(<span class="string">&quot;the difference of B&quot;</span>, diff_b)</span><br><span class="line">diff_g = cv2.absdiff(im_toGray, g)</span><br><span class="line">cv2.imshow(<span class="string">&quot;the difference of G&quot;</span>, diff_g)</span><br><span class="line">diff_r = cv2.absdiff(im_toGray, r)</span><br><span class="line">cv2.imshow(<span class="string">&quot;the difference of R&quot;</span>, diff_r)</span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">rim = im[<span class="number">20</span>:<span class="number">180</span>, <span class="number">30</span>:<span class="number">220</span>, :];</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;image/Miku_part.jpg&#x27;</span>, rim)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;begining&#x27;</span>, im)</span><br><span class="line">h_im = cv2.flip(im, <span class="number">1</span>) <span class="comment">#图像水平翻转</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;flip horizontal&#x27;</span>, h_im)</span><br><span class="line">v_im = cv2.flip(im, <span class="number">0</span>) <span class="comment">#图像垂直翻转</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;flip vertically&#x27;</span>, v_im)</span><br><span class="line">v_h_im = cv2.flip(im, -<span class="number">1</span>) <span class="comment">#图像垂直和水平翻转</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;flip diagonally&#x27;</span>, v_h_im)</span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-C-图像颜色变换"><a href="#1-C-图像颜色变换" class="headerlink" title="1-C  图像颜色变换"></a>1-C  图像颜色变换</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">打开图像 Flower.png，将左上角坐标（400，360）、右下角（670，660）矩形范围内的颜色求其补色（即 </span><br><span class="line">Red、Green、Blue 分别计算为 255-Red，255-Green，255-Blue）产生形如下图的结果；</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">im = cv2.imread(<span class="string">&#x27;image/Miku.jpg&#x27;</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Begining&#x27;</span>, im)</span><br><span class="line"></span><br><span class="line">height, width, temp = im.shape</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>, <span class="number">670</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">360</span>, <span class="number">660</span>):</span><br><span class="line">        im[i, j][<span class="number">0</span>] = <span class="number">255</span> - im[i, j][<span class="number">0</span>]</span><br><span class="line">        im[i, j][<span class="number">1</span>] = <span class="number">255</span> - im[i, j][<span class="number">1</span>]</span><br><span class="line">        im[i, j][<span class="number">2</span>] = <span class="number">255</span> - im[i, j][<span class="number">2</span>]</span><br><span class="line">cv2.imshow(<span class="string">&#x27;After&#x27;</span>, im)</span><br><span class="line"></span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-D-计算和显示直方图"><a href="#1-D-计算和显示直方图" class="headerlink" title="1-D  计算和显示直方图"></a>1-D  计算和显示直方图</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开图像 lenna.jpg，使用 cvtColor()转换成灰度图像，使用 cv2.calcHist()函数计算灰度图像的直方</span><br><span class="line">   图，以屏显打印输出的形式显示具有 100-128 灰度值的像素数目（calcHist()的用法可参考 FTP 中的 </span><br><span class="line">   demo 代码 301_calc_hist.py）；</span><br><span class="line"></span><br><span class="line">2. 通过设置 cv2.calcHist()的参数，计算 binwidth 等于 8、16 的直方图;</span><br><span class="line"></span><br><span class="line">3. 设计算所得的直方图保存在数组：xhist, 搜索查找具有最多像素数目的灰度级.</span><br><span class="line"></span><br><span class="line">4. 使用 matplotlib 包画出如下的直方图（可参考 FTP 中的 demo 代码302_plot_hist.py）</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;image/Miku.jpg&#x27;</span>)</span><br><span class="line">gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">hist = cv2.calcHist([gray], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The number of pixels with gray values between 100 and 128 is:&quot;</span>, <span class="built_in">sum</span>(hist[<span class="number">100</span>:<span class="number">129</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">hist8 = cv2.calcHist([gray], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">32</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">hist16 = cv2.calcHist([gray], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">16</span>], [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">max_gray = hist.argmax()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The gray level with the most pixels is:&quot;</span>, max_gray)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line">plt.figure()</span><br><span class="line">plt.subplot(<span class="number">221</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Original Image&quot;</span>)</span><br><span class="line">plt.imshow(image[:,:,::-<span class="number">1</span>])</span><br><span class="line">plt.subplot(<span class="number">222</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Gray Image&quot;</span>)</span><br><span class="line">plt.imshow(gray, cmap=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">plt.subplot(<span class="number">223</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Histogram with binwidth 8&quot;</span>)</span><br><span class="line">plt.plot(hist8)</span><br><span class="line">plt.subplot(<span class="number">224</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Histogram with binwidth 16&quot;</span>)</span><br><span class="line">plt.plot(hist16)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-E-图像统计处理"><a href="#1-E-图像统计处理" class="headerlink" title="1-E  图像统计处理"></a>1-E  图像统计处理</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开 Flower.png，使用 minMaxLoc()统计绿色分量图像的最大值和最小值，print 输出；</span><br><span class="line"></span><br><span class="line">2. 使用 meanStdDev()统计上述绿色分量图像的均值和标准差，且 print 输出；</span><br><span class="line"></span><br><span class="line">3. 请自行百度上述 cv2.minMaxLoc()和 cv2. meanStdDev()函数的使用。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">im = cv2.imread(<span class="string">&#x27;image/Miku.jpg&#x27;</span>)</span><br><span class="line">b, g, r = cv2.split(im)</span><br><span class="line">min_val, max_val, min_indx, max_indx = cv2.minMaxLoc(g)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;最小值为：&#x27;</span>, min_val, <span class="string">&#x27;最大值为：&#x27;</span>, max_val)</span><br><span class="line"></span><br><span class="line">height, width = g.shape</span><br><span class="line">ave = cv2.mean(g)</span><br><span class="line">ave, stddv = cv2.meanStdDev(g)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;均值为：&#x27;</span>, ave, <span class="string">&#x27;标准差为：&#x27;</span>, stddv)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-F-图像缩放处理"><a href="#1-F-图像缩放处理" class="headerlink" title="1-F  图像缩放处理"></a>1-F  图像缩放处理</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 打开 Lenna.jpg，使用 cv2.resize()分别将图像放大到原图像的 2 倍和 3 倍，比较插值分别设成 cv2.</span><br><span class="line">   INTER_LINEAR，cv2.INTER_CUBIC 和 cv2.LANCZOS4时的视觉表现；</span><br><span class="line"></span><br><span class="line">2. 使用 cv2.resize()将图像缩小到原图像的 0.5 倍，比较插值分别设成cv2.INTER_LINEAR，cv2.</span><br><span class="line">   INTER_CUBIC 和 cv2.LANCZOS4 时的视觉表现。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">im = cv2.imread(<span class="string">&#x27;image/Miku.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">im_x_linear = cv2.resize(im, dsize=<span class="literal">None</span>, fx=<span class="number">2</span>, fy=<span class="number">2</span>, interpolation=cv2.INTER_LINEAR)</span><br><span class="line">im_x_cubic = cv2.resize(im, dsize=<span class="literal">None</span>, fx=<span class="number">2</span>, fy=<span class="number">2</span>, interpolation=cv2.INTER_CUBIC)</span><br><span class="line">im_x_lanczos4 = cv2.resize(im, dsize=<span class="literal">None</span>, fx=<span class="number">2</span>, fy=<span class="number">2</span>, interpolation=cv2.INTER_LANCZOS4)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;2x linear&#x27;</span>, im_x_linear)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;2x cubic&#x27;</span>, im_x_cubic)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;2x lanczos4&#x27;</span>, im_x_lanczos4)</span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">im_y_linear = cv2.resize(im, dsize=<span class="literal">None</span>, fx=<span class="number">3</span>, fy=<span class="number">3</span>, interpolation=cv2.INTER_LINEAR)</span><br><span class="line">im_y_cubic = cv2.resize(im, dsize=<span class="literal">None</span>, fx=<span class="number">3</span>, fy=<span class="number">3</span>, interpolation=cv2.INTER_CUBIC)</span><br><span class="line">im_y_lanczos4 = cv2.resize(im, dsize=<span class="literal">None</span>, fx=<span class="number">3</span>, fy=<span class="number">3</span>, interpolation=cv2.INTER_LANCZOS4)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;3x linear&#x27;</span>, im_y_linear)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;3x cubic&#x27;</span>, im_y_cubic)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;3x lanczos4&#x27;</span>, im_y_lanczos4)</span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line">im_z_linear = cv2.resize(im, dsize=<span class="literal">None</span>, fx=<span class="number">0.5</span>, fy=<span class="number">0.5</span>, interpolation=cv2.INTER_LINEAR)</span><br><span class="line">im_z_cubic = cv2.resize(im, dsize=<span class="literal">None</span>, fx=<span class="number">0.5</span>, fy=<span class="number">0.5</span>, interpolation=cv2.INTER_CUBIC)</span><br><span class="line">im_z_lanczos4 = cv2.resize(im, dsize=<span class="literal">None</span>, fx=<span class="number">0.5</span>, fy=<span class="number">0.5</span>, interpolation=cv2.INTER_LANCZOS4)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;0.5x linear&#x27;</span>, im_z_linear)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;0.5x cubic&#x27;</span>, im_z_cubic)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;0.5x lanczos4&#x27;</span>, im_z_lanczos4)</span><br><span class="line">cv2.waitKey()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> 数字图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
            <tag> OpenCV </tag>
            
            <tag> Visual Studio Code </tag>
            
            <tag> 数字图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文本分类预测实验</title>
      <link href="/2023/05/14/0003-10/"/>
      <url>/2023/05/14/0003-10/</url>
      
        <content type="html"><![CDATA[<h1 id="Python与数据科学实验8"><a href="#Python与数据科学实验8" class="headerlink" title="Python与数据科学实验8"></a>Python与数据科学实验8</h1><h2 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 训练集</span><br><span class="line">训练集包含30000条商品评论，存放于文件&#x27;review_train.csv&#x27;中。每一行代表一条商品评论，第一列是评论的分值</span><br><span class="line">`label`，表示该顾客对于当前商品的打分，从1分到5分。第二列是评论的标题， 第三列是评论的具体内容。训练数据集</span><br><span class="line">使用pandas读入后(pd.read_csv(&#x27;review_train.csv&#x27;, header=None, names=[&#x27;评分&#x27;, &#x27;标题&#x27;, &#x27;评论&#x27;]))</span><br><span class="line"></span><br><span class="line">(2) 测试集</span><br><span class="line">另有10000条未知评分的测试数据，保存在&#x27;review_test.csv&#x27;文件中。每一行仅给定评论的标题和评论内容（pd.</span><br><span class="line">read_csv(&#x27;review_test.csv&#x27;, header=None, names=[&#x27;标题&#x27;, &#x27;评论&#x27;])），而每条商品的评分未知，待建模识别。</span><br></pre></td></tr></table></figure><mark class="hl-label green">下载链接</mark> <p><a href="https://coleduck.cn/annex/Python%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AE%9E%E9%AA%8C/Lab8.7z">data.zip</a></p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 设计文本的特征向量，具备一定的特征工程能力。</span><br><span class="line">(2) 利用机器学习分类算法，基于训练集构建分类器模型。</span><br><span class="line">(3) 进而将构建好的分类器模型应用于测试集，给出全体未知标签样本的分类结果，即预测文本数据所属的类别(1-5分)。</span><br><span class="line">(4) 鼓励使用神经网络模型，并与传统模型进行对比。</span><br></pre></td></tr></table></figure><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 可使用pandas.read_csv(FileName)读取文件，并返回DataFrame进行后续处理</span><br><span class="line">(2) 需从每条文本中提取特征，表示为固定长度的特征向量。特征向量设计思路不限，例如，可尝试使用tf-idf等常见文本</span><br><span class="line">    特征提取算法。Tf-idf参考网址：https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfVectorizer.html</span><br><span class="line">(3) 具体的机器学习算法不限，以预测效果最佳为目标，使用sklearn.metrics.f1_score的average=micro模式</span><br><span class="line">    （https://scikit-learn.org/stable/modules/generated/sklearn.metrics.f1_score.html）；体会多分类模</span><br><span class="line">    型的评价和2分类评价的不同， 思考如何处理不平衡的数据集（imbalanced dataset）。可以尝试多种学习模型的集成。</span><br><span class="line"></span><br><span class="line">注意：在调试模型的过程中，可以分出训练集中的80%用作训练，用剩下的20% 验证模型的好坏。也可以使用交叉验证等手段。</span><br></pre></td></tr></table></figure><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 将预测结果保存在名为“pred.txt”的文本文件中，内容为10000行， 每一行只有一个1-5分之间的分值，代表你的算法对测试数据的预测结果。预测数据顺序须与测试集“review_test.csv”中的样本顺序保持一致。</span><br><span class="line">(2) 将结果文件“pred.txt”，以及源代码以附件形式提交至学习通。另请注意：只需提交结果文件“pred.txt”和源代码，</span><br><span class="line">无需提交本次实验报告文件。</span><br><span class="line">(3) 本次实验成绩评定采用竞赛机制，即计算每位同学预测结果的f1_score的分数高低，然后由高到低进行排序评定相应的</span><br><span class="line">实验成绩。</span><br></pre></td></tr></table></figure><h2 id="我的做法"><a href="#我的做法" class="headerlink" title="我的做法"></a>我的做法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这次的预测结果准确率普遍偏低。。。</span></span><br><span class="line"><span class="comment"># 随机森林分类模型的准确度: 0.4538888888888889</span></span><br><span class="line"><span class="comment"># KNN分类模型的准确度: 0.3662222222222222</span></span><br><span class="line"><span class="comment"># 逻辑回归分类模型的准确度: 0.44866666666666666</span></span><br><span class="line"><span class="comment"># 朴素贝叶斯模型的准确度:0.4018888888888889</span></span><br><span class="line"><span class="comment"># 支持向量机模型的准确度:0.4441111111111111</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"><span class="keyword">from</span> scipy.sparse <span class="keyword">import</span> coo_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> feature_extraction</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> CountVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfTransformer</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> neighbors</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> make_pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> MultinomialNB</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> sklearn.multiclass <span class="keyword">import</span> OneVsRestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.multiclass <span class="keyword">import</span> OneVsOneClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------第一步 读取文件--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pd.read_csv(&#x27;review_train.csv&#x27;, header=None, names=[&#x27;评分&#x27;, &#x27;标题&#x27;, &#x27;评论&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第八次/review_train.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    labels = []</span><br><span class="line">    contents = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        labels.append(<span class="built_in">int</span>(row[<span class="number">0</span>]))  <span class="comment"># 0-好评 1-差评</span></span><br><span class="line">        contents.append((row[<span class="number">1</span>] + <span class="string">&#x27; &#x27;</span>) * <span class="number">10</span> + row[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">length = <span class="built_in">len</span>(labels)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第八次/review_test.csv&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    contents_predata = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> reader:</span><br><span class="line">        contents.append((row[<span class="number">0</span>] + <span class="string">&#x27; &#x27;</span>) * <span class="number">10</span> + row[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(labels[:5])</span></span><br><span class="line"><span class="comment"># print(contents[:5])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------第二步 数据预处理--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建停用词list</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stopwordslist</span>(<span class="params">filepath</span>):</span><br><span class="line">    stopwords = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line">    <span class="keyword">return</span> stopwords</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 对句子进行分词</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">seg_sentence</span>(<span class="params">sentence</span>):</span><br><span class="line">    sentence_seged = jieba.cut(sentence.strip())</span><br><span class="line">    stopwords = stopwordslist(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第八次/stopwords_English.txt&#x27;</span>)  <span class="comment"># 这里加载停用词的路径</span></span><br><span class="line">    outstr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> sentence_seged:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stopwords:</span><br><span class="line">            <span class="keyword">if</span> word != <span class="string">&#x27;\t&#x27;</span>:</span><br><span class="line">                outstr += word</span><br><span class="line">                outstr += <span class="string">&quot; &quot;</span></span><br><span class="line">    <span class="keyword">return</span> outstr</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这里的返回值是字符串</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(contents)):</span><br><span class="line">    contents[index] = seg_sentence(contents[index])  </span><br><span class="line"><span class="comment"># for index in range(len(contents_predata)):</span></span><br><span class="line"><span class="comment">#     contents_predata[index] = seg_sentence(contents_predata[index])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># X_data = []</span></span><br><span class="line"><span class="comment"># for text in contents:</span></span><br><span class="line"><span class="comment">#     keywords = jieba.analyse.extract_tags(text, topK=5, withWeight=False, allowPOS=())</span></span><br><span class="line"><span class="comment">#     X_data.append(keywords)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># X_pred = []</span></span><br><span class="line"><span class="comment"># for text in contents_predata:</span></span><br><span class="line"><span class="comment">#     keywords = jieba.analyse.extract_tags(text, topK=5, withWeight=False, allowPOS=())</span></span><br><span class="line"><span class="comment">#     X_pred.append(keywords)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # PCA降至 10 维</span></span><br><span class="line"><span class="comment"># pca = PCA(n_components=10, svd_solver=&#x27;auto&#x27;).fit(X_data)</span></span><br><span class="line"><span class="comment"># pca = PCA(n_components=10, svd_solver=&#x27;auto&#x27;).fit(X_data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # print(labels[:5])</span></span><br><span class="line"><span class="comment"># # print(contents[:5])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文本中的词语转换为词频矩阵 矩阵元素a[i][j] 表示j词在i类文本下的词频</span></span><br><span class="line">vectorizer = CountVectorizer(min_df=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该类会统计每个词语的tf-idf权值</span></span><br><span class="line">transformer = TfidfTransformer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个fit_transform是计算tf-idf 第二个fit_transform是将文本转为词频矩阵</span></span><br><span class="line">tfidf = transformer.fit_transform(vectorizer.fit_transform(contents))</span><br><span class="line"><span class="comment"># for n in tfidf[:5]:</span></span><br><span class="line"><span class="comment">#     print(n)</span></span><br><span class="line"><span class="comment"># print(type(tfidf))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 获取词袋模型中的所有词语</span></span><br><span class="line"><span class="comment"># word = vectorizer.get_feature_names()</span></span><br><span class="line"><span class="comment"># for n in word:</span></span><br><span class="line"><span class="comment">#     print(n)</span></span><br><span class="line"><span class="comment"># print(&quot;单词数量:&quot;, len(word))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将tf-idf矩阵抽取出来，元素w[i][j]表示j词在i类文本中的tf-idf权重</span></span><br><span class="line">X = coo_matrix(tfidf, dtype=np.float32).toarray()  <span class="comment"># 稀疏矩阵 注意float</span></span><br><span class="line"><span class="comment"># print(X.shape)</span></span><br><span class="line"><span class="comment"># print(X[:10])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------第三步 数据划分--------------------------------</span></span><br><span class="line"><span class="comment"># 使用 train_test_split 分割 X y 列表</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X[:length], labels, test_size=<span class="number">0.3</span>, random_state=<span class="number">3939</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------第四步 机器学习分类--------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># KNN Classifier K近邻算法</span></span><br><span class="line">Knn = KNeighborsClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Logistic Regression Classifier 逻辑回归</span></span><br><span class="line">Lr = LogisticRegression(C=<span class="number">1.0</span>, tol=<span class="number">1e-6</span>, multi_class=<span class="string">&#x27;multinomial&#x27;</span>, solver=<span class="string">&#x27;newton-cg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Random Forest Classifier 随机森林</span></span><br><span class="line">Rf = RandomForestClassifier(n_estimators=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SVM Classifier 支持向量机</span></span><br><span class="line">Svm = SGDClassifier()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Naive Bayes 朴素贝叶斯</span></span><br><span class="line">Nb = MultinomialNB(alpha=<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机森林分类方法模型</span></span><br><span class="line">Rf.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;随机森林分类模型的准确度:&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(Rf.score(X_test, y_test)))</span><br><span class="line">Rf_pred = Rf.predict(X[length:])</span><br><span class="line">Rf_list = Rf_pred.tolist()</span><br><span class="line"><span class="comment"># print(classification_report(y_test, Lr_pred))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># KNN分类方法模型</span></span><br><span class="line">Knn.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;KNN分类模型的准确度:&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(Knn.score(X_test, y_test)))</span><br><span class="line">Knn_pred = Knn.predict(X[length:])</span><br><span class="line">Knn_list = Knn_pred.tolist()</span><br><span class="line"><span class="comment"># print(classification_report(y_test, Lr_pred))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑回归分类方法模型</span></span><br><span class="line">Lr.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;逻辑回归分类模型的准确度:&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(Lr.score(X_test, y_test)))</span><br><span class="line">Lr_pred = Lr.predict(X[length:])</span><br><span class="line">Lr_list = Lr_pred.tolist()</span><br><span class="line"><span class="comment"># print(classification_report(y_test, Lr_pred))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 朴素贝叶斯算法</span></span><br><span class="line"><span class="comment"># pipe = make_pipeline(vectorizer, Nb)</span></span><br><span class="line">Nb.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;朴素贝叶斯模型的准确度:&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(Nb.score(X_test, y_test)))</span><br><span class="line">Nb_pred = Nb.predict(X[length:])</span><br><span class="line">Nb_list = Nb_pred.tolist()</span><br><span class="line"><span class="comment"># print(classification_report(y_test, Nb_pred))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持向量机</span></span><br><span class="line"><span class="comment"># pipe = make_pipeline(tfidf, Svm)</span></span><br><span class="line">Svm.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;支持向量机模型的准确度:&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(Svm.score(X_test, y_test)))</span><br><span class="line">Svm_pred = Svm.predict(X[length:])</span><br><span class="line">Svm_list = Svm_pred.tolist()</span><br><span class="line"><span class="comment"># print(classification_report(y_test, Svm_pred))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;D:/Code/Python/Vscode/python与数据科学/第八次/result-Rf.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> Rf_list:</span><br><span class="line">    f.write(<span class="built_in">str</span>(i))</span><br><span class="line">    f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;D:/Code/Python/Vscode/python与数据科学/第八次/result-Knn.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> Knn_list:</span><br><span class="line">    f.write(<span class="built_in">str</span>(i))</span><br><span class="line">    f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;D:/Code/Python/Vscode/python与数据科学/第八次/result-Lr.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> Lr_list:</span><br><span class="line">    f.write(<span class="built_in">str</span>(i))</span><br><span class="line">    f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;D:/Code/Python/Vscode/python与数据科学/第八次/result-Nb.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> Nb_list:</span><br><span class="line">    f.write(<span class="built_in">str</span>(i))</span><br><span class="line">    f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;D:/Code/Python/Vscode/python与数据科学/第八次/result-Svm.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> Svm_list:</span><br><span class="line">    f.write(<span class="built_in">str</span>(i))</span><br><span class="line">    f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python与数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据科学 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蛋白质功能预测实验</title>
      <link href="/2023/05/14/0003-09/"/>
      <url>/2023/05/14/0003-09/</url>
      
        <content type="html"><![CDATA[<h1 id="Python与数据科学实验7"><a href="#Python与数据科学实验7" class="headerlink" title="Python与数据科学实验7"></a>Python与数据科学实验7</h1><h2 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1)训练集 : 该训练数据集包含1616条蛋白质序列，存放于文件“ProSeqs_Train.txt”。文件中每一行若以空格隔开，</span><br><span class="line">内容分别是序列ID、类标号以及蛋白质的氨基酸序列。</span><br><span class="line">(2)测试集 : 另有186条未知标签的测试数据，保存在“ProSeqs_Test.txt”文件中。每一行仅给定序列ID及其氨基酸序</span><br><span class="line">列，而每条序列的类别(1: 具有某种功能，0: 不具有该功能)未知，待建模识别。</span><br></pre></td></tr></table></figure><mark class="hl-label green">下载链接</mark> <p><a href="https://coleduck.cn/annex/Python%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AE%9E%E9%AA%8C/Lab7.7z">data.zip</a></p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本次实验目标如下：</span><br><span class="line">(1) 设计样本的特征向量，具备一定的特征工程能力。</span><br><span class="line">(2) 利用机器学习分类算法，基于训练集构建分类器模型；</span><br><span class="line">(3) 进而将构建好的分类器模型应用于测试集，给出全体未知标签样本的分类结果，即预测氨基酸序列为功能蛋白或非功能蛋白。</span><br></pre></td></tr></table></figure><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 具体的机器学习算法不限，以预测效果最佳为目标，追求F1 score越高越好；可以尝试多种学习模型的集成。</span><br><span class="line">(2) 需从每条序列中提取特征，表示为固定长度的向量。特征向量设计思路不限，可尝试如下：</span><br><span class="line">    (a) 氨基酸组分，即每种氨基酸在蛋白质序列中的比例，可以表示为一个20维的向量。</span><br><span class="line">    (b) 可以间隔取子序列，计算各个子序列的氨基酸组分。比如将某条蛋白质序列记为字符串pseq，则可分别计算子串</span><br><span class="line">    pseq[ : : 2]和pseq[1: :2]的氨基酸组分。依次类推，可以尝试计算各种子串pseq[i: :k] (k=2,3,4,…; i=0,</span><br><span class="line">    1,…,k-1)的氨基酸组分。此类特征统称为k-space氨基酸组分。</span><br><span class="line">    (c) 序列上连续的两个氨基酸称为二肽，且二肽的可能种类共计20*20=400. 我们还可以考虑二肽组分。依次类推，</span><br><span class="line">    三肽组分？…</span><br><span class="line">(3) 针对设计好的特征向量，可能是高维的，则可尝试进行特征选择、数据变换、降维等特征工程相关预处理，实现方法不限。</span><br></pre></td></tr></table></figure><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 将预测结果保存在名为“preds.txt”的文本文件中，内容为186行， 每一行只有0 或者1，代表你的算法对测试数据</span><br><span class="line">的预测结果。预测数据顺序须与测试集“ProSeqs_Test.txt”中的样本顺序保持一致。</span><br><span class="line">(2) 将结果文件“preds.txt”和代码打包，以附件形式提交至学习通，无需提交本次实验报告文件。</span><br><span class="line">(3) 本次实验成绩评定采用竞赛机制，采用每位同学预测结果的F1 score作为本次实验成绩。</span><br></pre></td></tr></table></figure><h2 id="我的做法"><a href="#我的做法" class="headerlink" title="我的做法"></a>我的做法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这次的准确率普遍偏低，我没能找到适合的方法</span></span><br><span class="line"><span class="comment"># 经多次测试，准确率最高值出现在了SVC + PCA降维(11维) 这里</span></span><br><span class="line"><span class="comment"># 最高值达到了0.73261，用的随机种子是666</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report, confusion_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"></span><br><span class="line"><span class="comment"># ProSeqs_Train</span></span><br><span class="line"></span><br><span class="line">aa20 = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;V&#x27;</span>]</span><br><span class="line">filename = <span class="string">&quot;D:/Code/Python/Vscode/python与数据科学/第七次/ProSeqs_Train.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    line = f.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line">data_res = [] </span><br><span class="line">data_seq = [[<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(line) - <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> line[:-<span class="number">1</span>]:</span><br><span class="line">    item = i.split()</span><br><span class="line">    data_res.append((<span class="number">1</span> <span class="keyword">if</span> item[<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span> <span class="keyword">else</span> <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> item[<span class="number">2</span>]:</span><br><span class="line">        <span class="keyword">if</span> (j <span class="keyword">not</span> <span class="keyword">in</span> aa20):</span><br><span class="line">            index = <span class="number">21</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            index = aa20.index(j)</span><br><span class="line">        data_seq[cnt][index] += <span class="number">1</span></span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data_seq)):</span><br><span class="line">    listTmp = np.array(data_seq[i]).reshape(-<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    scaler = preprocessing.MinMaxScaler(feature_range=(<span class="number">0</span>,<span class="number">1</span>))</span><br><span class="line">    normalized_list = scaler.fit_transform(listTmp)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> normalized_list:</span><br><span class="line">        data.append(j[<span class="number">0</span>])</span><br><span class="line">data = np.array(data).reshape(-<span class="number">1</span>, <span class="number">21</span>)</span><br><span class="line">data_res = np.array(data_res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ProSeqs_Test</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;D:/Code/Python/Vscode/python与数据科学/第七次/ProSeqs_Test.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">    line = f.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line">predata = [[<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(line) - <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> line[:-<span class="number">1</span>]:</span><br><span class="line">    item = i.split()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> item[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">if</span> (j <span class="keyword">not</span> <span class="keyword">in</span> aa20):</span><br><span class="line">            index = <span class="number">21</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            index = aa20.index(j)</span><br><span class="line">        predata[cnt][index] += <span class="number">1</span></span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据集分成训练集和测试集</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(data, data_res, test_size=<span class="number">0.4</span>, random_state=<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PCA降维 , 21维降至11维</span></span><br><span class="line">pca = PCA(n_components=<span class="number">11</span>, svd_solver=<span class="string">&#x27;auto&#x27;</span>).fit(X_train)</span><br><span class="line">X_train_pca = pca.transform(X_train)</span><br><span class="line">X_test_pca = pca.transform(X_test)</span><br><span class="line">predata_pca = pca.transform(predata)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机森林模型</span></span><br><span class="line">clf = RandomForestClassifier(n_estimators=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;随机森林 , 准确度:&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.5f&#x27;</span>%clf.score(X_test, y_test))</span><br><span class="line">pre1 = clf.predict(predata)</span><br><span class="line"></span><br><span class="line">clf.fit(X_train_pca, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;随机森林 + PCA降维(11维) , 准确度:&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.5f&#x27;</span>%clf.score(X_test_pca, y_test))</span><br><span class="line">pre2 = clf.predict(predata_pca)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># SVC模型</span></span><br><span class="line">svc = SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line"></span><br><span class="line">svc.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;SVC , 准确度:&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.5f&#x27;</span>%svc.score(X_test, y_test))</span><br><span class="line">pre3 = svc.predict(predata)</span><br><span class="line"></span><br><span class="line">svc.fit(X_train_pca, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;SVC + PCA降维(11维) , 准确度:&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.5f&#x27;</span>%svc.score(X_test_pca, y_test))</span><br><span class="line">pre4 = svc.predict(predata_pca)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机森林        -&gt; pre1</span></span><br><span class="line"><span class="comment"># 随机森林 + PCA  -&gt; pre2</span></span><br><span class="line"><span class="comment"># SVC            -&gt; pre3</span></span><br><span class="line"><span class="comment"># SVC + PCA      -&gt; pre4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;D:/Code/Python/Vscode/python与数据科学/第七次/result.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pre4:</span><br><span class="line">        f.write(<span class="built_in">str</span>(i))</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python与数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据科学 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据挖掘入门分类实验</title>
      <link href="/2023/05/14/0003-08/"/>
      <url>/2023/05/14/0003-08/</url>
      
        <content type="html"><![CDATA[<h1 id="Python与数据科学实验6"><a href="#Python与数据科学实验6" class="headerlink" title="Python与数据科学实验6"></a>Python与数据科学实验6</h1><h2 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">该数据集包含1439条训练数据，存放于“data-train.csv”文件；</span><br><span class="line">另有160条未知标签的测试数据，保存在“data-test.csv”文件中。</span><br><span class="line">训练集数据共含与某种酒品质相关的11个（匿名）特征属性(f1~f11)和1个目标属性(target)   </span><br></pre></td></tr></table></figure><mark class="hl-label green">下载链接</mark> <p><a href="https://coleduck.cn/annex/Python%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AE%9E%E9%AA%8C/Lab6-data-train.csv">data-train.csv</a><br><a href="https://coleduck.cn/annex/Python%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AE%9E%E9%AA%8C/Lab6-data-test.csv">data-test.csv</a></p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本次实验的目的是利用机器学习分类算法，基于训练集构建分类器模型，进而预测测试集中全体样本的分类结果，即测试</span><br><span class="line">样本的target 值：A、B 或C（品质：A 优于 B，B优于C）。</span><br></pre></td></tr></table></figure><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 具体的机器学习算法不限，以预测效果最佳为目标。</span><br><span class="line">(2) 将预测结果保存在名为“predictions.txt”的文本文件中，内容为160行， 每一行只有A 或者B或者C，代表你的算</span><br><span class="line">法对测试数据的预测结果。预测数据顺序须与测试集“data-test.csv”中的样本顺序保持一致。</span><br><span class="line">(3) 将结果文件“predictions.txt”以附件形式提交至学习通。另外请注意：只需提交结果文件，无需提交本次实验报告</span><br><span class="line">文件。</span><br><span class="line">(4) 本次实验成绩评定采用竞赛机制，即计算每位同学预测结果的micro F1 score，然后由高到低进行排序评定相应的</span><br><span class="line">实验成绩。</span><br></pre></td></tr></table></figure><h2 id="我的做法"><a href="#我的做法" class="headerlink" title="我的做法"></a>我的做法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 经多次测试，随机森林模型 和 随机森林+PCA降维</span></span><br><span class="line"><span class="comment"># 这两种方式不相上下，不能确定哪种方法准确率更高</span></span><br><span class="line"><span class="comment"># 不过准确率最高值出现在了仅使用随机森林模型时</span></span><br><span class="line"><span class="comment"># 最高值达到了0.89583，用的随机种子是1024</span></span><br><span class="line"><span class="comment"># 代码部分只需要把路径替换成自己的路径即可使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection</span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report, confusion_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line">label = []</span><br><span class="line">filename = <span class="string">&quot;D:/Code/Python/Vscode/python与数据科学/第六次/data-train.csv&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> csvfile:</span><br><span class="line">    csv_reader = csv.reader(csvfile)  <span class="comment"># 使用csv.reader读取csvfile中的文件</span></span><br><span class="line">    header = <span class="built_in">next</span>(csv_reader)          <span class="comment"># 读取第一行每一列的标题</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> csv_reader:            <span class="comment"># 将csv 文件中的数据保存到data中</span></span><br><span class="line">        <span class="keyword">if</span> (row[-<span class="number">1</span>] == <span class="string">&#x27;A&#x27;</span>):</span><br><span class="line">            label.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> (row[-<span class="number">1</span>] == <span class="string">&#x27;B&#x27;</span>):</span><br><span class="line">            label.append(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> (row[-<span class="number">1</span>] == <span class="string">&#x27;C&#x27;</span>):</span><br><span class="line">            label.append(<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># tmp = list(row[:-1]).copy()</span></span><br><span class="line">        data.append([<span class="built_in">float</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> row[:-<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">predata = []</span><br><span class="line">filename = <span class="string">&quot;D:/Code/Python/Vscode/python与数据科学/第六次/data-test.csv&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> csvfile:</span><br><span class="line">    csv_reader = csv.reader(csvfile)  <span class="comment"># 使用csv.reader读取csvfile中的文件</span></span><br><span class="line">    header = <span class="built_in">next</span>(csv_reader)         <span class="comment"># 读取第一行每一列的标题</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> csv_reader:            <span class="comment"># 将csv 文件中的数据保存到data中</span></span><br><span class="line">        predata.append(<span class="built_in">list</span>(row[<span class="number">0</span>:-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据集分成训练集和测试集</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(data, label, test_size=<span class="number">0.2</span>, random_state=<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># PCA降维 , 11维降至8维</span></span><br><span class="line">pca = PCA(n_components=<span class="number">8</span>, svd_solver=<span class="string">&#x27;auto&#x27;</span>).fit(X_train)</span><br><span class="line">X_train_pca = pca.transform(X_train)</span><br><span class="line">X_test_pca = pca.transform(X_test)</span><br><span class="line">predata_pca = pca.transform(predata)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机森林模型</span></span><br><span class="line">clf = RandomForestClassifier(n_estimators=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">clf.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;随机森林 , 准确度:&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.5f&#x27;</span>%clf.score(X_test, y_test))</span><br><span class="line">pre1 = clf.predict(predata)</span><br><span class="line"></span><br><span class="line">clf.fit(X_train_pca, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;随机森林 + PCA降维(8维) , 准确度:&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.5f&#x27;</span>%clf.score(X_test_pca, y_test))</span><br><span class="line">pre2 = clf.predict(predata_pca)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># SVC模型</span></span><br><span class="line">svc = SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line"></span><br><span class="line">svc.fit(X_train, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;SVC , 准确度:&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.5f&#x27;</span>%svc.score(X_test, y_test))</span><br><span class="line">pre3 = svc.predict(predata)</span><br><span class="line"></span><br><span class="line">svc.fit(X_train_pca, y_train)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;SVC + PCA降维(8维) , 准确度:&#x27;</span>, end=<span class="string">&#x27;\t&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.5f&#x27;</span>%svc.score(X_test_pca, y_test))</span><br><span class="line">pre4 = svc.predict(predata_pca)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机森林        -&gt; pre1</span></span><br><span class="line"><span class="comment"># 随机森林 + PCA  -&gt; pre2</span></span><br><span class="line"><span class="comment"># SVC            -&gt; pre3</span></span><br><span class="line"><span class="comment"># SVC + PCA      -&gt; pre4</span></span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="comment"># 由此选择 pre1,pre2,pre3,pre4</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> pre1:</span><br><span class="line">    <span class="keyword">if</span> (item == <span class="number">1</span>):</span><br><span class="line">        result.append(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (item == <span class="number">2</span>):</span><br><span class="line">        result.append(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> (item == <span class="number">3</span>):</span><br><span class="line">        result.append(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;D:/Code/Python/Vscode/python与数据科学/第六次/result.txt&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        f.write(i)</span><br><span class="line">        f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python与数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据科学 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python科学计算实践</title>
      <link href="/2023/05/14/0003-07/"/>
      <url>/2023/05/14/0003-07/</url>
      
        <content type="html"><![CDATA[<h1 id="Python与数据科学实验5"><a href="#Python与数据科学实验5" class="headerlink" title="Python与数据科学实验5"></a>Python与数据科学实验5</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本次实验旨在了解和掌握python科学计算工具，包括numpy和scipy的数值计算、pandas数据分析、matplotlib画图</span><br><span class="line">等，具备快速高效的数据处理和一定的可视化分析能力。需掌握的相关知识点主要包括：</span><br><span class="line"></span><br><span class="line">1) numpy数组array的创建、使用，数组元素的切片，各种常见函数、通用函数（universal function）的运用，</span><br><span class="line">np.random模块组织和获取随机数据，以及numpy对文件数据的处理方法np.loadtxt()和np.savetxt()。了解微积</span><br><span class="line">分、线性代数、最优化等领域相关的scipy科学计算方法；</span><br><span class="line">2) pandas的数据结构：Series和DataFrame，以及相关数据探索分析方法;</span><br><span class="line">3) matplotlib画图：折线图、散点图、柱】状图、直方图、饼图，以及多子图布局方式。（注：请自学matplotlib</span><br><span class="line">绘图库，还可以包括seaborn）</span><br></pre></td></tr></table></figure><h2 id="实验题目"><a href="#实验题目" class="headerlink" title="实验题目"></a>实验题目</h2><h3 id="第-1-题"><a href="#第-1-题" class="headerlink" title="第(1)题"></a>第(1)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 数组元素索引。利用numpy.random模块随机产生一个9行10列的二维数组，其元素要求服从标准正态分布。完成</span><br><span class="line">以下该数组的索引任务，打印输出相关结果：</span><br><span class="line"></span><br><span class="line">(a) 使用索引方式获取第2行第5列、第6行第3列的元素。</span><br><span class="line">(b) 使用切片方式获取第3行至第5行和第4列至第6列的数据。</span><br><span class="line">(c) 使用切片与整数序列索引混合的方式，获取第3行至第5行且为第1列、第2列和第4列的数据。</span><br><span class="line">(d) 使用布尔索引方法将数组中取值大于1的元素重新赋值为10.00，小于-1的元素重新赋值为-10.00，并打印输出这</span><br><span class="line">    个新数组。</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.random.randn(<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第2行第5列: &#x27;</span>, arr[<span class="number">1</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第6行第3列: &#x27;</span>, arr[<span class="number">5</span>, <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第3行至第5行和第4列至第6列: &#x27;</span>, arr[<span class="number">2</span>:<span class="number">5</span>, <span class="number">3</span>:<span class="number">6</span>], sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">arr[arr &gt; <span class="number">1</span>] = <span class="number">10.00</span></span><br><span class="line">arr[arr &lt; <span class="number">1</span>] = -<span class="number">10.00</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-2-题"><a href="#第-2-题" class="headerlink" title="第(2)题"></a>第(2)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(2)利用numpy中相关模块，随机产生10000个服从 [-1,1]区间上均匀分布的实数，同时随机产生10000个服从标准正</span><br><span class="line">态分布的实数，由此获得两个一维数组，分别记为A和B。请计算下列式子的值：</span><br><span class="line">    (a) A+B</span><br><span class="line">    (b) A和B的乘积</span><br><span class="line">    (c) A/B</span><br><span class="line">    (d) exp(A)+exp(B)</span><br><span class="line">    (e) A和B的内积</span><br><span class="line">    (f)数组B全体元素的平均值，最大值，最小值。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> e</span><br><span class="line"></span><br><span class="line">A = np.random.rand(<span class="number">10000</span>)</span><br><span class="line">A = A * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">B = np.random.randn(<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A + B = &#x27;</span>, A + B)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A * B = &#x27;</span>, A * B)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A / B = &#x27;</span>, A / B)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;exp(A) + exp(B) = &#x27;</span>, e ** A + e ** B)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;A与B的内积: &#x27;</span>, np.dot(A, B))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;B的平均值: &#x27;</span>, np.<span class="built_in">sum</span>(B) / <span class="number">10000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;B的最大值: &#x27;</span>, np.<span class="built_in">max</span>(B))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;B的最小值: &#x27;</span>, np.<span class="built_in">min</span>(B))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-3-题"><a href="#第-3-题" class="headerlink" title="第(3)题"></a>第(3)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(3) 利用numpy.random模块，服从区间[10., 20.]上的均匀分布，随机生成一个10行5列的矩阵(二维数组)。通过</span><br><span class="line">Python编程依序完成下列任务，打印输出原数组和产生的新数组：</span><br><span class="line"></span><br><span class="line">(a)矩阵的每一行的元素都减去该行的平均值。</span><br><span class="line">(b)利用numpy.savetxt()，将经过(a)操作变换后的新数组数据保存至文本文件”dat.csv”, 保持10行5列不变，并</span><br><span class="line">   要求小数点后保留3位，两个数据之间用逗号隔开。 </span><br><span class="line">(c)利用numpy.loadtxt()从“dat.csv”读取数组数据，原地交换当前数组的第一行和第二行数据。</span><br><span class="line">(d)要求按第2列数据对当前数组进行排序。例如，原数组为 </span><br><span class="line">        [[1 7 9]</span><br><span class="line">         [7 8 1]</span><br><span class="line">         [8 4 2]]</span><br><span class="line">   若按第2列进行排序，结果如下：</span><br><span class="line">        [[8 4 2]</span><br><span class="line">         [1 7 9]</span><br><span class="line">         [7 8 1]]</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.random.rand(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">arr = arr * <span class="number">10</span> + <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;原数组: &#x27;</span>, arr, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    ave = np.<span class="built_in">sum</span>(arr[i, :] / <span class="number">5</span>)</span><br><span class="line">    arr[i, :] -= ave</span><br><span class="line">np.savetxt(<span class="string">&quot;./dat.csv&quot;</span>, arr, fmt=<span class="string">&#x27;%.3f&#x27;</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"></span><br><span class="line">csv_arr = np.loadtxt(<span class="string">&#x27;./dat.csv&#x27;</span>, dtype=<span class="built_in">float</span>, delimiter=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">temp = csv_arr[<span class="number">0</span>,:].copy()</span><br><span class="line">csv_arr[<span class="number">0</span>,:] = csv_arr[<span class="number">1</span>,:]</span><br><span class="line">csv_arr[<span class="number">1</span>,:] = temp</span><br><span class="line"><span class="built_in">print</span>(csv_arr, end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sorted_index=np.lexsort(csv_arr[:,<span class="number">1</span>:<span class="number">2</span>].T)</span><br><span class="line"><span class="built_in">print</span>(csv_arr[sorted_index])</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-4-题"><a href="#第-4-题" class="headerlink" title="第(4)题"></a>第(4)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(4)假设已有下列代码：</span><br><span class="line">    import numpy as np</span><br><span class="line">    import math</span><br><span class="line">    def myfun(x):</span><br><span class="line">        return math.cos(x)</span><br><span class="line"></span><br><span class="line">显而易见，函数myfun()还不是一个ufunc函数，请定义一个新函数umyfun()，使得 myfun成为一个ufunc函数。进一</span><br><span class="line">步，分别记录umyfun()和np.cos() 在计算1~100000之间共计10万个正整数的余弦值时所需的时间，比较两者的计算</span><br><span class="line">速度。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfun</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> math.cos(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">umyfun</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.cos(x)</span><br><span class="line"></span><br><span class="line">x = np.random.randint(<span class="number">1</span>, <span class="number">10</span>, <span class="number">100000</span>)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> x:</span><br><span class="line">    myfun(item)</span><br><span class="line">end = time.time()</span><br><span class="line">delta1 = end - start</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;myfun所用时间: &#x27;</span>, delta1)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">umyfun(x)</span><br><span class="line">end = time.time()</span><br><span class="line">delta2 = end - start</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;umyfun所用时间: &#x27;</span>, delta2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;myfun用时是umyfun的 &#x27;</span>, delta1 / delta2, <span class="string">&#x27; 倍&#x27;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-5-题"><a href="#第-5-题" class="headerlink" title="第(5)题"></a>第(5)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(5)利用scipy.integrate模块计算函数在区间[1,2]上的定积分。</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/21/PugpK4s2ZGoQjyC.png" alt="1.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> integrate</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sin</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(integrate.quad(<span class="keyword">lambda</span> x : x**<span class="number">2</span> + sin(x) + x**<span class="number">0.5</span> + x**(<span class="number">1</span> / <span class="number">3</span>) + <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-6-题"><a href="#第-6-题" class="headerlink" title="第(6)题"></a>第(6)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(6) 用pandas.DataFrame创建一个数据结构，数据结构内容如下：</span><br><span class="line"></span><br><span class="line">请编程完成以下练习：</span><br><span class="line">(a)打印出该数据结构.</span><br><span class="line">(b)用iloc()函数返回该数据结构第零排第零列([0, 0])的元素.</span><br><span class="line">(c)用head()函数输出数据结构前3行，并且打印输出。</span><br><span class="line">(d)用describe() 函数查看数据按列的统计信息，可显示数据的数量、缺失值、最小最大数、平均值、分位数，将其</span><br><span class="line">   打印出来。</span><br><span class="line">(e)将该数据结构用values()函数转换成ndarray类型（numpy的 N 维数组对象），打印出转换好的数据。</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/21/smuh3DIwzkJQvrT.png" alt="2.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;性别&#x27;</span>:[<span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="string">&#x27;男&#x27;</span>,],</span><br><span class="line">        <span class="string">&#x27;姓名&#x27;</span>:[<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小芳&#x27;</span>, <span class="string">&#x27;大黑&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;年龄&#x27;</span>:[<span class="number">20</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">29</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df, end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;第零排第零列元素: &#x27;</span>, df.iloc[<span class="number">0</span>, <span class="number">0</span>], end=<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;前三行元素: &#x27;</span>, df.head(<span class="number">3</span>), sep=<span class="string">&#x27;\n&#x27;</span>, end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">desc = df.describe(include=<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># include=&#x27;all&#x27;,代表对所有列进行统计，如果不加这个参数，则只对数值列进行统计</span></span><br><span class="line"><span class="built_in">print</span>(desc, end=<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">dataNd = df.values</span><br><span class="line"><span class="built_in">print</span>(dataNd)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-7-题"><a href="#第-7-题" class="headerlink" title="第(7)题"></a>第(7)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(7) 利用pandas创建如下的数据框(DataFrame)，完成以下问题：</span><br><span class="line"></span><br><span class="line">（a）将index为2和4的dataset值都改为II，并打印出修改后的数据框.</span><br><span class="line">（b）分别计算dataset为I和II时，x和y的平均值。</span><br><span class="line">（c）找出满足x&gt;9.5的样本，并计算y值的平均值。</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/21/j3gbcEFvr5ol2T1.png" alt="3.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;dataset&#x27;</span>:[<span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;I&#x27;</span>,],</span><br><span class="line">        <span class="string">&#x27;x&#x27;</span>:[<span class="number">10.0</span>, <span class="number">8.0</span>, <span class="number">13.0</span>, <span class="number">9.0</span>, <span class="number">11.0</span>],</span><br><span class="line">        <span class="string">&#x27;y&#x27;</span>:[<span class="number">8.04</span>, <span class="number">6.95</span>, <span class="number">7.58</span>, <span class="number">8.81</span>, <span class="number">8.33</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df, end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df.loc[<span class="number">2</span>, <span class="string">&#x27;dataset&#x27;</span>] = <span class="string">&#x27;II&#x27;</span></span><br><span class="line">df.loc[<span class="number">4</span>, <span class="string">&#x27;dataset&#x27;</span>] = <span class="string">&#x27;II&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df, end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df1 = df[[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>]][df[<span class="string">&#x27;dataset&#x27;</span>] == <span class="string">&#x27;I&#x27;</span>]</span><br><span class="line">df2 = df[[<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;y&#x27;</span>]][df[<span class="string">&#x27;dataset&#x27;</span>] == <span class="string">&#x27;II&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;满足 dataset == I 的数据, x和y列的均值&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df1.mean(), end=<span class="string">&quot;\n\n&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;满足 dataset == II 的数据, x和y列的均值&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df2.mean(), end=<span class="string">&quot;\n\n&quot;</span>) </span><br><span class="line"></span><br><span class="line">df3 = df[<span class="string">&#x27;y&#x27;</span>][df[<span class="string">&#x27;x&#x27;</span>] &gt; <span class="number">9.5</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;满足 x &gt; 9.5 的数据, y列的均值&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df3.mean(), end=<span class="string">&quot;\n\n&quot;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-8-题"><a href="#第-8-题" class="headerlink" title="第(8)题"></a>第(8)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(8) 创建一个pandas的DataFrame，包含3个学生的姓名、年龄和成绩信息。计算该学生的平均成绩和年龄。用</span><br><span class="line">matplotlib分别画成绩图（并画一条平均成绩线）、年龄图（并画一条平均年龄线）。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;小芳&#x27;</span>, <span class="string">&#x27;大黑&#x27;</span>, <span class="string">&#x27;张三&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>:[<span class="number">20</span>, <span class="number">21</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">29</span>],</span><br><span class="line">        <span class="string">&#x27;score&#x27;</span>:[<span class="number">40</span>, <span class="number">76</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">36</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df, end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df1 = df[[<span class="string">&#x27;score&#x27;</span>]]</span><br><span class="line">df1[[<span class="string">&#x27;average score&#x27;</span>]] = df1.mean()</span><br><span class="line">df1.plot(kind=<span class="string">&#x27;line&#x27;</span>, title=<span class="string">&#x27;table1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">df2 = df[[<span class="string">&#x27;age&#x27;</span>]]</span><br><span class="line">df2[[<span class="string">&#x27;average age&#x27;</span>]] = df2.mean()</span><br><span class="line">df2.plot(kind=<span class="string">&#x27;line&#x27;</span>, title=<span class="string">&#x27;table2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-9-题"><a href="#第-9-题" class="headerlink" title="第(9)题"></a>第(9)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(9) 画一张图，包含5幅子图，布局为：第一行2幅，左边为柱状图（bar plot），右边为散点图(scatter plot)；</span><br><span class="line">第二行2幅，左边为饼图（pie plot），右边为折线图（plot），第三行1幅子图，为直方图（histogram plot）。</span><br><span class="line">相关数据请自行随机创建或从网上采集。每幅子图要有相应的标题，表示什么类型的图。可参考的源文件包括：</span><br><span class="line">“histgram_plot.py”、“pie_plot.py”和“multiple_subplots.py”。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;year&#x27;</span>:[<span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>],</span><br><span class="line">        <span class="string">&#x27;month&#x27;</span>:[<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun&#x27;</span>, <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;August&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;passengers&#x27;</span>:[<span class="number">10</span>, <span class="number">230</span>, <span class="number">170</span>, <span class="number">50</span>, <span class="number">90</span>, <span class="number">30</span>, <span class="number">130</span>, <span class="number">110</span>, <span class="number">70</span>, <span class="number">190</span>, <span class="number">150</span>, <span class="number">210</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df, end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 柱状图</span></span><br><span class="line">plt.subplot(<span class="number">321</span>)</span><br><span class="line">x_data = df[<span class="string">&#x27;month&#x27;</span>].tolist()</span><br><span class="line">y_data = df[<span class="string">&#x27;passengers&#x27;</span>].tolist()</span><br><span class="line">plt.ylabel(<span class="string">&quot;passengers&quot;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">90</span>)</span><br><span class="line">plt.bar(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 散点图</span></span><br><span class="line">plt.subplot(<span class="number">322</span>)</span><br><span class="line">plt.scatter(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 饼图</span></span><br><span class="line">plt.subplot(<span class="number">323</span>)</span><br><span class="line">x_data = df[<span class="string">&#x27;month&#x27;</span>].tolist()</span><br><span class="line">y_data = df[<span class="string">&#x27;passengers&#x27;</span>].tolist()</span><br><span class="line">plt.pie(y_data, labels=x_data, autopct=<span class="string">&#x27;%.1f%%&#x27;</span>,shadow=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 折线图</span></span><br><span class="line">plt.subplot(<span class="number">324</span>)</span><br><span class="line">plt.plot(x_data, y_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直方图</span></span><br><span class="line">plt.subplot(<span class="number">313</span>)</span><br><span class="line">x_value = np.random.randint(<span class="number">140</span>,<span class="number">180</span>,<span class="number">200</span>)</span><br><span class="line">x2_value = np.random.randint(<span class="number">140</span>,<span class="number">180</span>,<span class="number">200</span>)</span><br><span class="line">plt.hist(x_value, bins=<span class="number">10</span>,edgecolor=<span class="string">&quot;r&quot;</span>,histtype=<span class="string">&quot;bar&quot;</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-10-题"><a href="#第-10-题" class="headerlink" title="第(10)题"></a>第(10)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(10) 文件夹中的iris.csv数据集为鸢尾花数据集，内包含 3 类鸢尾花，共 150 条记录，每类各 50 个数据，每条</span><br><span class="line">记录都有 4 项特征：花萼长度、花萼宽度、花瓣长度、花瓣宽度。程序代码iris_process.py旨在用seaborn库观察</span><br><span class="line">鸢尾花数据集内各个属性之间的关系，通过运行该代码，可以学习到seaborn创建散点图、折线图、柱状图、以及直方</span><br><span class="line">图的操作，请认真阅读代码，理解代码的含义（每运行一种类型图，需将其他类型图给注释掉），并要求在原代码的基</span><br><span class="line">础上画出花萼长度与花萼宽度之间关系的折线图。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认风格</span></span><br><span class="line">sns.<span class="built_in">set</span>(style=<span class="string">&quot;darkgrid&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据</span></span><br><span class="line">iris = pd.read_csv(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第五次/iris.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示字体为黑体</span></span><br><span class="line"><span class="comment"># sns.set(font=&#x27;c:/windows/fonts/simhei.ttf&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题</span></span><br><span class="line"><span class="comment"># sns.set_style(&quot;whitegrid&quot;)  # 白色网格背景</span></span><br><span class="line"><span class="comment"># sns.set_style(&quot;darkgrid&quot;)   # 灰色网格背景</span></span><br><span class="line"><span class="comment"># sns.set_style(&quot;dark&quot;)       # 灰色背景</span></span><br><span class="line"><span class="comment"># sns.set_style(&quot;white&quot;)      # 白色背景</span></span><br><span class="line"><span class="comment"># sns.set_style(&quot;ticks&quot;)      # 四周加边框和刻度</span></span><br><span class="line">sns.set_style(<span class="string">&#x27;whitegrid&#x27;</span>, &#123;<span class="string">&#x27;font.sans-serif&#x27;</span>: [<span class="string">&#x27;simhei&#x27;</span>,<span class="string">&#x27;FangSong&#x27;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据大小</span></span><br><span class="line"><span class="built_in">print</span>(iris.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看前十行数据</span></span><br><span class="line"><span class="built_in">print</span>(iris.head(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据信息</span></span><br><span class="line"><span class="built_in">print</span>(iris.info())</span><br><span class="line"><span class="comment"># 散点图</span></span><br><span class="line"><span class="comment"># ax = sns.scatterplot(x=&#x27;花萼长度&#x27;, y=&#x27;花萼宽度&#x27;, data=iris)</span></span><br><span class="line"><span class="comment"># 折线图</span></span><br><span class="line"><span class="comment"># ax = sns.lineplot(x=iris[&#x27;叶片宽度&#x27;], y=iris[&#x27;叶片长度&#x27;])</span></span><br><span class="line"><span class="comment"># 柱状图</span></span><br><span class="line"><span class="comment"># sns.barplot(x=iris[&#x27;品种&#x27;].value_counts().index, y=iris[&#x27;品种&#x27;].value_counts().values)</span></span><br><span class="line"><span class="comment"># 直方图</span></span><br><span class="line"><span class="comment"># ax = sns.distplot(iris[&#x27;叶片长度&#x27;])</span></span><br><span class="line"><span class="comment"># 折线图</span></span><br><span class="line">sns.lineplot(x=<span class="string">&quot;花萼长度&quot;</span>, y=<span class="string">&quot;花萼宽度&quot;</span>, data=iris)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-11-题"><a href="#第-11-题" class="headerlink" title="第(11)题"></a>第(11)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(11) 现给你某个航班每个月份所搭载乘客数量详细数据，请你用matplotlib画出柱状图分析乘客在一年中各月份的分布：</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/21/PhNRLDMHnfWXSip.png" alt="4.png"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;year&#x27;</span>:[<span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>, <span class="number">1949</span>],</span><br><span class="line">        <span class="string">&#x27;month&#x27;</span>:[<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun&#x27;</span>, <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;August&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;passengers&#x27;</span>:[<span class="number">112</span>, <span class="number">118</span>, <span class="number">132</span>, <span class="number">129</span>, <span class="number">121</span>, <span class="number">112</span>, <span class="number">96</span>, <span class="number">145</span>, <span class="number">111</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">99</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df, end=<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">x_data = df[<span class="string">&#x27;month&#x27;</span>].tolist()</span><br><span class="line">y_data = df[<span class="string">&#x27;passengers&#x27;</span>].tolist()</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;the number of passengers in every month&quot;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;month&quot;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;passengers&quot;</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.bar(x_data, y_data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> Python与数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据科学 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块与面向对象编程</title>
      <link href="/2023/05/14/0003-06/"/>
      <url>/2023/05/14/0003-06/</url>
      
        <content type="html"><![CDATA[<h1 id="Python与数据科学实验4"><a href="#Python与数据科学实验4" class="headerlink" title="Python与数据科学实验4"></a>Python与数据科学实验4</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本次实验旨在了解Python的模块、包、类等概念，熟悉常用模块的用法，学会自定义模块，理解Python的</span><br><span class="line">程序组织方式，具备面向对象的编程能力。需掌握的相关知识点主要包括：</span><br><span class="line"></span><br><span class="line">1) 模块及其使用：为最高级别的程序组织单元，将程序代码和数据封装起来以便重用；具有一定功能的程</span><br><span class="line">序块，分别用不同的文件名(“*.py”文件)存放，使代码更容易维护和管理；导入模块的方式：import </span><br><span class="line">module_name 或 import module_name as * 或 from module_name import *…。</span><br><span class="line">常见模块包括：random、time、os、sys、math、string、re等</span><br><span class="line">另外，Python脚本和模块都是一个以.py扩展名文件，如何区分？很多脚本的最后都有一段类似下面的判</span><br><span class="line">断语句，限制只能以脚本方式运行，不作为模块使用：</span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">  执行语句… </span><br><span class="line"></span><br><span class="line">2) 包：Python文件的一种组织方式，就是将几个功能相近的模块可组成一个Python包，存放到一个目录</span><br><span class="line">结构中，通过输入包的路径来调用包中模块的相应对象，如变量，函数与类等等。要创建一个包，就要建</span><br><span class="line">一个与包名同名的目录，接着在该目录下创建“__init__. py”文件，该文件是包的初始化文件，可以为</span><br><span class="line">空，也可定义相关代码；接着将相关的模块放入这个目录下，这样就创建一个包，这个目录下的模块就属</span><br><span class="line">于这个包。</span><br><span class="line">常见的包(package)有：numpy、scipy、matplotlib、pandas、sklearn等</span><br><span class="line"></span><br><span class="line">3) 类与面向对象编程：类是一种描述相同属性与方法的对象的集合。类和对象是面向对象编程的两个主要</span><br><span class="line">方面，类创建一个数据结构新类型，而对象是这个类的实例。一个简单例子如下：</span><br><span class="line"></span><br><span class="line">Bird类的定义</span><br><span class="line">class Bird():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.hungry = True</span><br><span class="line">    def eat(self):</span><br><span class="line">        if self.hungry:</span><br><span class="line">            print(&#x27;Aaaah...&#x27;)</span><br><span class="line">            self.hungry = False</span><br><span class="line">        else:</span><br><span class="line">            print(&#x27;No,thanks!&#x27;)</span><br><span class="line"></span><br><span class="line">类的实例化，即对象的创建</span><br><span class="line">&gt;&gt;&gt; b1=Bird()</span><br><span class="line">&gt;&gt;&gt; b1.eat ()</span><br><span class="line">Aaaah...</span><br><span class="line">&gt;&gt;&gt; b1.eat ()</span><br><span class="line">No,thanks!</span><br><span class="line">&gt;&gt;&gt; b1.eat ()</span><br><span class="line">No,thanks!</span><br><span class="line">&gt;&gt;&gt; b1.hungry</span><br><span class="line">False</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实验题目"><a href="#实验题目" class="headerlink" title="实验题目"></a>实验题目</h2><h3 id="第-1-题"><a href="#第-1-题" class="headerlink" title="第(1)题"></a>第(1)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 了解时间模块time和datetime，在交互式环境中执行以下任务：</span><br><span class="line">(a) 利用time.time()获取当前的时间戳。</span><br><span class="line">(b) 用datetime.date.today()获取当前的日期。</span><br><span class="line">(c) 自行查询相关使用方法，利用datetime模块返回30天前的日期。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time())</span><br><span class="line"><span class="built_in">print</span>(datetime.date.today())</span><br><span class="line"><span class="built_in">print</span>(datetime.date.today()-datetime.timedelta(days=<span class="number">30</span>))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-2-题"><a href="#第-2-题" class="headerlink" title="第(2)题"></a>第(2)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(2) 数据随机存储，掌握os与random模块的用法以及文件读写方法。</span><br><span class="line">定义一个函数fs(dirname,s)，其中参数dirname表示文件夹路径名，s为字符串，表示需要保存的数据。</span><br><span class="line">函数fs的功能是随机地将字符串s存储到dirname路径下某个文本文件(“*.txt”文件)中。假如dirname路</span><br><span class="line">径下已有”a.txt”、 ”b.txt”、 ”c.txt”三个或更多文本文件，字符串s可能被保存到”a.txt”，或”b.</span><br><span class="line">txt”，或 ”c.txt”，或其他文件，机会是相同的，并且不能覆盖原有的文本文件。如果dirname路径下不</span><br><span class="line">存在任何文本文件，则新创建“new.txt”文件来保存字符串s。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fs</span>(<span class="params">dirname, s</span>):</span><br><span class="line">    all_txt = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(dirname):</span><br><span class="line">        <span class="keyword">if</span> (os.path.basename(item)[-<span class="number">4</span>:] == <span class="string">&#x27;.txt&#x27;</span>):</span><br><span class="line">            all_txt.append(os.path.join(dirname, item))</span><br><span class="line"></span><br><span class="line">    pos = random.randint(<span class="number">0</span>, <span class="built_in">len</span>(all_txt) - <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;随机到的文件名: &#x27;</span>, all_txt[pos])</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(all_txt[pos], <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(s)</span><br><span class="line"></span><br><span class="line">fs(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第四次/testdir&#x27;</span>, <span class="string">&#x27;Hello Coleduck&#x27;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-3-题"><a href="#第-3-题" class="headerlink" title="第(3)题"></a>第(3)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(3) 类的定义以及实例化测试。</span><br><span class="line"></span><br><span class="line">要求定义一个学生类Student，含有下面的类属性：</span><br><span class="line">(a)姓名name</span><br><span class="line">(b)年龄age</span><br><span class="line">(c)成绩scores, 类型为列表或元组，形如（语文，数学，英语)</span><br><span class="line"></span><br><span class="line">类方法：</span><br><span class="line">(a)获取学生的姓名：get_name() </span><br><span class="line">(b)获取学生的年龄：get_age() </span><br><span class="line">(c)返回3门科目中最高的分数: get_course() </span><br><span class="line"></span><br><span class="line">写好类以后，给定1个同学进行实例化测试，例如:</span><br><span class="line">zm = Student(&#x27;zhangming&#x27;, 20, [69,88,100])</span><br><span class="line"></span><br><span class="line">返回结果：</span><br><span class="line">zhangming</span><br><span class="line">20</span><br><span class="line">100</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, scores</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.scores = scores</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_course</span>(<span class="params">self</span>):</span><br><span class="line">        maxScore = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.scores:</span><br><span class="line">            <span class="keyword">if</span> (item &gt; maxScore):</span><br><span class="line">                maxScore = item</span><br><span class="line">        <span class="keyword">return</span> maxScore</span><br><span class="line">    </span><br><span class="line">zm = Student(<span class="string">&#x27;zhangming&#x27;</span>, <span class="number">20</span>, [<span class="number">69</span>, <span class="number">88</span>, <span class="number">100</span>])</span><br><span class="line"><span class="built_in">print</span>(zm.get_name())</span><br><span class="line"><span class="built_in">print</span>(zm.get_age())</span><br><span class="line"><span class="built_in">print</span>(zm.get_course())</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-4-题"><a href="#第-4-题" class="headerlink" title="第(4)题"></a>第(4)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(4) 通过Python包与模块的创建，理解Python项目的组织结构。</span><br><span class="line">    创建一个包（Package），并命名为“mypack”，注意包的目录下需要包含“__init__. py”文件。在</span><br><span class="line">    “mypack”目录下创建“aa.py”文件以及一个名为“subpack”的子包，在子包“subpack”下创建“bb.</span><br><span class="line">    py”文件。最后创建一个和“mypack”同级的“test.py”文件。项目结构如下:</span><br><span class="line">        test.py</span><br><span class="line">        mypack</span><br><span class="line">        |-- __init__.py</span><br><span class="line">        |-- aa.py</span><br><span class="line">        |-- subpack</span><br><span class="line">            |-- __init__.py</span><br><span class="line">            |-- bb.py</span><br><span class="line">其中， 需将各个“*.py”源代码具体定义为：(i)在“aa.py”中定义一个函数add(x, y)，该方法能够打印</span><br><span class="line">输出x、y的两数之和；(ii) 在“bb.py”中定义一个函数sub(x, y)，该方法能够打印输出x、y的两数之</span><br><span class="line">差；(iii)在“mypack”的“__init__. py”文件中定义两个变量a和b，并为其赋值a=2, b=1；(iv)在</span><br><span class="line">“test.py”文件中定义两个变量m和n，并为其赋值m=4, n=3。且要求在“test.py”文件中，进行如下操作：</span><br><span class="line">(a)使用from ... import ...的方式导入模块“bb.py”中的sub(x, y)方法，将m、n传入sub(x,y)方法</span><br><span class="line">中，得到输出结果；</span><br><span class="line">(b)使用from ... import ...的方式导入模块“aa.py”中的add(x,y)方法，将m、n传入add(x,y)方法</span><br><span class="line">中，得到输出结果；</span><br><span class="line">(c)使用from ... import ...的方式导入“mypack”里“__init__. py”文件的a、b，将a、b传入add(x,y)</span><br><span class="line">方法中，得到输出结果。</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mypack -&gt; __init__.py</span></span><br><span class="line"><span class="comment"># ---------------------- #-</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line"><span class="comment"># ---------------------- #-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mypack -&gt; aa.py</span></span><br><span class="line"><span class="comment"># ---------------------- #-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="comment"># ---------------------- #-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># subpack -&gt; bb.py</span></span><br><span class="line"><span class="comment"># ---------------------- #-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x - y</span><br><span class="line"><span class="comment"># ---------------------- #-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="comment"># ---------------------- #-</span></span><br><span class="line"><span class="keyword">from</span> mypack.aa <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> mypack.subpack.bb <span class="keyword">import</span> sub</span><br><span class="line"><span class="keyword">from</span> mypack <span class="keyword">import</span> a, b</span><br><span class="line"></span><br><span class="line">m = <span class="number">4</span></span><br><span class="line">n = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;m - n = &#x27;</span>, sub(m, n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;m + n = &#x27;</span>, add(m, n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a + b = &#x27;</span>, add(a, b))</span><br><span class="line"><span class="comment"># ---------------------- #-</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-5-题"><a href="#第-5-题" class="headerlink" title="第(5)题"></a>第(5)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(5) 类成员的访问以及实例化测试。</span><br><span class="line">    定义一个计数器类Counter，包括的变量及方法: (i)首先定义两个类变量，分别为：公开变量</span><br><span class="line">    publicCount，为其赋初始值0；私有变量secretCount（私有变量的命名方式为：</span><br><span class="line">    __variableName），为其赋初始值0；(ii)定义方法count()：能够使得私有变量secretCount和共有</span><br><span class="line">    变量publicCount都自增1，并打印输出私有变量secretCount的值。</span><br><span class="line">接下来，进行实例化测试，创建类的实例对象，形如counter = Counter()，并进行以下操作：</span><br><span class="line">(a)使用类对象调用count()方法；</span><br><span class="line">(b)尝试使用类对象直接调用私有变量secretCount。如果报错，思考如何使用类对象直接调用私有属性，并 </span><br><span class="line">打印输出结果。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span>:</span><br><span class="line">    secret = <span class="built_in">property</span>()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.public = <span class="number">0</span></span><br><span class="line">        self.__secret = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self</span>):</span><br><span class="line">        self.public += <span class="number">1</span></span><br><span class="line">        self.__secret += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(self.__secret)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_secret</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__secret</span><br><span class="line"></span><br><span class="line">counter = Counter()</span><br><span class="line">counter.count()</span><br><span class="line"><span class="comment">#print(counter.__secret)    #报错</span></span><br><span class="line"><span class="built_in">print</span>(counter.get_secret())</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-6-题"><a href="#第-6-题" class="headerlink" title="第(6)题"></a>第(6)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(6) 模块文件中定义类及其实例化。</span><br><span class="line">    首先，创建一个名为“mc.py”的模块文件。在该模块文件中，编写一个通用的人员类（person），该类具</span><br><span class="line">    有姓名（Name）、年龄（Age）、性别（Sex）等私有属性，如Name的私有属性可以写为“self.</span><br><span class="line">    __name”。为保护个人隐私，person类的所有数据属性均需定义为私有属性。然后，对person 类进行继</span><br><span class="line">    承得到一个学生类（student），该类能够存放学生任意多门课的成绩（这里门数不定），并能求出平均</span><br><span class="line">    成绩。最后，另外创建一个主文件“test.py”，以from…import…方式导入student类，并给出三位学生</span><br><span class="line">    的student实例，要求他们的课程门数不同，在实例化测试中对student类的功能进行验证。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># mc.py</span></span><br><span class="line"><span class="comment"># ---------------------- #-</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, sex</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__age = age</span><br><span class="line">        self.__sex = sex</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_sex</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__sex</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, sex, *scores</span>):</span><br><span class="line">        <span class="built_in">super</span>(student, self).__init__(name, age, sex)</span><br><span class="line">        self.scores = scores</span><br><span class="line">        self.ave = <span class="built_in">sum</span>(scores) / <span class="built_in">len</span>(scores)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;姓名：&#x27;</span>, self.get_name())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;年龄：&#x27;</span>, self.get_age())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;性别：&#x27;</span>, self.get_sex())</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.scores)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;第&#x27;</span>, i+<span class="number">1</span>, <span class="string">&#x27;门成绩：&#x27;</span>, self.scores[i])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;平均成绩：&#x27;</span>, self.ave)</span><br><span class="line"><span class="comment"># ---------------------- #-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="comment"># ---------------------- #-</span></span><br><span class="line"><span class="keyword">from</span> mc <span class="keyword">import</span> student</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    stu1 = student(<span class="string">&#x27;coleduck1&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>)</span><br><span class="line">    stu2 = student(<span class="string">&#x27;coleduck2&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">49</span>, <span class="number">51</span>)</span><br><span class="line">    stu3 = student(<span class="string">&#x27;coleduck3&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>)</span><br><span class="line">    stu1.info()</span><br><span class="line">    stu2.info()</span><br><span class="line">    stu3.info()</span><br><span class="line"><span class="comment"># ---------------------- #-</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-7-题"><a href="#第-7-题" class="headerlink" title="第(7)题"></a>第(7)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(7) 定义一个高维空间样本点集类HDPoints，须包含以下数据属性与方法属性：</span><br><span class="line"></span><br><span class="line">(a)数据属性self.points：类型为列表，由多个子列表构成，每个子列表表示高维空间中的一个数据点，且 </span><br><span class="line">   数据维度可以任意，并通过初始化构造函数获得。</span><br><span class="line">(b)方法属性centerpoint(self)：计算点集的中心点。</span><br><span class="line">(c)方法属性minkowski (self, x, y, p)：计算两点x和y之间的闵可夫斯基距离，p为非负整数，用p=0情</span><br><span class="line">   形表示切比雪夫距离。由此定义的距离称为p-闵氏距离，其数学定义如下：</span><br><span class="line">(d)方法属性farthestpoint(self, p)：找出离中心点p-闵氏距离最远的点，返回在self.points中的下标</span><br><span class="line">   以及最大距离。</span><br><span class="line">(e)方法属性farthest2points(self, p)：找出点集self.points中p-闵氏距离最远的两点，返回两点在</span><br><span class="line">   self.points中的下标及其最大距离。</span><br><span class="line"></span><br><span class="line">接下来，实例化类HDPoints，利用random模块，随机产生至少50个高维空间数据点，样本点的维度至少在5以</span><br><span class="line">上，且每个分量取值服从区间[0,1]上的均匀分布。同时，随机产生一个0~5之间的一个非负整数，赋值传递</span><br><span class="line">给p-闵氏距离函数中的参数p，对HDPoints实例对象的全部自定义方法属性（即centerpoint()、minkowski</span><br><span class="line">()、farthestpoint()和farthest2points()）进行功能测试。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10维坐标点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HDPoints</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, points</span>):</span><br><span class="line">        self.points = points</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">centerpoint</span>(<span class="params">self</span>):</span><br><span class="line">        center_point = [<span class="number">10</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">        tot = <span class="built_in">len</span>(self.points)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.points:</span><br><span class="line">            center_point[<span class="number">0</span>] += i[<span class="number">0</span>]</span><br><span class="line">            center_point[<span class="number">1</span>] += i[<span class="number">1</span>]</span><br><span class="line">            center_point[<span class="number">2</span>] += i[<span class="number">2</span>]</span><br><span class="line">            center_point[<span class="number">3</span>] += i[<span class="number">3</span>]</span><br><span class="line">            center_point[<span class="number">4</span>] += i[<span class="number">4</span>]</span><br><span class="line">            center_point[<span class="number">5</span>] += i[<span class="number">5</span>]</span><br><span class="line">            center_point[<span class="number">6</span>] += i[<span class="number">6</span>]</span><br><span class="line">            center_point[<span class="number">7</span>] += i[<span class="number">7</span>]</span><br><span class="line">            center_point[<span class="number">8</span>] += i[<span class="number">8</span>]</span><br><span class="line">            center_point[<span class="number">9</span>] += i[<span class="number">9</span>]</span><br><span class="line">        center_point = [x / tot <span class="keyword">for</span> x <span class="keyword">in</span> center_point]</span><br><span class="line">        <span class="keyword">return</span> center_point</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">minkowski</span>(<span class="params">self, x, y, p</span>):</span><br><span class="line">        p_dist = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>):    <span class="comment">#切比雪夫距离</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                p_dist = <span class="built_in">max</span>(p_dist, <span class="built_in">abs</span>(x[i] - y[i]))</span><br><span class="line">        <span class="keyword">elif</span> (p &gt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                p_dist += <span class="built_in">abs</span>(x[i] - y[i]) ** p</span><br><span class="line">            p_dist ** (<span class="number">1</span> / p)</span><br><span class="line">        <span class="keyword">return</span> p_dist</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">farthestpoint</span>(<span class="params">self, p</span>):</span><br><span class="line">        max_dist = -<span class="number">1</span></span><br><span class="line">        center_point = self.centerpoint()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.points)):</span><br><span class="line">            cur_dist = self.minkowski(self.points[i], center_point, p)</span><br><span class="line">            <span class="keyword">if</span> (cur_dist &gt; max_dist):</span><br><span class="line">                max_dist = cur_dist</span><br><span class="line">                max_pos = i</span><br><span class="line">        <span class="keyword">return</span> max_pos, max_dist</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">farthest2points</span>(<span class="params">self, p</span>):</span><br><span class="line">        max_dist = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.points)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(self.points)):</span><br><span class="line">                cur_dist = self.minkowski(self.points[i], self.points[j], p)</span><br><span class="line">                <span class="keyword">if</span> (cur_dist &gt; max_dist):</span><br><span class="line">                    max_dist = cur_dist</span><br><span class="line">                    pos1 = i</span><br><span class="line">                    pos2 = j</span><br><span class="line">        <span class="keyword">return</span> pos1, pos2, max_dist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    points = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):  <span class="comment"># 维度：10</span></span><br><span class="line">        point = []</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            point.append(random.random())</span><br><span class="line">        points.append(point)</span><br><span class="line"></span><br><span class="line">    obj = HDPoints(points)</span><br><span class="line">    p = random.randint(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已生成100个10维的点的集合&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;本次模拟随机产生的p-闵氏距离为：&#x27;</span>, p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这组点集中的中心点是：&#x27;</span>, obj.centerpoint())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这组点集中离中心点p-闵氏距离最远的点的下标以及距离是：&#x27;</span>, obj.farthestpoint(p))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这组点集中p-闵氏距离最远的两点的下标以及距离是：&#x27;</span>, obj.farthest2points(p))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-8-题"><a href="#第-8-题" class="headerlink" title="第(8)题"></a>第(8)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(8) 请定义一个Cylinder类，具体要求为：</span><br><span class="line">（1）每个Cylinder类对象可以存储一个圆柱体（属性包括半径和高）；</span><br><span class="line">（2）具有用于初始化半径和高的构造方法；</span><br><span class="line">（3）具有计算圆柱体体积的方法GetVolume。</span><br><span class="line">然后，进行实例化测试，输入输出格式要求</span><br><span class="line">(a)输入格式: 分两行分别输入半径和高;</span><br><span class="line">(b)输出格式：第一行输出半径和高，第二行输出体积。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cylinder</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius, height</span>):</span><br><span class="line">        self.r = radius</span><br><span class="line">        self.h = height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetVolume</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.1415926</span> * self.r ** <span class="number">2</span> * self.h</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GetInfo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;该圆柱体的底面半径为：&#x27;</span>, self.r, <span class="string">&#x27;  高为：&#x27;</span>, self.h)</span><br><span class="line">        <span class="built_in">print</span>(self.GetVolume())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    test = Cylinder(<span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入圆柱体的底面半径r：&#x27;</span>)), </span><br><span class="line">                    <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入圆柱体的高h：&#x27;</span>)))</span><br><span class="line">    <span class="comment"># r = input(&#x27;请输入圆柱体的底面半径r：&#x27;)</span></span><br><span class="line">    <span class="comment"># h = input(&#x27;请输入圆柱体的高h：&#x27;)</span></span><br><span class="line">    test.GetInfo()</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-9-题"><a href="#第-9-题" class="headerlink" title="第(9)题"></a>第(9)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(9) 创建SchoolPerson类，设置姓名、性别、年龄等三个属性；</span><br><span class="line">创建学生类Student，继承自SchoolPerson类，添加额外两个属性：班级class、学号sno。添加方法：打印</span><br><span class="line">学生的所有信息print_info方法。</span><br><span class="line">创建教师类Teacher，继承自SchoolPerson类，添加额外两个属性：部门department、工号cno。添加方</span><br><span class="line">法：打印教师的所有信息print_info方法。</span><br><span class="line">并定义学生类、教师类的对象，然后分别调用print_info方法，实现各自对象属性信息的输出。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SchoolPerson</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, sex, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.age = age</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">SchoolPerson</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, sex, age, classroom, sno</span>):</span><br><span class="line">        <span class="built_in">super</span>(Student, self).__init__(name, sex, age)</span><br><span class="line">        self.classroom = classroom</span><br><span class="line">        self.sno = sno</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;姓名：&#x27;</span>, self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;性别：&#x27;</span>, self.sex)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;年龄：&#x27;</span>, self.age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;班级：&#x27;</span>, self.classroom)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;学号：&#x27;</span>, self.sno)</span><br><span class="line">            </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">SchoolPerson</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, sex, age, department, cno</span>):</span><br><span class="line">        <span class="built_in">super</span>(Teacher, self).__init__(name, sex, age)</span><br><span class="line">        self.department = department</span><br><span class="line">        self.cno = cno</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;姓名：&#x27;</span>, self.name)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;性别：&#x27;</span>, self.sex)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;年龄：&#x27;</span>, self.age)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;部门：&#x27;</span>, self.department)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;工号：&#x27;</span>, self.cno)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    stu = Student(<span class="string">&#x27;柯尔鸭1&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;计科2102&#x27;</span>, <span class="string">&#x27;2135020717&#x27;</span>)</span><br><span class="line">    tch = Teacher(<span class="string">&#x27;柯尔鸭2&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">39</span>, <span class="string">&#x27;浙江工商大学&#x27;</span>, <span class="string">&#x27;C1122&#x27;</span>)</span><br><span class="line">    stu.print_info()</span><br><span class="line">    tch.print_info()    </span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-10-题"><a href="#第-10-题" class="headerlink" title="第(10)题"></a>第(10)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(10) 创建类MyMath,计算分别定义求圆的周长、面积和球的表面积、体积的方法，结果保留两位小数。若输</span><br><span class="line">入的是非数字，则输出：请输入数字！可以导入math包。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, radius</span>):</span><br><span class="line">        self.r = radius</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">circumference</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span>(<span class="number">2</span> * pi * self.r, <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span>(pi * self.r ** <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">surface</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span>(<span class="number">4</span> * pi * self.r ** <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">volume</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">round</span>(<span class="number">4</span> * pi * self.r ** <span class="number">3</span> / <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">        num = <span class="built_in">input</span>(<span class="string">&#x27;请输入半径r：&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            f = <span class="built_in">float</span>(num)</span><br><span class="line">            obj = MyMath(f)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;以r为半径的圆周长：&#x27;</span>, obj.circumference())</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;以r为半径的圆面积：&#x27;</span>, obj.area())</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;以r为半径的球表面积：&#x27;</span>, obj.surface())</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;以r为半径的球体积：&#x27;</span>, obj.volume())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;请输入数字！&quot;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> Python与数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据科学 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python文件操作与数据读取</title>
      <link href="/2023/05/14/0003-05/"/>
      <url>/2023/05/14/0003-05/</url>
      
        <content type="html"><![CDATA[<h1 id="Python与数据科学实验3"><a href="#Python与数据科学实验3" class="headerlink" title="Python与数据科学实验3"></a>Python与数据科学实验3</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本次实验旨在了解Python的文件数据操作方法，理解和掌握数据存取的各种方式。需掌握的相关知识点主要包括：</span><br><span class="line">1) 文件数据读写：掌握文件的打开(open)以及打开模式（’r’,’w’和’a’）、读（read、readline、readlines）、</span><br><span class="line">写（write、writelines）方式，并学会with …. as句法，以及数据类型的转化、格式化处理和保存。</span><br><span class="line">2) 文件管理：学会应用python的os、os.path、shutil等模块进行文件批量管理。</span><br><span class="line">3) 数据永久存储：pickle模块的dump和load方法。注意此时文件对象的打开模式应为二进制形式(‘rb’或‘wb’).</span><br></pre></td></tr></table></figure><h2 id="实验题目"><a href="#实验题目" class="headerlink" title="实验题目"></a>实验题目</h2><h3 id="第-1-题"><a href="#第-1-题" class="headerlink" title="第(1)题"></a>第(1)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 文本文件“info_stocks.txt”中每一行的name对应股票名称，shares对应多少股，price对应该只股票的单价。</span><br><span class="line">    (a) 请计算每只股票的总价，并按总价从大到小进行排序(程序中要求含lambda函数) ，将所有股票的名称、单</span><br><span class="line">    价、总价依次打印输出。</span><br><span class="line">    (b) 要求使用Python内置函数filter过滤出单价大于80的股票有哪些? 并将符合条件的股票名称、单价、总价打</span><br><span class="line">    印输出。</span><br><span class="line"></span><br><span class="line">info_stocks.txt:</span><br><span class="line"></span><br><span class="line">&#x27;name&#x27;: &#x27;IBM&#x27;, &#x27;shares&#x27;: 100, &#x27;price&#x27;: 91.1</span><br><span class="line">&#x27;name&#x27;: &#x27;AAPL&#x27;, &#x27;shares&#x27;: 50, &#x27;price&#x27;: 543.22</span><br><span class="line">&#x27;name&#x27;: &#x27;FB&#x27;, &#x27;shares&#x27;: 200, &#x27;price&#x27;: 21.09</span><br><span class="line">&#x27;name&#x27;: &#x27;HPQ&#x27;, &#x27;shares&#x27;: 35, &#x27;price&#x27;: 31.75</span><br><span class="line">&#x27;name&#x27;: &#x27;YHOO&#x27;, &#x27;shares&#x27;: 45, &#x27;price&#x27;: 16.35</span><br><span class="line">&#x27;name&#x27;: &#x27;ACME&#x27;, &#x27;shares&#x27;: 75, &#x27;price&#x27;: 115.65</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第三次/info_stocks.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">data = data.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">data.remove(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    a = re.findall(<span class="string">&quot;\d+\.?\d*&quot;</span>, data[x])  <span class="comment"># 正则表达式</span></span><br><span class="line">    tot = <span class="built_in">float</span>(a[<span class="number">0</span>]) * <span class="built_in">float</span>(a[-<span class="number">1</span>])</span><br><span class="line">    data[x] = [data[x], <span class="string">&quot;, &#x27;sum&#x27;: &quot;</span> , <span class="built_in">str</span>(<span class="built_in">round</span>(tot, <span class="number">2</span>))]</span><br><span class="line"></span><br><span class="line">data.sort(key = <span class="keyword">lambda</span> item: <span class="built_in">float</span>(item[-<span class="number">1</span>]), reverse = <span class="literal">True</span>)</span><br><span class="line">data = [<span class="string">&#x27;&#x27;</span>.join(item) <span class="keyword">for</span> item <span class="keyword">in</span> data]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n#####################\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data_filiter = <span class="built_in">filter</span>(<span class="keyword">lambda</span> item: <span class="built_in">float</span>(re.findall(<span class="string">&quot;\d+\.?\d*&quot;</span>, item)[<span class="number">1</span>]) &gt; <span class="number">80</span>, data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data_filiter:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-2-题"><a href="#第-2-题" class="headerlink" title="第(2)题"></a>第(2)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(2) 文件“points.txt”保存了三维空间中100个点的坐标信息。若以逗号为分隔符，第1列为数据点编号，最后3列数据</span><br><span class="line">依次为x、y、z轴坐标。请计算任意两点之间的欧氏距离、曼哈顿距离和切比雪夫距离，分别找出这三种距离最大值，以</span><br><span class="line">及达到最大值时对应的两点，并将距离最大值相关数据保存至一个新的文件中去（创建的新文件取名可为’result5.</span><br><span class="line">txt’）。</span><br><span class="line"></span><br><span class="line">注：以上三种距离的数学定义请自学(如：https://blog.csdn.net/XZHSakura/article/details/</span><br><span class="line">107694724)。编写Python代码时，要求利用def给出这三种距离的函数定义，且不能调用任何库函数进行直接计</span><br><span class="line">算。距离最大值保留小数点后3位，保存文件的格式参考如下：</span><br><span class="line">    欧式距离最大值：xxx，距离最远的两个点：xxx，xxx</span><br><span class="line">    曼哈顿距离最大值：xxx，距离最远的两个点：xxx，xxx</span><br><span class="line">    切比雪夫距离最大值：xxx，距离最远的两个点：xxx，xxx</span><br><span class="line"></span><br><span class="line">points.txt(部分):</span><br><span class="line"></span><br><span class="line">P180,    4.2840,   41.6670,   58.8700</span><br><span class="line">P181,    7.8630,   40.4050,   59.1790</span><br><span class="line">P182,    8.7090,   42.3370,   62.3700</span><br><span class="line">P183,    5.5710,   41.0010,   64.1050</span><br><span class="line">P184,    6.5920,   37.4080,   63.5010</span><br><span class="line">P185,   10.1990,   38.1770,   64.4330</span><br><span class="line">P186,    9.1840,   39.3420,   67.9190</span><br><span class="line">P187,    7.0330,   36.2330,   68.4070</span><br><span class="line">P188,    9.7890,   34.0120,   67.0330</span><br><span class="line">P189,   12.4000,   35.5350,   69.3360</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ouShi</span>(<span class="params">x1, y1, z1, x2, y2, z2</span>):</span><br><span class="line">    <span class="keyword">return</span> sqrt((x2-x1)**<span class="number">2</span> + (y2-y1)**<span class="number">2</span> + (z2-z1)**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manHaDun</span>(<span class="params">x1, y1, z1, x2, y2, z2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x1-x2) + <span class="built_in">abs</span>(y1-y2) + <span class="built_in">abs</span>(z1-z2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qieBiXueFu</span>(<span class="params">x1, y1, z1, x2, y2, z2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">abs</span>(x1-x2), <span class="built_in">abs</span>(y1-y2), <span class="built_in">abs</span>(z1-z2))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第三次/points.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">data = data.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">data.remove(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data = [ item.split(<span class="string">&#x27;,&#x27;</span>) <span class="keyword">for</span> item <span class="keyword">in</span> data ]</span><br><span class="line">data = [ [subItem.strip() <span class="keyword">for</span> subItem <span class="keyword">in</span> item] <span class="keyword">for</span> item <span class="keyword">in</span> data ]</span><br><span class="line"></span><br><span class="line">ouShi_max, manHaDun_max, qieBiXueFu_max = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    x1, y1, z1 = <span class="built_in">float</span>(data[i][<span class="number">1</span>]), <span class="built_in">float</span>(data[i][<span class="number">2</span>]), <span class="built_in">float</span>(data[i][<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, <span class="built_in">len</span>(data)):</span><br><span class="line">        x2, y2, z2 = <span class="built_in">float</span>(data[j][<span class="number">1</span>]), <span class="built_in">float</span>(data[j][<span class="number">2</span>]), <span class="built_in">float</span>(data[j][<span class="number">3</span>])</span><br><span class="line">        <span class="keyword">if</span> (ouShi(x1,y1,z1,x2,y2,z2) &gt; ouShi_max):</span><br><span class="line">            ouShi_max = ouShi(x1,y1,z1,x2,y2,z2)</span><br><span class="line">            ouShi_1 = data[i][<span class="number">0</span>]</span><br><span class="line">            ouShi_2 = data[j][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> (manHaDun(x1,y1,z1,x2,y2,z2) &gt; manHaDun_max):</span><br><span class="line">            manHaDun_max = manHaDun(x1,y1,z1,x2,y2,z2)</span><br><span class="line">            manHaDun_1 = data[i][<span class="number">0</span>]</span><br><span class="line">            manHaDun_2 = data[j][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> (qieBiXueFu(x1,y1,z1,x2,y2,z2) &gt; qieBiXueFu_max):</span><br><span class="line">            qieBiXueFu_max = qieBiXueFu(x1,y1,z1,x2,y2,z2)</span><br><span class="line">            qieBiXueFu_1 = data[i][<span class="number">0</span>]</span><br><span class="line">            qieBiXueFu_2 = data[j][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第三次/points_res.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;欧氏距离最大值：&#123;0&#125;，距离最远的两个点：&#123;1&#125;，&#123;2&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(ouShi_max, <span class="number">3</span>), ouShi_1, ouShi_2))</span><br><span class="line">    f.write(<span class="string">&#x27;曼哈顿距离最大值：&#123;0&#125;，距离最远的两个点：&#123;1&#125;，&#123;2&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(manHaDun_max, <span class="number">3</span>), manHaDun_1, manHaDun_2))</span><br><span class="line">    f.write(<span class="string">&#x27;切比雪夫距离最大值：&#123;0&#125;，距离最远的两个点：&#123;1&#125;，&#123;2&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(qieBiXueFu_max, <span class="number">3</span>), qieBiXueFu_1, qieBiXueFu_2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;欧氏距离最大值：&#123;0&#125;，距离最远的两个点：&#123;1&#125;，&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(ouShi_max, <span class="number">3</span>), ouShi_1, ouShi_2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;曼哈顿距离最大值：&#123;0&#125;，距离最远的两个点：&#123;1&#125;，&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(manHaDun_max, <span class="number">3</span>), manHaDun_1, manHaDun_2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;切比雪夫距离最大值：&#123;0&#125;，距离最远的两个点：&#123;1&#125;，&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">round</span>(qieBiXueFu_max, <span class="number">3</span>), qieBiXueFu_1, qieBiXueFu_2))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-3-题"><a href="#第-3-题" class="headerlink" title="第(3)题"></a>第(3)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(3) 文件” seqs_fasta.txt”保存有符合fasta格式的100多个蛋白质氨基酸序列，截取部分如下图所示：</span><br><span class="line"> </span><br><span class="line">&gt;6ONBB</span><br><span class="line">GSGAPPTIQQPSMSSAVALLGQDVDFTCIVNDLGSHMVAFVKADSPPRLLSFDEKVFRRRNKYELKPRIGDLHNEWVLTI</span><br><span class="line">KNVQESDRGNYSCQINTEPITLSTGELDVKVPHHHHHH</span><br><span class="line">&gt;6ONAA</span><br><span class="line">GSDTICIGYHANNSTDTVDTVLEKNVTVTHSVNLLEDSHNGKLCRLKGIAPLQLGKCNIAGWILGNPECESLLSKRSWSY</span><br><span class="line">IAETPNSENGTCYPGDFADYEELREQLSSVSSFERFEIFPKERSWPNHNINIGVTAACSHAGKSSFYKNLLWLTEKDGSY</span><br><span class="line">PNLNKSYVNKKEKEVLVLWGVHHPSNIENQKTLYRKENAYVSVVSSNYNRRFTPEIAERPKVRGQAGRMNYYWTLLEPGD</span><br><span class="line"></span><br><span class="line">其中每条序列以“&gt;”开头，紧接的“6ONBB”表示蛋白质序列ID，两行“&gt;6ONBB”与“&gt;6ONAA”之间展示的是ID为6ONBB的氨</span><br><span class="line">基酸序列。</span><br><span class="line"></span><br><span class="line">自然界中，任何天然蛋白质主要由20种标准的氨基酸构成，可与字母表aa20=&#123;&#x27;A&#x27;, &#x27;R&#x27;, &#x27;N&#x27;, &#x27;D&#x27;, &#x27;C&#x27;, &#x27;Q&#x27;, </span><br><span class="line">&#x27;E&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;L&#x27;, &#x27;K&#x27;, &#x27;M&#x27;, &#x27;F&#x27;, &#x27;P&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;W&#x27;, &#x27;Y&#x27;, &#x27;V&#x27;&#125;中的英文字母一一对应。同一种</span><br><span class="line">氨基酸在一条蛋白质序列中可能出现多次。</span><br><span class="line"></span><br><span class="line">请计算文件“seqs_fasta.txt”中每条蛋白质序列的氨基酸组分，即字母表aa20中的每个英文字母在该蛋白质序列中出</span><br><span class="line">现的频率（百分比%），并将统计结果保存至一个新的文件（创建的新文件可取名为’result6.txt’）。注：要求氨基酸</span><br><span class="line">出现的频率值保留小数点后1位，且每个氨基酸所在列的频率值数据右对齐保存，保存文件的格式参考如下：</span><br><span class="line"></span><br><span class="line">ID           A      R      N      D      C      Q      E      G      H      I      L      K      M      F      P      S      T      W      Y</span><br><span class="line">6ONBB      4.2    5.1    5.1    6.8    1.7    4.2    5.1    5.9    6.8    5.1    8.5    5.1    1.7    3.4    6.8    8.5    5.1    0.8    1.7</span><br><span class="line">6ONAA      5.2    4.1    8.9    3.7    2.2    2.8    7.6    8.4    3.3    5.6    7.8    6.5    1.3    3.7    4.1    7.6    5.2    2.0    4.6</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aa20 = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;V&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第三次/seqs_fasta.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">data = data.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">data.remove(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">temp = []</span><br><span class="line">data_solve = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    data[i] = data[i].rstrip()</span><br><span class="line">    <span class="keyword">if</span> (data[i][<span class="number">0</span>] == <span class="string">&#x27;&gt;&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> (s):</span><br><span class="line">            temp.append(s)</span><br><span class="line">            s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> (temp):</span><br><span class="line">            data_solve.append(temp)</span><br><span class="line">            temp = []</span><br><span class="line">        temp.append(data[i][<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s += data[i];</span><br><span class="line"></span><br><span class="line">res = [[<span class="string">&#x27;ID&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;V&#x27;</span>]]</span><br><span class="line">temp = [<span class="number">0.0</span>  <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(aa20) + <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data_solve)):</span><br><span class="line">    seq = <span class="built_in">list</span>(data_solve[i][-<span class="number">1</span>])</span><br><span class="line">    tot = <span class="built_in">len</span>(seq)</span><br><span class="line">    <span class="comment"># print(tot)</span></span><br><span class="line">    temp[<span class="number">0</span>] = data_solve[i][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(aa20)):</span><br><span class="line">        temp[index + <span class="number">1</span>] = <span class="built_in">str</span>(<span class="built_in">round</span>(seq.count(aa20[index]) * <span class="number">100</span> / tot, <span class="number">1</span>))</span><br><span class="line">    <span class="comment">#     print(seq.count(aa20[index]), end = &#x27; &#x27;)</span></span><br><span class="line">    <span class="comment"># print(&#x27;\n&#x27;)</span></span><br><span class="line">    res.append(temp)</span><br><span class="line">    temp = [<span class="number">0.0</span>  <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(aa20) + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第三次/result6.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        f.write(<span class="string">&#x27;&#123;:&lt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;&#123;:&gt;7&#125;\n&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            i[<span class="number">0</span>],i[<span class="number">1</span>],i[<span class="number">2</span>],i[<span class="number">3</span>],i[<span class="number">4</span>],i[<span class="number">5</span>],i[<span class="number">6</span>],i[<span class="number">7</span>],i[<span class="number">8</span>],i[<span class="number">9</span>],i[<span class="number">10</span>],i[<span class="number">11</span>],i[<span class="number">12</span>],i[<span class="number">13</span>],i[<span class="number">14</span>],i[<span class="number">15</span>],i[<span class="number">16</span>],i[<span class="number">17</span>],i[<span class="number">18</span>],i[<span class="number">19</span>],i[<span class="number">20</span>]))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-4-题"><a href="#第-4-题" class="headerlink" title="第(4)题"></a>第(4)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(4) 首先，定义一个名为“wordcount”的函数，功能为统计中文文本中某个关键字出现的次数，函数原型如下：</span><br><span class="line">        def wordcount(w, txtfile):</span><br><span class="line">            函数体</span><br><span class="line">            return 词w在txtfile中出现的次数</span><br><span class="line">其中w和txtfile均为字符串。</span><br><span class="line"></span><br><span class="line">其次，在存放本次实验材料的文件夹中，利用os.mkdir()创建一个新的文件夹，取名“mydir”；同时，自动识别出以</span><br><span class="line">“news_”开头的所有文本文件，利用shutil模块将其移动至新建的文件目录“mydir”中(注：需编程自动实现文件的移</span><br><span class="line">动，不是手工拷贝或移动)。</span><br><span class="line"></span><br><span class="line">进一步，利用pickle模块将函数wordcount以及识别出的以“news_”开头的所有文本文件名组合成一个列表，永久保存</span><br><span class="line">至文件“wc.pkl”，并存储在文件夹“mydir”中。</span><br><span class="line"></span><br><span class="line">最后，再次利用pickle模块将保存在“wc.pkl”中的列表数据载入，获得函数wordcount，并调用wordcount计算四个关</span><br><span class="line">键字“中国”、“美国”、“科技”和“芯片”在以“news_”开头的所有文本文件中出现的次数，打印输出，格式参考如下：</span><br><span class="line">                    中国    美国    科技    芯片</span><br><span class="line">    news_XXX.txt    10      10      10      10</span><br><span class="line">    news_YYY.txt    10      10      10      10</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">workcount</span>(<span class="params">w, txtfile</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(new_dir + txtfile, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    data = data.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    txt = <span class="string">&#x27;&#x27;</span>.join(data)</span><br><span class="line">    <span class="keyword">return</span> txt.count(w)</span><br><span class="line"></span><br><span class="line">cur_dir = <span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第三次/&#x27;</span></span><br><span class="line">new_dir = cur_dir + <span class="string">&#x27;mydir/&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">not</span> os.path.exists(new_dir)):</span><br><span class="line">    os.mkdir(new_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(cur_dir):</span><br><span class="line">    <span class="keyword">if</span> (os.path.basename(item)[<span class="number">0</span>:<span class="number">5</span>] == <span class="string">&#x27;news_&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">        side = os.path.join(cur_dir, item)</span><br><span class="line">        shutil.move(side, new_dir)      <span class="comment"># 移动到另外一个文件夹中</span></span><br><span class="line"></span><br><span class="line">fil = <span class="built_in">open</span>(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第三次/wc.pkl&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">file_list = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(new_dir):</span><br><span class="line">    file_list.append(item)</span><br><span class="line">pickle.dump(file_list, fil)</span><br><span class="line">fil.close()</span><br><span class="line"></span><br><span class="line">fie = <span class="built_in">open</span>(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第三次/wc.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">t = pickle.load(fie)</span><br><span class="line"><span class="comment"># pprint(t)</span></span><br><span class="line"></span><br><span class="line">res = [[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;中国&#x27;</span>, <span class="string">&#x27;美国&#x27;</span>, <span class="string">&#x27;科技&#x27;</span>, <span class="string">&#x27;芯片&#x27;</span>]]</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> t:</span><br><span class="line">    <span class="comment"># print(f)</span></span><br><span class="line">    a = workcount(<span class="string">&#x27;中国&#x27;</span>, f)</span><br><span class="line">    b = workcount(<span class="string">&#x27;美国&#x27;</span>, f)</span><br><span class="line">    c = workcount(<span class="string">&#x27;科技&#x27;</span>, f)</span><br><span class="line">    d = workcount(<span class="string">&#x27;芯片&#x27;</span>, f)</span><br><span class="line">    res.append([f, <span class="built_in">str</span>(a), <span class="built_in">str</span>(b), <span class="built_in">str</span>(c), <span class="built_in">str</span>(d)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#123;0:&lt;25&#125;\t&#123;1&#125;\t&#123;2&#125;\t&#123;3&#125;\t&#123;4&#125;&#x27;</span>.<span class="built_in">format</span>(i[<span class="number">0</span>], i[<span class="number">1</span>], i[<span class="number">2</span>], i[<span class="number">3</span>], i[<span class="number">4</span>]))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-5-题"><a href="#第-5-题" class="headerlink" title="第(5)题"></a>第(5)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(5) 应用os和os.path模块，列出指定目录下所有的.py 文件，并以列表形式打印输出全部.py文件名。然后，利用</span><br><span class="line">shutil模块将全部.py文件复制至另一指定目录，并利用shutil模块压缩此目录文件夹，压缩格式为zip。注：目录名</span><br><span class="line">称及指定目录下包含的.py文件名称请自己手工创建，也可以在代码中随机创建。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/&#x27;</span></span><br><span class="line">cur_dir = path + <span class="string">&#x27;test/&#x27;</span></span><br><span class="line">moveto_dir = path + <span class="string">&#x27;another/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(cur_dir):</span><br><span class="line">    <span class="keyword">if</span> (os.path.basename(item)[-<span class="number">3</span>:] == <span class="string">&#x27;.py&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">        side = os.path.join(cur_dir, item)</span><br><span class="line">        shutil.move(side, moveto_dir)</span><br><span class="line"></span><br><span class="line">new_path = shutil.make_archive(path, <span class="string">&#x27;zip&#x27;</span>, moveto_dir)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-6-题"><a href="#第-6-题" class="headerlink" title="第(6)题"></a>第(6)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(6) 在实验材料的文件夹内，存在compare1.txt和compare2.txt两个文件，现要求写一个程序，比较这两个文本文件</span><br><span class="line">的内容。如果文件完全相同，输出“OK！”，否则输出“NO！”。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第三次/compare1.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data1 = f.read()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第三次/compare2.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data2 = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (data1 == data2):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;OK!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;NO!&#x27;</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-7-题"><a href="#第-7-题" class="headerlink" title="第(7)题"></a>第(7)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(7) 使用python的os模块，执行以下操作：创建oldfilename.txt文件，并重命名为newfilename.txt；判断folder</span><br><span class="line">文件夹是否存在，不存在则创建，并将newfilename.txt文件放入该文件夹中。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os, shutil</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">fa_dir = <span class="string">&#x27;D:/Code/Python/Vscode/python与数据科学/第三次/&#x27;</span></span><br><span class="line">file_name = fa_dir + <span class="string">&#x27;oldfilename.txt/&#x27;</span></span><br><span class="line">file_new_name = fa_dir + <span class="string">&#x27;newfilename.txt/&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name, mode = <span class="string">&#x27;w&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.rename(file_name, file_new_name)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;rename dir fail&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;rename dir success&#x27;</span>)</span><br><span class="line"></span><br><span class="line">new_dir = fa_dir + <span class="string">&#x27;folder/&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">not</span> os.path.exists(new_dir)):</span><br><span class="line">    os.mkdir(new_dir)</span><br><span class="line"></span><br><span class="line">shutil.move(file_new_name, new_dir)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-8-题"><a href="#第-8-题" class="headerlink" title="第(8)题"></a>第(8)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(8) 附件中有一名为 ‘data.csv’ 的 CSV 文件，其中每一行都是一个学生的信息，格式为：姓名,性别,年龄,成绩。</span><br><span class="line">请编写一个 Python 程序，读取 data.csv 文件中的所有数据，并计算所有学生的平均年龄和平均成绩。</span><br><span class="line"></span><br><span class="line">data.csv:</span><br><span class="line"></span><br><span class="line">小明男18岁90</span><br><span class="line">小红女20岁85</span><br><span class="line">张三男22岁78</span><br><span class="line">李四男19岁92</span><br><span class="line">王五男21岁89</span><br><span class="line">刘六女23岁91</span><br><span class="line">赵七男20岁84</span><br><span class="line">周八女19岁87</span><br><span class="line">陈九男22岁88</span><br><span class="line">郑十女21岁93</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">csv_reader = csv.reader(<span class="built_in">open</span>(<span class="string">&quot;D:/Code/Python/Vscode/python与数据科学/第三次/data.csv&quot;</span>))</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line">tot_cnt = <span class="number">0</span></span><br><span class="line">tot_age = <span class="number">0</span></span><br><span class="line">tot_grade = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> csv_reader:</span><br><span class="line">    tot_cnt += <span class="number">1</span></span><br><span class="line">    tot_age += <span class="built_in">eval</span>(row[-<span class="number">2</span>][:-<span class="number">1</span>])</span><br><span class="line">    tot_grade += <span class="built_in">eval</span>(row[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;学生平均年龄：&#123;0:.2f&#125;\n学生平均成绩：&#123;1:.2f&#125;&#x27;</span>.<span class="built_in">format</span>(tot_age / tot_cnt, tot_grade / tot_cnt))</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-9-题"><a href="#第-9-题" class="headerlink" title="第(9)题"></a>第(9)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(9) 创建一个叮咚客服管理系统的界面，每次登录时，将用户的登录日志写入文件中（包含登录时间），并且在程序中</span><br><span class="line">查看用户的登录日志。假定系统中只有一个用户（用户名： &quot;张三&quot; ，密码&quot;123456&quot;）可以登录成功；请记录用户是否</span><br><span class="line">登录成功以及登录时间。</span><br><span class="line">    </span><br><span class="line">    下图为系统的主函数，请写出login()函数和look_log()函数，实现上述要求。</span><br><span class="line">    </span><br><span class="line">    if __name__ == &quot;__main__&quot;:</span><br><span class="line">        while True:</span><br><span class="line">            sel = input(&#x27;请输入你的操作：1--登录，2--查看日志，其他--退出：&#x27;)</span><br><span class="line">            if sel == str(1) :</span><br><span class="line">                login()</span><br><span class="line">            elif sel == str(2) :</span><br><span class="line">                look_log()</span><br><span class="line">            else:</span><br><span class="line">                break</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    user_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户名：&#x27;</span>)</span><br><span class="line">    user_pwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码：&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (user_name != <span class="string">&#x27;张三&#x27;</span> <span class="keyword">or</span> user_pwd != <span class="string">&#x27;123456&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;用户名或密码错误，登录失败&#x27;</span>)</span><br><span class="line">        data.append([user_name, user_pwd, <span class="string">&#x27;登录失败&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录成功！&#x27;</span>)</span><br><span class="line">        data.append([user_name, user_pwd, <span class="string">&#x27;登录成功&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">look_log</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;用户名：&#123;0&#125;，密码：&#123;1&#125;，状态：&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(i[<span class="number">0</span>], i[<span class="number">1</span>], i[<span class="number">2</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        sel = <span class="built_in">input</span>(<span class="string">&#x27;请输入你的操作：1--登录，2--查看日志，其他--退出：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> sel == <span class="built_in">str</span>(<span class="number">1</span>) :</span><br><span class="line">            login()</span><br><span class="line">        <span class="keyword">elif</span> sel == <span class="built_in">str</span>(<span class="number">2</span>) :</span><br><span class="line">            look_log()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> Python与数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据科学 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法实践</title>
      <link href="/2023/05/14/0003-04/"/>
      <url>/2023/05/14/0003-04/</url>
      
        <content type="html"><![CDATA[<p>Python与数据科学实验2</p><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本次实验旨在了解Python基础语法知识，掌握Python3的基本数据结构、控制结构、函数等，具备数学计算和字符</span><br><span class="line">串/文本处理的能力。相关知识点包括：</span><br><span class="line">1) 数据结构：列表、元组、字符串、字典、集合;</span><br><span class="line">2) 控制结构：条件语句以及条件表达式、while/for循环、break和continue语句、try-except语句</span><br><span class="line">3) 函数：函数的定义、函数的参数形式、函数的调用、lambda函数，以及map、filter等内置函数的用法</span><br></pre></td></tr></table></figure><h2 id="实验题目"><a href="#实验题目" class="headerlink" title="实验题目"></a>实验题目</h2><h3 id="第-1-题"><a href="#第-1-题" class="headerlink" title="第(1)题"></a>第(1)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1) 编写函数，接收一个字符串，分别统计大写字母、小写字母、数字、其他字符的个数，并以元组的形式返回结</span><br><span class="line">果。字符串通过input输入，然后调用该函数，并打印出函数的返回值。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">s</span>):</span><br><span class="line">    cnt_upper = <span class="number">0</span></span><br><span class="line">    cnt_lower = <span class="number">0</span></span><br><span class="line">    cnt_digit = <span class="number">0</span></span><br><span class="line">    cnt_other = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;A&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">            cnt_upper += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> (<span class="string">&#x27;a&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">            cnt_lower += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> (<span class="string">&#x27;0&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;9&#x27;</span>):</span><br><span class="line">            cnt_digit += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cnt_other += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (cnt_upper, cnt_lower, cnt_digit, cnt_other)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;(大写字母，小写字母，数字，其他字符)&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(function(s))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-2-题"><a href="#第-2-题" class="headerlink" title="第(2)题"></a>第(2)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(2) 正整数的质因子分解。要求编写自定义函数实现该功能。例如，给定10，打印出结果：[[2,5],[1,1]]，表示</span><br><span class="line">10 = 2^1 * 5^1；给定200，打印出结果：[[2,5],[3,2]]，表示200 = 2^3 * 5^2.</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">isprime</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, num):</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">x</span>):</span><br><span class="line">    temp = x</span><br><span class="line">    list1 = []</span><br><span class="line">    list2 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, x + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (isprime(i)):</span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> (temp % i == <span class="number">0</span>):</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                temp //= i</span><br><span class="line">            <span class="keyword">if</span> (cnt &gt; <span class="number">0</span>):</span><br><span class="line">                list1.append(i)</span><br><span class="line">                list2.append(cnt)</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> [list1, list2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(function(x))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-3-题"><a href="#第-3-题" class="headerlink" title="第(3)题"></a>第(3)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(3) 编写一个函数，参数为a、b、c，要求计算如下数学公式的值。</span><br><span class="line">e^(b^√(π/2)) + (-b+√(b^2-4ac))/2a + (log_10(|a+b|)+a/b)/(ln⁡(a^b+100))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    num1 = e ** (b ** sqrt(pi / <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">if</span> (b * b - <span class="number">4</span> * a * c &lt; <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sqrt()发生错误，算术平方根无意义&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    num2 = (sqrt(b * b - <span class="number">4</span> * a * c) - b) / <span class="number">2</span> / a</span><br><span class="line">    num3 = (log10(<span class="built_in">abs</span>(a + b)) + a / b) / log(a ** b + <span class="number">100</span> - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> num1 + num2 + num3</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入第一个参数a: &quot;</span>)</span><br><span class="line">    a = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入第二个参数b: &quot;</span>)</span><br><span class="line">    b = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请输入第三个参数c: &quot;</span>)</span><br><span class="line">    c = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(function(a, b, c))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-4-题"><a href="#第-4-题" class="headerlink" title="第(4)题"></a>第(4)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">4</span>) 运行以下代码，截图粘贴运行结果，并说明函数func的功能：</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*list_args</span>):</span><br><span class="line">    all_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_args:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(i, <span class="built_in">list</span>):</span><br><span class="line">            all_list.extend(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;列表参数有错误，请重新输入列表：&#x27;</span></span><br><span class="line">    all_list.sort()</span><br><span class="line">    <span class="keyword">return</span> all_list[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func([<span class="number">678</span>,<span class="number">29</span>,<span class="number">579</span>,<span class="number">13</span>], [<span class="number">900</span>,<span class="number">454</span>,<span class="number">65</span>,<span class="number">445</span>], [<span class="number">12</span>,<span class="number">54</span>,<span class="number">2980</span>,<span class="number">72</span>]))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这段代码定义了一个函数，名为func，它接受任意数量的参数，并把这些参数放进list_args作为函数形参。For循</span><br><span class="line">环则是遍历list_args里的元素，if isinstance(i, list)的作用是判断当前被遍历到的元素i是不是列表类型，如</span><br><span class="line">果是列表，则把当前列表i里的元素扩展到all_list里，如果用户调用函数时输入了非列表元素，那么程序会返回一</span><br><span class="line">段提示信息：&#x27;列表参数有错误，请重新输入列表：&#x27;。最后，对all_list列表排序并返回最后一个元素，也就是该函</span><br><span class="line">数返回了所有实参列表中最大的元素，即2980。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-5-题"><a href="#第-5-题" class="headerlink" title="第(5)题"></a>第(5)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(5) 现有一个整数列表ls=[11,22,33,44,55,66,77,88,99,100,110,200,230,330], 将ls中所有大于66的元素保</span><br><span class="line">存至字典的第一个key ’k1’，将小于等于66的元素保存至字典的第二个key ’k2’, 以及将ls中的全部奇数保存至字</span><br><span class="line">典的第三个key ’k3’. 打印出这个字典，并通过key访问字典元素，计算ls中所有奇数的平方和。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    ls=[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>,<span class="number">66</span>,<span class="number">77</span>,<span class="number">88</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">110</span>,<span class="number">200</span>,<span class="number">230</span>,<span class="number">330</span>]</span><br><span class="line">    dict1 = &#123;&#125;</span><br><span class="line">    list1 = []</span><br><span class="line">    list2 = []</span><br><span class="line">    list3 = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ls:</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">66</span>):</span><br><span class="line">            list1.append(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            list2.append(i)</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span>):</span><br><span class="line">            list3.append(i)</span><br><span class="line"></span><br><span class="line">    dict1[<span class="string">&#x27;k1&#x27;</span>] = list1</span><br><span class="line">    dict1[<span class="string">&#x27;k2&#x27;</span>] = list2</span><br><span class="line">    dict1[<span class="string">&#x27;k3&#x27;</span>] = list3</span><br><span class="line">    <span class="built_in">print</span>(dict1)</span><br><span class="line">    </span><br><span class="line">    Sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dict1[<span class="string">&#x27;k3&#x27;</span>]:</span><br><span class="line">        Sum += i * i</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;所有奇数平方和为：&#x27;</span>, Sum)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-6-题"><a href="#第-6-题" class="headerlink" title="第(6)题"></a>第(6)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(6) 请利用map和reduce函数编写一个str2float函数, 把字符串’123.456’转换成浮点数123.456. 此题不允许直</span><br><span class="line">接使用float()对字符串进行直接转换。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2float</span>(<span class="params">s</span>):</span><br><span class="line">    depart = s.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    num1 = reduce(<span class="keyword">lambda</span> a, b : a * <span class="number">10</span> + b, <span class="built_in">map</span>(<span class="built_in">int</span>, depart[<span class="number">0</span>]))</span><br><span class="line">    num2 = reduce(<span class="keyword">lambda</span> a, b : a * <span class="number">10</span> + b, <span class="built_in">map</span>(<span class="built_in">int</span>, depart[<span class="number">1</span>])) / <span class="number">10</span> ** <span class="built_in">len</span>(depart[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    res = str2float(s)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(res), res)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-7-题"><a href="#第-7-题" class="headerlink" title="第(7)题"></a>第(7)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(7) craps 赌博游戏</span><br><span class="line">游戏规则：玩家掷两个骰子，每个骰子点数为1-6，如果第一次点数和为7或11，则玩家胜；如果点数和为2、3或12，</span><br><span class="line">则玩家输庄家胜。若和为其他点数，则记录第一次的点数和，玩家继续掷骰子，直至点数和等于第一次掷出的点数和</span><br><span class="line">则玩家胜；若掷出的点数和为7则庄家胜。编写一个python程序，按以上规则实现游戏，random.randint(low, </span><br><span class="line">high)，可以实现随机生成[low,high]之间的整数。</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">game</span>():   </span><br><span class="line">    num1 = random.randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你掷出了第一个筛子，点数是：&#x27;</span>, num1)</span><br><span class="line">    num2 = random.randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你掷出了第二个筛子，点数是：&#x27;</span>, num2)</span><br><span class="line">    tot = num1 + num2</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;两个筛子点数和是：&#x27;</span>, tot)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tot <span class="keyword">in</span> [<span class="number">7</span>, <span class="number">11</span>]):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> (tot <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>]):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pre = tot</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;未分出胜负，进行下一轮掷筛&#x27;</span>)</span><br><span class="line">            num1 = random.randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;你掷出了第一个筛子，点数是：&#x27;</span>, num1)</span><br><span class="line">            num2 = random.randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;你掷出了第二个筛子，点数是：&#x27;</span>, num2)</span><br><span class="line">            <span class="keyword">if</span> (num1 + num2 == pre):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> (num1 + num2 == <span class="number">7</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入1开始模拟游戏，输入0退出游戏&#x27;</span>)</span><br><span class="line">        op = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (game()):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;玩家赢得了比赛\n\n\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;庄家赢得了比赛\n\n\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> (op == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-8-题"><a href="#第-8-题" class="headerlink" title="第(8)题"></a>第(8)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(8) 编写一个python程序，计算指定年月日是这一年的第几天。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入年：&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    year = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入月：&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    month = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入日：&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    day = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    leap = <span class="keyword">lambda</span> x : <span class="keyword">not</span> x % <span class="number">4</span> <span class="keyword">and</span> x % <span class="number">100</span> <span class="keyword">or</span> <span class="keyword">not</span> x % <span class="number">400</span></span><br><span class="line">    m = [<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 判断日期是否合法</span></span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> (year &gt;= <span class="number">2023</span> <span class="keyword">and</span> month <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]):</span><br><span class="line">        temp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (leap(year)):</span><br><span class="line">            temp = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> &lt;= day &lt;= m[month - <span class="number">1</span>] + temp):</span><br><span class="line">            flag = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag):</span><br><span class="line">        tot = day</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, month - <span class="number">1</span>):</span><br><span class="line">            tot += m[i]</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">2</span> <span class="keyword">and</span> leap(year)):</span><br><span class="line">                tot += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125;-&#123;1&#125;-&#123;2&#125;是&#123;0&#125;年的第&#123;3&#125;天&#x27;</span>.<span class="built_in">format</span>(year, month, day, tot))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;您输入的日期不合法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-9-题"><a href="#第-9-题" class="headerlink" title="第(9)题"></a>第(9)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(9) 编写一个python程序，给你两个二进制字符串a和b，以二进制字符串的形式返回它们的和。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>()))</span><br><span class="line">    b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>()))</span><br><span class="line">    len_max = <span class="built_in">max</span>(<span class="built_in">len</span>(a), <span class="built_in">len</span>(b))</span><br><span class="line"></span><br><span class="line">    a.reverse()</span><br><span class="line">    b.reverse()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a), len_max):</span><br><span class="line">        a.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b), len_max):</span><br><span class="line">        b.append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    c = []</span><br><span class="line">    ci = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, len_max):</span><br><span class="line">        n3 = a[i] + b[i] + ci</span><br><span class="line">        ci = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (n3 &gt;= <span class="number">2</span>):</span><br><span class="line">            n3 %= <span class="number">2</span></span><br><span class="line">            ci = <span class="number">1</span></span><br><span class="line">        c.append(n3)</span><br><span class="line">    <span class="keyword">if</span> (ci):</span><br><span class="line">        c.append(ci)</span><br><span class="line">    c.reverse()</span><br><span class="line">    c = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, c)))</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line">    </span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-10-题"><a href="#第-10-题" class="headerlink" title="第(10)题"></a>第(10)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(10) 编写函数实现pow(x,n)，即计算x的整数n次幂函数（即x^n）。注意：不得直接调用python的x**n计算方式或</span><br><span class="line">其它库函数。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">myPow</span>(<span class="params">x, n</span>):</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">abs</span>(n)):</span><br><span class="line">        res *= x</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> / res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入第一个参数(底数x)：&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入第二个参数(指数n)：&#x27;</span>, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;pow(&#123;0&#125;, &#123;1&#125;) = &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(x, n, myPow(x, n)))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-11-题"><a href="#第-11-题" class="headerlink" title="第(11)题"></a>第(11)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(11) 请计算出1~10000中平方根是整数的数，要求使用filter函数来处理该问题，并输出结果。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x : <span class="built_in">int</span>(x ** <span class="number">0.5</span>) * <span class="built_in">int</span>(x ** <span class="number">0.5</span>) == x, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10001</span>))))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> Python与数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据科学 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python入门练习</title>
      <link href="/2023/05/14/0003-03/"/>
      <url>/2023/05/14/0003-03/</url>
      
        <content type="html"><![CDATA[<h1 id="Python与数据科学实验1"><a href="#Python与数据科学实验1" class="headerlink" title="Python与数据科学实验1"></a>Python与数据科学实验1</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本次实验旨在动手安装Anaconda3的前提下，入门练习Python代码的开发，了解Python的各种运行方式，掌握</span><br><span class="line">Python3的基本数据结构与简单的控制语句(if …else、for循环等)，具备一定的数据计算与字符串处理的能力。</span><br><span class="line">相关知识点包括：</span><br><span class="line">1) Python运行方式：</span><br><span class="line">    (a) 交互方式 </span><br><span class="line">    (b) IDE环境直接运行（spyder或pycharm）</span><br><span class="line">    (c) Jupyter Notebook环境</span><br><span class="line">    (d) 命令行执行Python源文件</span><br><span class="line">2) 数据结构：列表、元组、字符串、字典、集合。</span><br><span class="line">3) 简单的控制结构：if…else条件语句以及条件表达式、for循环等。</span><br><span class="line"></span><br><span class="line">根据实验练习题要求完成实验报告。注意，请在本报告中将自己的姓名、学号、班级书写正确。最后，请在规定时</span><br><span class="line">间内完成本次实验，并将报告的word文档以附件形式提交至学习通。(注意：不要删除题目信息，也不要将word文</span><br><span class="line">档转换成pdf版本)</span><br></pre></td></tr></table></figure><h2 id="实验题目"><a href="#实验题目" class="headerlink" title="实验题目"></a>实验题目</h2><h3 id="第-1-题"><a href="#第-1-题" class="headerlink" title="第(1)题"></a>第(1)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在某个Python交互式环境（cmd、Spyder或PyCharm中的IPython窗口）中展示下列三个任务的运行结果。注意需</span><br><span class="line">逐行敲入代码，并将运行过程的截图整体粘贴在题目下方，同时重点关注print函数的各种调用方式，以及</span><br><span class="line">import、help、math模块的用法，领会程序运行结果：</span><br><span class="line"></span><br><span class="line">(a) 任务1：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; x=10</span><br><span class="line">&gt;&gt;&gt; y=20</span><br><span class="line">&gt;&gt;&gt; z=x+y</span><br><span class="line">&gt;&gt;&gt; print(&#x27;X&#x27;, &#x27;=&#x27;, x)</span><br><span class="line">&gt;&gt;&gt; print(&#x27;Y&#x27;, y, sep=&#x27;=&#x27;)</span><br><span class="line">&gt;&gt;&gt; print(&#x27;Sum=&#x27;, z)</span><br><span class="line">&gt;&gt;&gt; print(x, y,sep=&#x27;+&#x27;, end=&#x27;=&#x27;); print(z)</span><br><span class="line">&gt;&gt;&gt; print(x,y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(b)任务2：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; import time</span><br><span class="line">&gt;&gt;&gt; i=time.localtime(time.time())</span><br><span class="line">&gt;&gt;&gt; print(time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;,i))</span><br><span class="line">&gt;&gt;&gt;import datetime</span><br><span class="line">&gt;&gt;&gt;j=datetime.datetime.now()</span><br><span class="line">&gt;&gt;&gt;j</span><br><span class="line">&gt;&gt;&gt;print(j)</span><br><span class="line">&gt;&gt;&gt;print(j.year,j.month,j.day,sep=&#x27;-&#x27;)</span><br><span class="line">&gt;&gt;&gt;print(j.hour,j.minute,j.second,sep=&#x27;:&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(c)任务3：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; help(pow)</span><br><span class="line">&gt;&gt;&gt; pow(3,2)</span><br><span class="line">&gt;&gt;&gt; 3**2</span><br><span class="line">&gt;&gt;&gt; import math</span><br><span class="line">&gt;&gt;&gt; help(math.pow)</span><br><span class="line">&gt;&gt;&gt; math.pow(3,2)</span><br><span class="line">&gt;&gt;&gt; help(math.log)</span><br><span class="line">&gt;&gt;&gt; help(math.exp)</span><br><span class="line">&gt;&gt;&gt; math.log(2,10)</span><br><span class="line">&gt;&gt;&gt; math.log(2,2)</span><br><span class="line">&gt;&gt;&gt; funs=[math.log,math.exp,math.sin,math.cos,math.tan]</span><br><span class="line">&gt;&gt;&gt; for i in range(1,6):</span><br><span class="line">...     print(funs[i-1](i))</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-2-题"><a href="#第-2-题" class="headerlink" title="第(2)题"></a>第(2)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请在Jupyer Notebook环境中实现以下任务（将运行过程的截图粘贴在题目下方）：</span><br><span class="line">  (a) 变量pi=3.1415926，将pi保留小数点后2位打印输出。</span><br><span class="line">  (b) 变量a=’hello’, b=’world’, 打印输出a+b, a+’\n’+b, a[:2]*3, a[::2]*3, b.split()以及b.</span><br><span class="line">      split(‘o’)的结果。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-3-题"><a href="#第-3-题" class="headerlink" title="第(3)题"></a>第(3)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请在Jupyer Notebook环境中执行以下代码，给出运行结果截图，理解相关知识点。</span><br><span class="line">    a,b,c=1,2,3</span><br><span class="line">    print(&#x27;a=&#x27;,a,&#x27;b=&#x27;,b,&#x27;c=&#x27;,c)</span><br><span class="line">    age=25;sex=&#x27;男&#x27;;sala=6000;mar=True;du=&#x27;教授&#x27;</span><br><span class="line">    print(&#x27;年龄：&#x27;,age,&#x27;性别：&#x27;,sex,&#x27;工资：&#x27;,sala,&#x27;婚否：&#x27;,mar,&#x27;职称：&#x27;,du)</span><br><span class="line">    print(a&lt;b and age &lt;=25 or sala &gt;= 5000 and not mar)</span><br><span class="line">    print(age &gt;=20 and sala &lt;= 9000 and not mar and (a+b) &gt;c)</span><br><span class="line">    print(c&gt;b and du==&#x27;教授&#x27; or mar and not sex==&#x27;女&#x27;)</span><br><span class="line">    print((a+b)^2*c+len(&#x27;China-&gt;&#x27;+&#x27;浙江&#x27;+&#x27;chr(88)&#x27;+&#x27;杭州&#x27;)+True+False)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码功能说明：</span><br><span class="line"></span><br><span class="line">(1)前两行print是简单的输出。print默认是用空格作为分隔符</span><br><span class="line">(2)第三个print输出True ，自左向右结合且and优先级高， a&lt;b and age&lt;=25的结果为True，然后遇到or则逻</span><br><span class="line">   辑短路，结果为True，后面的代码则不执行了</span><br><span class="line">(3)第四个print输出False， 前面的条件都是True，直到 not mar这个条件时为False，且逻辑短路，结果为</span><br><span class="line">   False，(a+b) &gt; c这句未判断</span><br><span class="line">(4)第五个print输出True，全部条件都判断了，没有短路，结果为True，优先级  以括号的形式表示的话为：</span><br><span class="line">   (c&gt;b and du==&#x27;教授&#x27;) or (mar and (not sex==&#x27;女&#x27;))</span><br><span class="line">(5)第六个print输出为26，优先级以括号的形式表示的话为(a+b)^((2*c)+len(&#x27;China-&gt;&#x27;+&#x27;浙江&#x27;+&#x27;chr(88)&#x27;</span><br><span class="line">   +&#x27;杭州&#x27;)+True+False)，即3^(6+18+1) = 3 ^ 25 = 26  00011 ^ 11001 = 11010 = 26</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-4-题"><a href="#第-4-题" class="headerlink" title="第(4)题"></a>第(4)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编写一个Python源代码，要求依次输出以下内容：</span><br><span class="line">    Hi, Python!</span><br><span class="line">    Welcome …</span><br><span class="line">    Happy You!</span><br><span class="line">要求以两种方式执行该代码源文件，并截图粘贴相关运行结果：</span><br><span class="line"></span><br><span class="line">(a)在开发环境Spyder或PyCharm中直接运行；</span><br><span class="line">(b)在cmd环境以命令行方式执行。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-5-题"><a href="#第-5-题" class="headerlink" title="第(5)题"></a>第(5)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">应用input输入正整数m和n (m+100 &lt; n), 打印输出m~n之间（包含m和n）的所有素数，并统计素数的个数。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">judge</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, num):</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    m = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (judge(i)):</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-6-题"><a href="#第-6-题" class="headerlink" title="第(6)题"></a>第(6)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">现有字符串s=”helllo12345aa*&amp;@*”，分别统计英文字母、数字以及其他字符的个数，将统计结果打印输出。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="string">&#x27;helllo12345aa*&amp;@*&#x27;</span></span><br><span class="line">    cnt_alp = <span class="number">0</span></span><br><span class="line">    cnt_dig = <span class="number">0</span></span><br><span class="line">    cnt_oth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;0&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;9&#x27;</span>):</span><br><span class="line">            cnt_dig += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> (<span class="string">&#x27;a&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;z&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;A&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">            cnt_alp += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cnt_oth += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;英文字母:&#x27;</span>, cnt_alp)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;数字:&#x27;</span>, cnt_dig)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;其他字符&#x27;</span>, cnt_oth)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-7-题"><a href="#第-7-题" class="headerlink" title="第(7)题"></a>第(7)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出1000以内水仙花数: 如果一个3位数等于其各位数字的立方和，这个数就是水仙花数。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>, <span class="number">1000</span>):</span><br><span class="line">        a = i // <span class="number">100</span></span><br><span class="line">        b = i // <span class="number">10</span> % <span class="number">10</span></span><br><span class="line">        c = i % <span class="number">10</span></span><br><span class="line">        <span class="keyword">if</span> (a ** <span class="number">3</span> + b ** <span class="number">3</span> + c ** <span class="number">3</span> == i):</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-8-题"><a href="#第-8-题" class="headerlink" title="第(8)题"></a>第(8)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">回文串：反向排列与原来一样的字符串就叫做回文串。</span><br><span class="line">编写python源代码，输入长度为5的字符串，判断它是不是回文串。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    s = <span class="built_in">input</span>()</span><br><span class="line">    rev = <span class="built_in">list</span>(s)</span><br><span class="line">    rev.reverse()</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="string">&#x27;&#x27;</span>.join(rev)):</span><br><span class="line">        <span class="built_in">print</span>(s, <span class="string">&#x27; 是回文串&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(s, <span class="string">&#x27; 不是回文串&#x27;</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-9-题"><a href="#第-9-题" class="headerlink" title="第(9)题"></a>第(9)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编写python源代码，求一个3*3矩阵主对角线元素之和。矩阵为：[[1,2,3],[3,4,5],[4,5,6]]</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    l = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l)):</span><br><span class="line">        <span class="built_in">sum</span> += l[i][i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-10-题"><a href="#第-10-题" class="headerlink" title="第(10)题"></a>第(10)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编写python源代码，计算前20阶乘的和（1! + 2! + 3! + ... + 20!）。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">        num *= i</span><br><span class="line">        <span class="built_in">sum</span> += num</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="第-11-题"><a href="#第-11-题" class="headerlink" title="第(11)题"></a>第(11)题</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">题目</button></li><li class="tab"><button type="button" data-href="#-2">解答</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">写出猜大小的游戏：假设设定数字为66，让用户输入数字，如果比66⼤，则显示猜测的结果大了；如果比66小，则</span><br><span class="line">显示猜测的结果小了;只有等于66时，显示猜测结果正确，输出总共猜测的次数，然后退出循环。注：用户输入数</span><br><span class="line">字需按每次猜测的实际情形随机产生。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    num = <span class="number">66</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">        s = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入数字: &quot;</span>))</span><br><span class="line">        <span class="keyword">if</span> (s &gt; num):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您猜测的结果大了&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> (s &lt; num):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您猜测的结果小了&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;猜对了！&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr>]]></content>
      
      
      <categories>
          
          <category> Python与数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据科学 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
            <tag> 实验报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python与数据科学第3章 - 控制流与函数编程</title>
      <link href="/2023/05/14/0003-02/"/>
      <url>/2023/05/14/0003-02/</url>
      
        <content type="html"><![CDATA[<h2 id="第3章-控制流与函数编程"><a href="#第3章-控制流与函数编程" class="headerlink" title="第3章 - 控制流与函数编程"></a>第3章 - 控制流与函数编程</h2><br><h3 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">已知 a = [-1,1,1,1,2, 3, 5, 7, 8]</span><br><span class="line">则表达式 len(list(filter(lambda x: (x%2 != 0) , a)))的结果为</span><br><span class="line"></span><br><span class="line">A   7</span><br><span class="line">B   8</span><br><span class="line">C   6</span><br><span class="line">D   9</span><br></pre></td></tr></table></figure><blockquote><p>答案：A</p></blockquote><hr><h3 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行下述程序,输出结果的行数是</span><br><span class="line"></span><br><span class="line">ls = [2,0,6]</span><br><span class="line">x = 100</span><br><span class="line">try:</span><br><span class="line">    for i in ls:</span><br><span class="line">        y =  100 // i</span><br><span class="line">        print(y)</span><br><span class="line">except:</span><br><span class="line">    print(&#x27;error&#x27;)</span><br><span class="line"></span><br><span class="line">A   1</span><br><span class="line">B   2</span><br><span class="line">C   4</span><br><span class="line">D   3</span><br></pre></td></tr></table></figure><blockquote><p>答案：B</p></blockquote><hr><h3 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">假设</span><br><span class="line">x = &#x27;ab&#x27;</span><br><span class="line">xy = &#x27;ab93kdfd’</span><br><span class="line">k = 0</span><br><span class="line">下列代码选项中,使得k的值是0的选项是</span><br><span class="line"></span><br><span class="line">A   if xy &gt; x:</span><br><span class="line">        k = 1</span><br><span class="line">B   if x in xy:</span><br><span class="line">        k = 1</span><br><span class="line">C   if xy in x:</span><br><span class="line">        k = 1</span><br><span class="line">D   if xy.count(x) &gt;= 1:</span><br><span class="line">        k = 1</span><br></pre></td></tr></table></figure><blockquote><p>答案：C</p></blockquote><hr><h3 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下关于函数的描述,正确的是</span><br><span class="line"></span><br><span class="line">A   函数定义的时候并不执行,可以放在调用它的语句之后定义</span><br><span class="line">B   函数定义的时候,不能没有参数列表</span><br><span class="line">C   调用Python函数的时候,不能指定缺省参数的名称和值</span><br><span class="line">D   函数不需要返回值的时候,也能用return语句做最后一条语句</span><br></pre></td></tr></table></figure><blockquote><p>答案：D</p></blockquote><hr><h3 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行以下程序,输出结果是</span><br><span class="line"></span><br><span class="line">x = 10</span><br><span class="line">x = 20 if x &lt; 10 else 20</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">A   x &lt; 10</span><br><span class="line">B   20</span><br><span class="line">C   无显示输出</span><br><span class="line">D   10</span><br></pre></td></tr></table></figure><blockquote><p>答案：B</p></blockquote><hr><h3 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下关于函数参数的描述,正确的是</span><br><span class="line"></span><br><span class="line">A   在一个函数内部定义的变量,到另一个函数中不能引用</span><br><span class="line">B   函数在定义时可以不指定可选参数的默认值,调用函数的时候再传入参数</span><br><span class="line">C   定义函数可选参数的时候,不限制可选参数在参数列表中的位置</span><br><span class="line">D   调用函数时,按参数名称传递的参数,要按照定义顺序进行传递</span><br></pre></td></tr></table></figure><blockquote><p>答案：A</p></blockquote><hr><h3 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下关于控制结构的描述,错误的是</span><br><span class="line"></span><br><span class="line">A   if条件不满足情况下要执行的语句块,放在else语句后面</span><br><span class="line">B   语句if 1,这种表达式是可以执行的</span><br><span class="line">C   分支结构中的判断条件只能是产生True或False的表达式或函数</span><br><span class="line">D   if条件满足情况下要执行的语句块,要放在if语句后面,并缩进</span><br></pre></td></tr></table></figure><blockquote><p>答案：C</p></blockquote><hr><h3 id="第8题"><a href="#第8题" class="headerlink" title="第8题"></a>第8题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行以下程序,使得程序继续执行循环的输入选项是</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    x = input(&#x27;please input a integer: &#x27;)</span><br><span class="line">    if len(x):</span><br><span class="line">        break</span><br><span class="line">else:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">A   输入一个整数</span><br><span class="line">B   输入一个字符串</span><br><span class="line">C   输入一个回车</span><br><span class="line">D   输入一个字符</span><br></pre></td></tr></table></figure><blockquote><p>答案：C</p></blockquote><hr><h3 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下代码的输出结果为</span><br><span class="line"></span><br><span class="line">def myCall(*name):</span><br><span class="line">    print(&#x27;Hello&#x27;, name) </span><br><span class="line">myCall(&#x27;Python&#x27;, &#x27;Java&#x27;) </span><br><span class="line"></span><br><span class="line">A   Hello Python</span><br><span class="line">B   错误,函数只能接收一个参数</span><br><span class="line">C   Hello (&#x27;Python&#x27;, &#x27;Java&#x27;)</span><br><span class="line">D   Hello Python</span><br><span class="line">    Hello Java</span><br></pre></td></tr></table></figure><blockquote><p>答案：C<br>Python *args 是一个用来接收可变数量的非键值对参数的语法。它通常和 args 这个单词一起使用，但不是必须的。当你在函数定义中使用 *args 时，你可以传递任意多个参数给这个函数，而不需要事先定义它们的个数和名称。<br>myCall 函数使用了 *args 来接收 name 参数。当调用 myCall(‘Python’, ‘Java’) 时，实际上是传递了一个包含两个元素的元组 (‘Python’, ‘Java’) 给 name 参数。所以，在 print(‘Hello’, name) 这一行中，name 的值就是 (‘Python’, ‘Java’)。</p></blockquote><hr><h3 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语句list(filter(lambda x:(x%3 ==0 and x%2 == 0), range(1,10)))的结果为</span><br><span class="line"></span><br><span class="line">A   [3,6,9]</span><br><span class="line">B   [3,9]</span><br><span class="line">C   [6]</span><br><span class="line">D   [1,2,3,4,5,6,7,8,9,10]</span><br></pre></td></tr></table></figure><blockquote><p>答案：C<br>Python filter() 函数是一个内置函数，它接受一个函数和一个可迭代对象作为参数，然后返回一个包含了满足该函数条件的元素的迭代器。Python lambda 函数是一种匿名函数，它只有一个表达式作为函数体，可以用来简化代码。<br>filter() 函数使用了 lambda x:(x%3 ==0 and x%2 == 0) 作为过滤条件，range(1,10) 作为可迭代对象。这意味着 filter() 函数会遍历 range(1,10) 中的每个元素 x，并检查 x 是否能同时被 3 和 2 整除。如果是，就把 x 加入到返回的迭代器中；如果不是，就忽略 x</p></blockquote><hr><h3 id="第11题"><a href="#第11题" class="headerlink" title="第11题"></a>第11题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下程序的输出结果是</span><br><span class="line"></span><br><span class="line">def add_Run(L=None):</span><br><span class="line">    if L is None:</span><br><span class="line">        L = []</span><br><span class="line">        L.append(&#x27;Run&#x27;)</span><br><span class="line">    return L</span><br><span class="line">add_Run()</span><br><span class="line">add_Run()</span><br><span class="line">print(add_Run([&#x27;Lying&#x27;]))</span><br><span class="line"></span><br><span class="line">A   [&#x27;Lying&#x27;, &#x27;Run&#x27;]</span><br><span class="line">B   [&#x27;Lying&#x27;, &#x27;Run&#x27;, &#x27;Run&#x27;]</span><br><span class="line">C   [&#x27;Run&#x27;][&#x27;Run&#x27;][&#x27;Lying&#x27;, &#x27;Run&#x27;]</span><br><span class="line">D   [&#x27;Lying&#x27;]</span><br></pre></td></tr></table></figure><blockquote><p>答案：D</p></blockquote><hr><h3 id="第12题"><a href="#第12题" class="headerlink" title="第12题"></a>第12题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下程序的输出结果是</span><br><span class="line"></span><br><span class="line">L = []</span><br><span class="line">x = 3</span><br><span class="line">def pri_val(x):</span><br><span class="line">    L.append(x)</span><br><span class="line">    x = 5</span><br><span class="line">pri_val(x)</span><br><span class="line">print(&#x27;L = &#123;&#125;, x = &#123;&#125;&#x27;.format(L, x))</span><br><span class="line"></span><br><span class="line">A   L = [3], x = 3</span><br><span class="line">B   L = 3, x = 3</span><br><span class="line">C   L = 3, x = 5</span><br><span class="line">D   L = [3], x = 5</span><br></pre></td></tr></table></figure><blockquote><p>答案：A<br>L 是一个全局变量，它是一个空列表。x 是一个全局变量，它的值是 3。pri_val 是一个函数，它接受一个参数 x，并把它添加到 L 中，然后把 x 的值改为 5。<br>当调用 pri_val(x) 时，传递了全局变量 x 的值 3 给函数参数 x。函数会把这个值添加到 L 中，所以 L 变成了 [3]。然后函数会把参数 x 的值改为 5，但这不会影响全局变量 x 的值，因为它们是不同的变量。所以全局变量 x 还是 3</p></blockquote><hr><h3 id="第13题"><a href="#第13题" class="headerlink" title="第13题"></a>第13题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下面程序的运行结果为</span><br><span class="line"></span><br><span class="line">def test(a):</span><br><span class="line">    a = 10</span><br><span class="line">    a = 8 </span><br><span class="line">a = 5</span><br><span class="line">test(a)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">A   8</span><br><span class="line">B   5</span><br><span class="line">C   10</span><br><span class="line">D   0</span><br></pre></td></tr></table></figure><blockquote><p>答案：B</p></blockquote><hr><h3 id="第14题"><a href="#第14题" class="headerlink" title="第14题"></a>第14题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下列代码的输出结果为</span><br><span class="line"></span><br><span class="line">def fun(s):</span><br><span class="line">    a, n=list(s), len(s)</span><br><span class="line">    i, j=0, n-1 </span><br><span class="line">    while i&lt;j:</span><br><span class="line">        a[i], a[j]=a[j], a[i] </span><br><span class="line">        i, j=i+1, j-1 </span><br><span class="line">        result=&#x27;&#x27;.join(a)</span><br><span class="line">    print(result)</span><br><span class="line">ss=&#x27;abcde&#x27; </span><br><span class="line">fun(ss)</span><br><span class="line"></span><br><span class="line">A   abcde  </span><br><span class="line">B   edcba</span><br><span class="line">C   [&#x27;e&#x27;, &#x27;d&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27;]</span><br><span class="line">D   [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span><br></pre></td></tr></table></figure><blockquote><p>答案：B</p></blockquote><hr><h3 id="第15题"><a href="#第15题" class="headerlink" title="第15题"></a>第15题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下列代码的输出结果为</span><br><span class="line"></span><br><span class="line">x = list(range(8))</span><br><span class="line">for index, value in enumerate(x):</span><br><span class="line">    if value % 2 == 0: </span><br><span class="line">        x[index]=5</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">A   [1, 2, 3, 4, 5, 6, 7, 8]</span><br><span class="line">B   [5, 1, 5, 3, 5, 5, 5, 7]</span><br><span class="line">C   [1, 5, 3, 5, 5, 5, 7, 5]</span><br><span class="line">D   [0, 1, 2, 3, 4, 5, 6, 7]</span><br></pre></td></tr></table></figure><blockquote><p>答案：B</p></blockquote><hr><h3 id="第16题"><a href="#第16题" class="headerlink" title="第16题"></a>第16题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">已知 a = [1, 2, 3, 0, 8, 0, 3] 和 b = [5, 8, 12]</span><br><span class="line">语句 list(filter(lambda x: x in a, b))的执行结果为</span><br><span class="line"></span><br><span class="line">A   [1, 2, 3, 5, 8, 12]</span><br><span class="line">B   [1, 2, 3, 0, 8, 0, 3, 5, 8, 12]</span><br><span class="line">C   [8]</span><br><span class="line">D   [1, 2, 3, 8, 3, 5, 8, 12]</span><br></pre></td></tr></table></figure><blockquote><p>答案：C</p></blockquote><hr><h3 id="第17题"><a href="#第17题" class="headerlink" title="第17题"></a>第17题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于基本输入输出函数的描述,错误的选项是</span><br><span class="line"></span><br><span class="line">A   print()函数的参数可以是一个函数,执行结果是显示函数返回的值</span><br><span class="line">B   当print()函数输出多个变量的时候,可以用逗号分隔多个变量名</span><br><span class="line">C   eval()函数的参数是“3*4”的时候,返回的值是整数“12”</span><br><span class="line">D   当用户输入一个整数“6”的时候,input()函数返回的也是整数“6”</span><br></pre></td></tr></table></figure><blockquote><p>答案：D</p></blockquote><hr><h3 id="第18题"><a href="#第18题" class="headerlink" title="第18题"></a>第18题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下列程序的输出结果为</span><br><span class="line"></span><br><span class="line">def f():</span><br><span class="line">    a = []</span><br><span class="line">    for i in range(3): </span><br><span class="line">        a.append(lambda x: i*x)</span><br><span class="line">    return a </span><br><span class="line">t = f()</span><br><span class="line">print(t[0](2), t[1](2), t[2](2))</span><br><span class="line"></span><br><span class="line">A   4 4 4</span><br><span class="line">B   3 3 3</span><br><span class="line">C   1 2 3</span><br><span class="line">D   2 2 2</span><br></pre></td></tr></table></figure><blockquote><p>答案：A<br>f 是一个函数，它创建了一个空列表 a，并用一个 for 循环把三个 lambda 函数添加到 a 中，然后返回 a。t 是一个变量，它接收了 f 函数的返回值，也就是包含三个 lambda 函数的列表。<br>当打印 t0, t1, t2 时，其实是调用了列表中的三个 lambda 函数，并传递了参数 2 给它们。每个 lambda 函数都有一个形参 x，并使用了闭包（closure）的概念。闭包是一种能够捕获外部作用域中变量的函数12。<br>在这里，每个 lambda 函数都捕获了 for 循环中的变量 i。但是，根据搜索结果13，Python 的闭包不是捕获变量的值，而是捕获变量的名字。也就是说，在定义 lambda x: i<em>x 时，并不会立即计算 i 的值，而是在调用 lambda 函数时才会计算 i 的值。<br>因此，在打印 t0, t1, t2 时，每个 lambda 函数都会使用 for 循环最后一次迭代后的 i 的值，也就是 2。所以每个 lambda 函数都会返回 2</em>i*x = 4。</p></blockquote><hr><h3 id="第19题"><a href="#第19题" class="headerlink" title="第19题"></a>第19题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行以下程序,下面选项描述错误的是</span><br><span class="line"></span><br><span class="line">x,y = 1,2</span><br><span class="line">while x &lt; 20:</span><br><span class="line">    x, y = y, x + y</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">A   循环次数小于20次</span><br><span class="line">B   输出结果包含8</span><br><span class="line">C   循环次数大于10次</span><br><span class="line">D   输出结果包含5和2</span><br></pre></td></tr></table></figure><blockquote><p>答案：C</p></blockquote><hr><h3 id="第20题"><a href="#第20题" class="headerlink" title="第20题"></a>第20题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表达式[i*i for i in range(1,-3, -1)]的值为</span><br><span class="line"></span><br><span class="line">A   [1, -3, -1]</span><br><span class="line">B   [1, 0, 1, 4]</span><br><span class="line">C   [1, 9, 1]</span><br><span class="line">D   [1, 0, -1, -2]</span><br></pre></td></tr></table></figure><blockquote><p>答案：B</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> Python与数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据科学 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python与数据科学第2章 - 数据类型</title>
      <link href="/2023/05/14/0003-01/"/>
      <url>/2023/05/14/0003-01/</url>
      
        <content type="html"><![CDATA[<h2 id="第2章-数据类型"><a href="#第2章-数据类型" class="headerlink" title="第2章 - 数据类型"></a>第2章 - 数据类型</h2><br><h3 id="第1题"><a href="#第1题" class="headerlink" title="第1题"></a>第1题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用print()格式化输出,哪个选项用于控制浮点数的小数点后两位输出?</span><br><span class="line"></span><br><span class="line">A   &#123;.2&#125;</span><br><span class="line">B   &#123;:.2&#125;</span><br><span class="line">C   &#123;:.2f&#125;</span><br><span class="line">D   &#123;.2f&#125;</span><br></pre></td></tr></table></figure><blockquote><p>答案：C<br>解析：在Python中，可以使用{}占位符和format()方法来实现格式化输出。<br>A与D没有冒号，未指定参数位置，语法错误。而C满足题目要求<br>B的输出有些奇怪，小数位数足够的时候，是保留数字的有效位数，可以试下下面两个语句<br>print(“{:.5}”.format(314.15926))   print(“{:.3}”.format(314.15926))<br>详解：<a href="https://www.runoob.com/python/att-string-format.html">https://www.runoob.com/python/att-string-format.html</a></p></blockquote><hr><h3 id="第2题"><a href="#第2题" class="headerlink" title="第2题"></a>第2题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于字符串 s = &#x27;jwtent&#x27;,下列表达式的输出和其他三个不同的是</span><br><span class="line"></span><br><span class="line">A   s[::-5]</span><br><span class="line">B   s[0] + s[-1]</span><br><span class="line">C   s[::-1][::-5]</span><br><span class="line">D   s[::5]</span><br></pre></td></tr></table></figure><blockquote><p>答案：A<br>解析：在Python中，可以使用s[start:end:step]来实现切片操作，其中，start表示起始位置（默认为0），end表示结束位置（默认为字符串长度），step表示步长（默认为1）。<br>A. s[::-5] 表示从右向左每隔五个字符取一个字符，结果是’tj’<br>B. s[0] + s[-1] 表示取第一个字符和最后一个字符并拼接起来，结果是’jt’<br>C. s[::-1][::-5] 表示先反转字符串’tnetwj’再从右向左每隔五个字符取一个字符，并拼接起来，结果是’jt’<br>D. s[::5] 表示从左向右每隔五个字符取一个字符，并拼接起来，结果是’jt’<br>详解：<a href="https://zhuanlan.zhihu.com/p/79541418">https://zhuanlan.zhihu.com/p/79541418</a></p></blockquote><hr><h3 id="第3题"><a href="#第3题" class="headerlink" title="第3题"></a>第3题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下列运算符使用错误的是</span><br><span class="line"></span><br><span class="line">A   3*&#x27;abc&#x27;</span><br><span class="line">B   [1,2,3]+[4,5,6]</span><br><span class="line">C   (-10) % (-3)</span><br><span class="line">D   1+&#x27;a&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>答案：D<br>解析：python是强类型语言，无法实现int和string的相加，故D错误<br>其他项的结果分别为 abcabcabc , [1,2,3,4,5,6] , -1</p></blockquote><hr><h3 id="第4题"><a href="#第4题" class="headerlink" title="第4题"></a>第4题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)中的内容描述,正确的选项是</span><br><span class="line"></span><br><span class="line">A   模板字符串里的格式控制信息语法格式是:&#123;&lt;参数序号&gt;:&lt;格式控制标记&gt;&#125;,参数序号是从1开始</span><br><span class="line">B   格式控制信息&#123;:*^10&#125;表示这个位置是最大长度为10的整数</span><br><span class="line">C   格式控制信息&#123;2:0&gt;7f&#125;里面的‘f’表示这个位置是一个整数</span><br><span class="line">D   逗号分隔的参数可以是变量,也可以是函数</span><br></pre></td></tr></table></figure><blockquote><p>答案：D<br>解析：A错误，参数序号从0开始。<br>B，{:*^10}表示控制第一个参数以宽度为10的域居中输出其余空位补星号，且长度大于等于10的内容原样输出<br>print(“{:*^10}”.format(314.15)) -&gt; **314.15**<br>print(“{:*^10}”.format(314.15111111)) -&gt; 314.15111111</p></blockquote><hr><h3 id="第5题"><a href="#第5题" class="headerlink" title="第5题"></a>第5题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于 a and b 的描述错误的是</span><br><span class="line"></span><br><span class="line">A   若 a=False, b=False 则 a and b 的值为 False</span><br><span class="line">B   若 a=False, b=True 则 a and b 的值为 False</span><br><span class="line">C   若 a=True, b=False 则 a and b 的值为 True</span><br><span class="line">D   若 a=True,b=True 则 a and b 的值为 True</span><br></pre></td></tr></table></figure><blockquote><p>答案：C</p></blockquote><hr><h3 id="第6题"><a href="#第6题" class="headerlink" title="第6题"></a>第6题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于Python数据类型的描述,正确的选项是</span><br><span class="line"></span><br><span class="line">A   运算符+、-、*、/ 等跟赋值符号 = 相连,形成增强赋值操作符</span><br><span class="line">B   内置函数divmod(x,y)的运算结果是两个整数:x除y的整数商以及余数</span><br><span class="line">C   函数ord(x)是返回字符串x对应的Unicode编码</span><br><span class="line">D   函数lower(x)是将字符串x的首字母小写</span><br></pre></td></tr></table></figure><blockquote><p>答案：A<br>解析：<br>C错误，ord(x)是返回x的八进制码<br>D错误，lower(x)是将x的所有字母小写</p></blockquote><hr><h3 id="第7题"><a href="#第7题" class="headerlink" title="第7题"></a>第7题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于Python语言的注释语句的描述,正确的是</span><br><span class="line"></span><br><span class="line">A   &#x27;&#x27;&#x27;开头的语句也表示注释,用法跟#一样</span><br><span class="line">B   #之后的语句被解释器解释,但不执行</span><br><span class="line">C   以#开头的语句是注释</span><br><span class="line">D   #注释符可以注释多行</span><br></pre></td></tr></table></figure><blockquote><p>答案：C<br>解析：’’’是多行注释，需要成对使用，用于注释代码块，#是单行注释。被注释的内容会被解释器略过</p></blockquote><hr><h3 id="第8题"><a href="#第8题" class="headerlink" title="第8题"></a>第8题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下不是Python数据类型的是</span><br><span class="line"></span><br><span class="line">A   列表</span><br><span class="line">B   整数</span><br><span class="line">C   字符串</span><br><span class="line">D   实数</span><br></pre></td></tr></table></figure><blockquote><p>答案：D</p></blockquote><hr><h3 id="第9题"><a href="#第9题" class="headerlink" title="第9题"></a>第9题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下关于程序设计语言的描述,正确的选项是</span><br><span class="line"></span><br><span class="line">A   Python语言是一种面向过程,也是面向对象的语言</span><br><span class="line">B   Python语言与平台相关</span><br><span class="line">C   Python语言的生态库都是官方开发的</span><br><span class="line">D   Python语言是网络通用语言</span><br></pre></td></tr></table></figure><blockquote><p>答案：A<br>解析：<br>B错误，Python语言是一种跨平台的计算机程序设计语言，可以在多种操作系统上运行。<br>C错误，Python语言除了有强大的标准库之外，还有丰富的第三方库，由不同的开发者或组织提供。<br>D错误，没有明确的定义和依据</p></blockquote><hr><h3 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行下述程序的输出结果是</span><br><span class="line"></span><br><span class="line">ds = &#123;&#x27;eng&#x27;:2,&#x27;math&#x27;:6,&#x27;comp&#x27;:9,&#x27;PE&#x27;:4&#125;</span><br><span class="line">print(ds.pop(max(ds.keys()), 0))</span><br><span class="line"></span><br><span class="line">A   math</span><br><span class="line">B   PE</span><br><span class="line">C   6</span><br><span class="line">D   4</span><br></pre></td></tr></table></figure><blockquote><p>答案：C<br>解析： keys() 方法用于返回字典中的所有键；values() 方法用于返回字典中所有键对应的值<br>Python 字典 pop() 方法删除字典给定键 key 所对应的值，返回值为被删除的值。<br>pop(key[,default])，key - 要删除的键，default - 当键 key 不存在时返回的值</p></blockquote><hr><h3 id="第11题"><a href="#第11题" class="headerlink" title="第11题"></a>第11题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下面不属于Python保留字的是</span><br><span class="line"></span><br><span class="line">A   import</span><br><span class="line">B   type</span><br><span class="line">C   elif</span><br><span class="line">D   def</span><br></pre></td></tr></table></figure><blockquote><p>答案：B</p></blockquote><hr><h3 id="第12题"><a href="#第12题" class="headerlink" title="第12题"></a>第12题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设a.txt的内容是: a,b,c,d 以下程序执行结果是</span><br><span class="line"></span><br><span class="line">with open(&#x27;a.txt&#x27;,&#x27;r&#x27;) as f:</span><br><span class="line">print(f.read().split(&#x27;,&#x27;))</span><br><span class="line"></span><br><span class="line">A   a, b, c, d</span><br><span class="line">B   [a, b, c, d]</span><br><span class="line">C   &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;</span><br><span class="line">D   [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br></pre></td></tr></table></figure><blockquote><p>答案：D</p></blockquote><hr><h3 id="第13题"><a href="#第13题" class="headerlink" title="第13题"></a>第13题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下程序的输出结果,可能的选项是</span><br><span class="line"></span><br><span class="line">ds = &#123;&#x27;av&#x27;:2,&#x27;vr&#x27;:4,&#x27;ls&#x27;:9,&#x27;path&#x27;:6&#125;</span><br><span class="line">print(ds.popitem(), len(ds))</span><br><span class="line"></span><br><span class="line">A   (&#x27;path&#x27;, 6) 3</span><br><span class="line">B   (&#x27;av&#x27;, 2) 4</span><br><span class="line">C   (&#x27;vr&#x27;, 2) 3</span><br><span class="line">D   (&#x27;path&#x27;, 6) 4</span><br></pre></td></tr></table></figure><blockquote><p>答案：A<br>解析：Python中字典的popitem方法用于从字典中随机返回一个元素，并将该元素从字典中删除，如果字典为空，那么程序报错。</p></blockquote><hr><h3 id="第14题"><a href="#第14题" class="headerlink" title="第14题"></a>第14题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般情况下, 整数用十进制表示,如果用其他进制表示一个数,错误的描述选项是</span><br><span class="line"></span><br><span class="line">A   0x1010表示一个十六进制数</span><br><span class="line">B   1010b表示一个二进制数</span><br><span class="line">C   0o1010表示一个八进制数</span><br><span class="line">D   0b1010表示一个二进制数</span><br></pre></td></tr></table></figure><blockquote><p>答案：B</p></blockquote><hr><h3 id="第15题"><a href="#第15题" class="headerlink" title="第15题"></a>第15题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下列关于 Python 变量的说法错误的是</span><br><span class="line"></span><br><span class="line">A   变量无须指定类型</span><br><span class="line">B   变量不必事先声明但区分大小写</span><br><span class="line">C   变量无须先创建和赋值而直接使用</span><br><span class="line">D   可以采用使用 del 关键字释放变量</span><br></pre></td></tr></table></figure><blockquote><p>答案：C</p></blockquote><hr><h3 id="第16题"><a href="#第16题" class="headerlink" title="第16题"></a>第16题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下哪个选项是 print((9\*\*0.5)*(9**0.5)==3)的执行结果</span><br><span class="line"></span><br><span class="line">A   9</span><br><span class="line">B   False</span><br><span class="line">C   0</span><br><span class="line">D   True</span><br></pre></td></tr></table></figure><blockquote><p>答案：B</p></blockquote><hr><h3 id="第17题"><a href="#第17题" class="headerlink" title="第17题"></a>第17题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串是一个字符序列,给字符串s,以下表示s从右侧向左第三个字符的是</span><br><span class="line"></span><br><span class="line">A   s[:-3]</span><br><span class="line">B   s[0:-3]</span><br><span class="line">C   s[3]</span><br><span class="line">D   s[-3]</span><br></pre></td></tr></table></figure><blockquote><p>答案：D</p></blockquote><hr><h3 id="第18题"><a href="#第18题" class="headerlink" title="第18题"></a>第18题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下面不能创建一个集合的语句是</span><br><span class="line"></span><br><span class="line">A   s3=(1,2,3,4)</span><br><span class="line">B   s1=set()</span><br><span class="line">C   s2=set(“abcd”)</span><br><span class="line">D   s4=frozenset((3,2,1))</span><br></pre></td></tr></table></figure><blockquote><p>答案：A<br>解析：A创建的是元组</p></blockquote><hr><h3 id="第19题"><a href="#第19题" class="headerlink" title="第19题"></a>第19题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于以下程序输出结果的描述,正确的选项是</span><br><span class="line"></span><br><span class="line">l = [1,2,3,4,5,6,7]</span><br><span class="line">print(l.pop(0), len(l))</span><br><span class="line"></span><br><span class="line">A   0 7</span><br><span class="line">B   0 6</span><br><span class="line">C   1 7</span><br><span class="line">D   1 6</span><br></pre></td></tr></table></figure><blockquote><p>答案：D<br>解析：list的pop方法的作用是移除列表对应索引上的元素，并返回该元素的值，若没有指定索引，则默认为-1。即最后一个元素</p></blockquote><hr><h3 id="第20题"><a href="#第20题" class="headerlink" title="第20题"></a>第20题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行下面的操作后,list2 的值为</span><br><span class="line"></span><br><span class="line">list1 = [4,5,6]</span><br><span class="line">list2 = list1</span><br><span class="line">list1[2] = 3</span><br><span class="line"></span><br><span class="line">A   [4,5,6]</span><br><span class="line">B   [4,5,3]</span><br><span class="line">C   [4,3,6]</span><br><span class="line">D   其他选项都不正确</span><br></pre></td></tr></table></figure><blockquote><p>答案：B<br>解析：list2 = list1这句意思表示list1和list2指向了同一个内存空间</p></blockquote><hr><h3 id="第21题"><a href="#第21题" class="headerlink" title="第21题"></a>第21题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下关于Python语言中“缩进”说法正确的是</span><br><span class="line"></span><br><span class="line">A   缩进是非强制的,仅为了提高代码可读性`</span><br><span class="line">B   缩进统一为4个空格</span><br><span class="line">C   缩进在程序中长度统一且强制使用</span><br><span class="line">D   缩进可以用在任何语句之后,表示语句间的包含关系</span><br></pre></td></tr></table></figure><blockquote><p>答案：C<br>解析：Python 要求属于同一作用域中的各行代码，它们的缩进量必须一致，但具体缩进量为多少，并不做硬性规定。</p></blockquote><hr><h3 id="第22题"><a href="#第22题" class="headerlink" title="第22题"></a>第22题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对于表达式 a = [3, 4, 5, 6, 7, 9, 11],以下输出结果正确的是</span><br><span class="line"></span><br><span class="line">A   print(a[0:-1]) =&gt; [3,4,5,6,7,9]</span><br><span class="line">B   print(a[0:0]) =&gt; [3]</span><br><span class="line">C   print(a[1:-1]) =&gt; [4,5,6,7,9,11]</span><br><span class="line">D   print(a[3:7]) =&gt; [6,7,9,11,0]</span><br></pre></td></tr></table></figure><blockquote><p>答案：A<br>解析：先确定切片所指的两端元素是什么，然后左闭右开，如果索引越界，则指代取到端点<br>B错误，print(a[0:0]) =&gt; []<br>C错误，print(a[1:-1]) =&gt; [4,5,6,7,9]<br>D错误，print(a[3:7]) =&gt; [6,7,9,11]</p></blockquote><hr><h3 id="第23题"><a href="#第23题" class="headerlink" title="第23题"></a>第23题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有表达式 x = [0, -1, 0, None, (), [5,8,10]],则 print(len(x))的结果为</span><br><span class="line"></span><br><span class="line">A   4</span><br><span class="line">B   5</span><br><span class="line">C   8</span><br><span class="line">D   6</span><br></pre></td></tr></table></figure><blockquote><p>答案：D</p></blockquote><hr><h3 id="第24题"><a href="#第24题" class="headerlink" title="第24题"></a>第24题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关于组合数据类型的描述,正确的选项是</span><br><span class="line"></span><br><span class="line">A   序列类型的元素可以用reverse()方法交换相邻元素的位置</span><br><span class="line">B   列表类型里的元素要求是同一种数据类型</span><br><span class="line">C   Python中最常用的映射类型的典型代表是字典类型</span><br><span class="line">D   元组采用大括号方式表示</span><br></pre></td></tr></table></figure><blockquote><p>答案：C<br>解析：<br>A错误，reverse()是将序列逆序<br>B错误，列表里的元素不一定要都是同类型数据<br>D错误，元组采用小括号方式表示</p></blockquote><hr><h3 id="第25题"><a href="#第25题" class="headerlink" title="第25题"></a>第25题</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以下关于Python程序的基本语法元素,错误的描述是</span><br><span class="line"></span><br><span class="line">A   变量的命名规则之一是名字的首位不能是数字</span><br><span class="line">B   变量是由用户定义的用来保存和表示数据的一种语法元素</span><br><span class="line">C   Python语言只能用4个空格的缩进来实现程序的强制可读性</span><br><span class="line">D   变量标识符是一个字符串,长度是没有限制的</span><br></pre></td></tr></table></figure><blockquote><p>答案：C<br>解析：python没有硬性规定缩进的长度，程序内缩进的长度保持一致即可</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> Python与数据科学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据科学 </tag>
            
            <tag> 作业 </tag>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
